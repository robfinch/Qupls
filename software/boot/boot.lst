Sections:
00: ".bss" (0-70)
01: ".data" (0-A)
02: ".text" (0-B18)
03: ".rodata" (0-8)


Source: "boot.asm"
                                    	     1: ; boot.asm Qupls assembly language
                                    	     2: 
                                    	     3: 	.bss
00:0000000000000000 00              	     4: 	.space	10
00:0000000000000001 *
                                    	     5: 
                                    	     6: 	.data
01:0000000000000000 00              	     7: 	.space	10
01:0000000000000001 *
                                    	     8: 	.sdreg 60
                                    	     9: 
                                    	    10: ;	.org	0xFFFFFFFFFFFD0000
                                    	    11: 	.text
                                    	    12: ;	.align	0
                                    	    13: .extern	_bootrom
                                    	    14: 
                                    	    15: start:
                                    	    16: ; set global pointers
02:0000000000000000 841E000000      	    17: 	lda gp,_start_data
02:0000000000000005 B33E000000      	    18: 	orm gp,_start_data
02:000000000000000A 041E000000      	    19: 	lda gp1,_start_rodata
02:000000000000000F 333E000000      	    20: 	orm gp1,_start_rodata
02:0000000000000014 841E000000      	    21: 	lda gp,_start_bss
02:0000000000000019 B33E000000      	    22: 	orm gp,_start_bss
02:000000000000001E 2040370100      	    23: 	bra _bootrom
02:0000000000000023 FFFFFFFFFF      	    24: 	nop
02:0000000000000028 FFFFFFFFFF      	    25: 	nop
02:000000000000002D FFFFFFFFFF      	    26: 	nop
02:0000000000000032 FFFFFFFFFF      	    27: 	nop
                                    	    28: ;	padi
                                    	    29: 	.type	start,@function
                                    	    30: 	.size	start,$-_start
                                    	    31: 
                                    	    32: .include "serial.asm"

Source: "serial.asm"
                                    	     1:   
                                    	     2: 	.text
                                    	     3: 
                                    	     4: ;{++ _SerialTest
                                    	     5: 
                                    	     6: 	.sdreg	61
                                    	     7: 	.sd2reg	60
                                    	     8: 	.sd3reg	51
                                    	     9: _SerialTest:
02:0000000000000037 84FF07FFFF      	    10:   sub sp,sp,32
02:000000000000003C 53FF070000      	    11:   sto fp,[sp]
02:0000000000000041 0FFF070000      	    12:   mov fp,sp
02:0000000000000046 53DC870000      	    13:   sto lr0,16[fp]
02:000000000000004B 84FF07FFFF      	    14:   sub sp,sp,32
                                    	    15: .00021:
02:0000000000000050 84FFC7FFFF      	    16:   sub sp,sp,8
02:0000000000000055 04A2070000      	    17:   lda t0,serial.00001[gp]
02:000000000000005A 4082000000      	    18:   ldb t0,0[t0]
02:000000000000005F 53E2070000      	    19:   sto t0,0[sp]
02:0000000000000064 207C720000      	    20:   bsr _SerialPutChar
02:0000000000000069 20E0FCFFFF      	    21:   bra .00021
                                    	    22: .00022:
                                    	    23: .00020:
02:000000000000006E 46DC870000      	    24:   ldo lr0,16[fp]
02:0000000000000073 8FDF070000      	    25:   mov sp,fp
02:0000000000000078 46FF070000      	    26:   ldo fp,[sp]
02:000000000000007D 2300070100      	    27:   rtd 32,0
                                    	    28: 	.type	_SerialTest,@function
                                    	    29: 	.size	_SerialTest,$-_SerialTest
                                    	    30: 
                                    	    31: 
                                    	    32: ;--}
                                    	    33:    
                                    	    34: ;{++ _SerialInit
                                    	    35: 
                                    	    36: 	.sdreg	61
                                    	    37: 	.sd2reg	60
                                    	    38: 	.sd3reg	51
                                    	    39: _SerialInit:
02:0000000000000082 84FF07FFFF      	    40:   sub sp,sp,32
02:0000000000000087 53FF070000      	    41:   sto fp,[sp]
02:000000000000008C 0FFF070000      	    42:   mov fp,sp
02:0000000000000091 53DC870000      	    43:   sto lr0,16[fp]
02:0000000000000096 84FFC7FEFF      	    44:   sub sp,sp,40
02:000000000000009B 53E8070000      	    45:   sto s0,[sp]
                                    	    46: ; __int32* pACIA = 0xFED00000;
02:00000000000000A0 0408000000      	    47:   ldi s0,0
02:00000000000000A5 3128000000      	    48:   addm s0,4077
                                    	    49: ; SerHeadRcv = 0;
02:00000000000000AA 53A0470200      	    50:   sto r0,serial.00003[gp]
                                    	    51: ; SerTailRcv = 0;
02:00000000000000AF 53A0070200      	    52:   sto r0,serial.00002[gp]
                                    	    53: ; SerHeadXmit = 0;
02:00000000000000B4 53A0C70200      	    54:   sto r0,serial.00005[gp]
                                    	    55: ; SerTailXmit = 0;
02:00000000000000B9 53A0870200      	    56:   sto r0,serial.00004[gp]
                                    	    57: ; SerRcvXon = 0;
02:00000000000000BE 50A0070300      	    58:   stb r0,serial.00006[gp]
                                    	    59: ; SerRcvXoff = 0;
02:00000000000000C3 50A00F0300      	    60:   stb r0,serial.00007[gp]
                                    	    61: ; pACIA[2] = 0x09;				// dtr,rts active, rxint enabled (bit 1=0), no parity
02:00000000000000C8 0402480000      	    62:   ldi t0,9
02:00000000000000CD 5202420000      	    63:   stt t0,8[s0]
                                    	    64: ; pACIA[3] = 0x6001E;		// baud 9600, 1 stop bit, 8 bit, internal baud gen, no fifos
02:00000000000000D2 0402F00030      	    65:   ldi t0,393246
02:00000000000000D7 5202620000      	    66:   stt t0,12[s0]
                                    	    67: .00032:
02:00000000000000DC 46E8070000      	    68:   ldo s0,[sp]
02:00000000000000E1 8FDF070000      	    69:   mov sp,fp
02:00000000000000E6 46FF070000      	    70:   ldo fp,[sp]
02:00000000000000EB 2300070100      	    71:   rtd 32,0
                                    	    72: 	.type	_SerialInit,@function
                                    	    73: 	.size	_SerialInit,$-_SerialInit
                                    	    74: 
                                    	    75: 
                                    	    76: ;--}
                                    	    77:    
                                    	    78: ;{++ _SerialRcvCount
                                    	    79: 
                                    	    80: 	.sdreg	61
                                    	    81: 	.sd2reg	60
                                    	    82: 	.sd3reg	51
                                    	    83: _SerialRcvCount:
02:00000000000000F0 84FF07FFFF      	    84:   sub sp,sp,32
02:00000000000000F5 53FF070000      	    85:   sto fp,[sp]
02:00000000000000FA 0FFF070000      	    86:   mov fp,sp
02:00000000000000FF 53DC870000      	    87:   sto lr0,16[fp]
02:0000000000000104 84FFC7FEFF      	    88:   sub sp,sp,40
02:0000000000000109 53E8070000      	    89:   sto s0,[sp]
                                    	    90: ; count = SerTailRcv - SerHeadRcv;
02:000000000000010E C6A2070200      	    91:   ldo t1,serial.00002[gp]
02:0000000000000113 46A3470200      	    92:   ldo t2,serial.00003[gp]
02:0000000000000118 02A830000A      	    93:   sub s0,t1,t2
                                    	    94: ; if (count >=0)
02:000000000000011D 2911020200      	    95:   blt s0,r0,.00045
                                    	    96: ; return (count);
02:0000000000000122 8F00020000      	    97:   mov a0,s0
                                    	    98: .00044:
02:0000000000000127 46E8070000      	    99:   ldo s0,[sp]
02:000000000000012C 8FDF070000      	   100:   mov sp,fp
02:0000000000000131 46FF070000      	   101:   ldo fp,[sp]
02:0000000000000136 2300070100      	   102:   rtd 32,0
                                    	   103: .00045:
                                    	   104: ; count = 0x1000 - SerHeadRcv;
02:000000000000013B 8402008000      	   105:   ldi t1,4096
02:0000000000000140 46A3470200      	   106:   ldo t2,serial.00003[gp]
02:0000000000000145 02A830000A      	   107:   sub s0,t1,t2
                                    	   108: ; count += SerTailRcv;
02:000000000000014A 46A2070200      	   109:   ldo t0,serial.00002[gp]
02:000000000000014F 8200220008      	   110:   add a0,s0,t0
                                    	   111: ; return (count);
02:0000000000000154 2060FAFFFF      	   112:   bra .00044
                                    	   113: 	.type	_SerialRcvCount,@function
                                    	   114: 	.size	_SerialRcvCount,$-_SerialRcvCount
                                    	   115: 
                                    	   116: 
                                    	   117: ;--}
                                    	   118:     
                                    	   119: ;{++ _SerialGetChar
                                    	   120: 
                                    	   121: 	.sdreg	61
                                    	   122: 	.sd2reg	60
                                    	   123: 	.sd3reg	51
                                    	   124: _SerialGetChar:
02:0000000000000159 84FF07FFFF      	   125:   sub sp,sp,32
02:000000000000015E 53FF070000      	   126:   sto fp,[sp]
02:0000000000000163 0FFF070000      	   127:   mov fp,sp
02:0000000000000168 53DC870000      	   128:   sto lr0,16[fp]
02:000000000000016D 84FF47FEFF      	   129:   sub sp,sp,56
02:0000000000000172 53E8070000      	   130:   sto s0,[sp]
02:0000000000000177 D3E8470000      	   131:   sto s1,8[sp]
02:000000000000017C 53E9870000      	   132:   sto s2,16[sp]
02:0000000000000181 04A2470200      	   133:   lda t0,serial.00003[gp]
02:0000000000000186 0F88000000      	   134:   mov s0,t0
02:000000000000018B 46C987FFFF      	   135:   ldo s2,-16[fp]
                                    	   136: ; istat = disable_int(8);		// bit 3=machine interrupt enable, mask off interrupts
02:0000000000000190 84FFC7FFFF      	   137:   sub sp,sp,8
02:0000000000000195 0402400000      	   138:   ldi t0,8
02:000000000000019A 53E2070000      	   139:   sto t0,0[sp]
02:000000000000019F 201C000000      	   140:   bsr _disable_int
02:00000000000001A4 8F28000000      	   141:   mov s1,a0
                                    	   142: ; __sync(0xFFFF);
02:00000000000001A9 72FFFF0000      	   143:   sync 65535
                                    	   144: ; if (SerialRcvCount() <= 8) {
02:00000000000001AE 53C247FEFF      	   145:   sto t0,-56[fp]
02:00000000000001B3 20BCE7FFFF      	   146:   bsr _SerialRcvCount
02:00000000000001B8 46C247FEFF      	   147:   ldo t0,-56[fp]
02:00000000000001BD 8402400000      	   148:   ldi t1,8
02:00000000000001C2 A93A280400      	   149:   bgt a0,t1,.00063
                                    	   150: ; if (!SerRcvXon) {
02:00000000000001C7 41A2070300      	   151:   ldbu t0,serial.00006[gp]
02:00000000000001CC 0B82000000      	   152:   cmp t0,t0,0
02:00000000000001D1 0D82080080      	   153:   extu t0,t0,1,0
02:00000000000001D6 A880000000      	   154:   bnez t0,.00065
                                    	   155: ; SerRcvXoff = 0;
02:00000000000001DB 50A00F0300      	   156:   stb r0,serial.00007[gp]
                                    	   157: ; SerRcvXon = 0x11;			// flag so we don't send multiple times
02:00000000000001E0 0402880000      	   158:   ldi t0,17
02:00000000000001E5 50A2070300      	   159:   stb t0,serial.00006[gp]
                                    	   160: ; SerialPutChar(0x11);
02:00000000000001EA 84FFC7FFFF      	   161:   sub sp,sp,8
02:00000000000001EF 53E2070000      	   162:   sto t0,0[sp]
02:00000000000001F4 207C400000      	   163:   bsr _SerialPutChar
                                    	   164: .00065:
                                    	   165: .00063:
                                    	   166: ; if (SerHeadRcv!=SerTailRcv) {
02:00000000000001F9 C602020000      	   167:   ldo t1,[s0]
02:00000000000001FE 46A3070200      	   168:   ldo t2,serial.00002[gp]
02:0000000000000203 28AA300A00      	   169:   beq t1,t2,.00067
                                    	   170: ; inb = SerRcvBuf[SerHeadRcv];	// get byte from buffer
02:0000000000000208 C7A2170300      	   171:   ldou t1,serial.00008[gp]
02:000000000000020D CF022A0000      	   172:   ldb t1,[s0+t1*]
02:0000000000000212 0DA9001CA0      	   173:   ext s2,t1,0,7
                                    	   174: ; SerHeadRcv++;									// increment buffer pointer with wrap-around
02:0000000000000217 4602020000      	   175:   ldo t0,[s0]
02:000000000000021C 0482080000      	   176:   add t0,t0,1
02:0000000000000221 5302020000      	   177:   sto t0,[s0]
                                    	   178: ; SerHeadRcv &= 0xfff;
02:0000000000000226 4602020000      	   179:   ldo t0,[s0]
02:000000000000022B 0882F87F00      	   180:   and t0,t0,4095
02:0000000000000230 5302020000      	   181:   sto t0,[s0]
                                    	   182: ; restore_int(istat);
02:0000000000000235 84FFC7FFFF      	   183:   sub sp,sp,8
02:000000000000023A D3E8070000      	   184:   sto s1,0[sp]
02:000000000000023F 201C000000      	   185:   bsr _restore_int
                                    	   186: ; return (inb);
02:0000000000000244 8F40020000      	   187:   mov a0,s2
                                    	   188: .00062:
02:0000000000000249 46E8070000      	   189:   ldo s0,[sp]
02:000000000000024E C6E8470000      	   190:   ldo s1,8[sp]
02:0000000000000253 46E9870000      	   191:   ldo s2,16[sp]
02:0000000000000258 46DC870000      	   192:   ldo lr0,16[fp]
02:000000000000025D 8FDF070000      	   193:   mov sp,fp
02:0000000000000262 46FF070000      	   194:   ldo fp,[sp]
02:0000000000000267 2300070100      	   195:   rtd 32,0
                                    	   196: .00067:
                                    	   197: ; restore_int(istat);
02:000000000000026C 84FFC7FFFF      	   198:   sub sp,sp,8
02:0000000000000271 D3E8070000      	   199:   sto s1,0[sp]
02:0000000000000276 201C000000      	   200:   bsr _restore_int
                                    	   201: ; return (-1);
02:000000000000027B 8400F8FFFF      	   202:   ldi a0,-1
02:0000000000000280 2020F9FFFF      	   203:   bra .00062
                                    	   204: 	.type	_SerialGetChar,@function
                                    	   205: 	.size	_SerialGetChar,$-_SerialGetChar
                                    	   206: 
                                    	   207: 
                                    	   208: ;--}
                                    	   209:     
                                    	   210: ;{++ _SerialPeekChar
                                    	   211: 
                                    	   212: 	.sdreg	61
                                    	   213: 	.sd2reg	60
                                    	   214: 	.sd3reg	51
                                    	   215: _SerialPeekChar:
02:0000000000000285 84FF07FFFF      	   216:   sub sp,sp,32
02:000000000000028A 53FF070000      	   217:   sto fp,[sp]
02:000000000000028F 0FFF070000      	   218:   mov fp,sp
02:0000000000000294 53DC870000      	   219:   sto lr0,16[fp]
02:0000000000000299 84FF87FEFF      	   220:   sub sp,sp,48
02:000000000000029E 53E8070000      	   221:   sto s0,[sp]
02:00000000000002A3 D3E8470000      	   222:   sto s1,8[sp]
                                    	   223: ; istat = disable_int(8);						// temporarily mask interrupts
02:00000000000002A8 84FFC7FFFF      	   224:   sub sp,sp,8
02:00000000000002AD 0402400000      	   225:   ldi t0,8
02:00000000000002B2 53E2070000      	   226:   sto t0,0[sp]
02:00000000000002B7 201C000000      	   227:   bsr _disable_int
02:00000000000002BC 0F28000000      	   228:   mov s0,a0
                                    	   229: ; __sync(0xffff);
02:00000000000002C1 72FFFF0000      	   230:   sync 65535
                                    	   231: ; if (SerHeadRcv != SerTailRcv) {		// anything in buffer?
02:00000000000002C6 C6A2470200      	   232:   ldo t1,serial.00003[gp]
02:00000000000002CB 46A3070200      	   233:   ldo t2,serial.00002[gp]
02:00000000000002D0 28B2300600      	   234:   beq t1,t2,.00081
                                    	   235: ; inb = SerRcvBuf[SerHeadRcv];		// yes, get byte from buffer
02:00000000000002D5 C7A2170300      	   236:   ldou t1,serial.00008[gp]
02:00000000000002DA CFA2E80100      	   237:   ldb t1,0[t1+gp*]
02:00000000000002DF 8DA8001CA0      	   238:   ext s1,t1,0,7
                                    	   239: ; restore_int(istat);
02:00000000000002E4 84FFC7FFFF      	   240:   sub sp,sp,8
02:00000000000002E9 53E8070000      	   241:   sto s0,0[sp]
02:00000000000002EE 201C000000      	   242:   bsr _restore_int
                                    	   243: ; return (inb);
02:00000000000002F3 8F20020000      	   244:   mov a0,s1
                                    	   245: .00080:
02:00000000000002F8 46E8070000      	   246:   ldo s0,[sp]
02:00000000000002FD C6E8470000      	   247:   ldo s1,8[sp]
02:0000000000000302 46DC870000      	   248:   ldo lr0,16[fp]
02:0000000000000307 8FDF070000      	   249:   mov sp,fp
02:000000000000030C 46FF070000      	   250:   ldo fp,[sp]
02:0000000000000311 2300070100      	   251:   rtd 32,0
                                    	   252: .00081:
                                    	   253: ; restore_int(istat);								// nothing in buffer, return -1
02:0000000000000316 84FFC7FFFF      	   254:   sub sp,sp,8
02:000000000000031B 53E8070000      	   255:   sto s0,0[sp]
02:0000000000000320 201C000000      	   256:   bsr _restore_int
                                    	   257: ; return (-1);
02:0000000000000325 8400F8FFFF      	   258:   ldi a0,-1
02:000000000000032A 20C0F9FFFF      	   259:   bra .00080
                                    	   260: 	.type	_SerialPeekChar,@function
                                    	   261: 	.size	_SerialPeekChar,$-_SerialPeekChar
                                    	   262: 
                                    	   263: 
                                    	   264: ;--}
                                    	   265:      
                                    	   266: ;{++ _SerialPeekCharDirect
                                    	   267: 
                                    	   268: 	.sdreg	61
                                    	   269: 	.sd2reg	60
                                    	   270: 	.sd3reg	51
                                    	   271: _SerialPeekCharDirect:
02:000000000000032F 84FF07FFFF      	   272:   sub sp,sp,32
02:0000000000000334 53FF070000      	   273:   sto fp,[sp]
02:0000000000000339 0FFF070000      	   274:   mov fp,sp
02:000000000000033E 53DC870000      	   275:   sto lr0,16[fp]
02:0000000000000343 84FF47FEFF      	   276:   sub sp,sp,56
02:0000000000000348 53E8070000      	   277:   sto s0,[sp]
02:000000000000034D D3E8470000      	   278:   sto s1,8[sp]
02:0000000000000352 53E9870000      	   279:   sto s2,16[sp]
                                    	   280: ; int istat;
02:0000000000000357 0408000000      	   281:   ldi s0,0
02:000000000000035C 3128000000      	   282:   addm s0,4077
                                    	   283: ; istat = disable_int(8);						// temporarily mask interrupts
02:0000000000000361 84FFC7FFFF      	   284:   sub sp,sp,8
02:0000000000000366 0402400000      	   285:   ldi t0,8
02:000000000000036B 53E2070000      	   286:   sto t0,0[sp]
02:0000000000000370 201C000000      	   287:   bsr _disable_int
02:0000000000000375 0F29000000      	   288:   mov s2,a0
                                    	   289: ; __sync(0xffff);
02:000000000000037A 72FFFF0000      	   290:   sync 65535
                                    	   291: ; inb = pACIA[1];
02:000000000000037F C402220000      	   292:   ldt t1,4[s0]
02:0000000000000384 8DA8007CA0      	   293:   ext s1,t1,0,31
                                    	   294: ; if (inb[3]) {											// anything at ACIA? test bit 3
02:0000000000000389 46C287FFFF      	   295:   ldo t0,-16[fp]
02:000000000000038E 8F82000000      	   296:   mov t1,t0
02:0000000000000393 0DA3180C80      	   297:   extu t2,t1,3,3
02:0000000000000398 28C2000000      	   298:   beqz t2,.00095
                                    	   299: ; inb = pACIA[0] & 0xff;		// yes, get byte from port
02:000000000000039D C402020000      	   300:   ldt t1,0[s0]
02:00000000000003A2 88A8F80700      	   301:   and s1,t1,255
                                    	   302: ; restore_int(istat);
02:00000000000003A7 84FFC7FFFF      	   303:   sub sp,sp,8
02:00000000000003AC 53E9070000      	   304:   sto s2,0[sp]
02:00000000000003B1 201C000000      	   305:   bsr _restore_int
                                    	   306: ; return (inb);
02:00000000000003B6 8F20020000      	   307:   mov a0,s1
                                    	   308: .00094:
02:00000000000003BB 46E8070000      	   309:   ldo s0,[sp]
02:00000000000003C0 C6E8470000      	   310:   ldo s1,8[sp]
02:00000000000003C5 46E9870000      	   311:   ldo s2,16[sp]
02:00000000000003CA 46DC870000      	   312:   ldo lr0,16[fp]
02:00000000000003CF 8FDF070000      	   313:   mov sp,fp
02:00000000000003D4 46FF070000      	   314:   ldo fp,[sp]
02:00000000000003D9 2300070100      	   315:   rtd 32,0
                                    	   316: .00095:
                                    	   317: ; restore_int(istat);								// nothing at port, return -1
02:00000000000003DE 84FFC7FFFF      	   318:   sub sp,sp,8
02:00000000000003E3 53E9070000      	   319:   sto s2,0[sp]
02:00000000000003E8 201C000000      	   320:   bsr _restore_int
                                    	   321: ; return (-1);
02:00000000000003ED 8400F8FFFF      	   322:   ldi a0,-1
02:00000000000003F2 2020F9FFFF      	   323:   bra .00094
                                    	   324: 	.type	_SerialPeekCharDirect,@function
                                    	   325: 	.size	_SerialPeekCharDirect,$-_SerialPeekCharDirect
                                    	   326: 
                                    	   327: 
                                    	   328: ;--}
                                    	   329:      
                                    	   330: ;{++ _SerialPutChar
                                    	   331: 
                                    	   332: 	.sdreg	61
                                    	   333: 	.sd2reg	60
                                    	   334: 	.sd3reg	51
                                    	   335: _SerialPutChar:
02:00000000000003F7 84FF07FFFF      	   336:   sub sp,sp,32
02:00000000000003FC 53FF070000      	   337:   sto fp,[sp]
02:0000000000000401 0FFF070000      	   338:   mov fp,sp
02:0000000000000406 53DC870000      	   339:   sto lr0,16[fp]
02:000000000000040B 84FF87FEFF      	   340:   sub sp,sp,48
02:0000000000000410 53E8070000      	   341:   sto s0,[sp]
02:0000000000000415 D3E8470000      	   342:   sto s1,8[sp]
02:000000000000041A 46C8C7FFFF      	   343:   ldo s0,-8[fp]
                                    	   344: ; int istat;
02:000000000000041F 8408000000      	   345:   ldi s1,0
02:0000000000000424 B128000000      	   346:   addm s1,4077
                                    	   347: .00111:
                                    	   348: ; istat = disable_int(8);
02:0000000000000429 84FFC7FFFF      	   349:   sub sp,sp,8
02:000000000000042E 0402400000      	   350:   ldi t0,8
02:0000000000000433 53E2070000      	   351:   sto t0,0[sp]
02:0000000000000438 201C000000      	   352:   bsr _disable_int
02:000000000000043D 0F28000000      	   353:   mov s0,a0
                                    	   354: ; inb = pACIA[1];
02:0000000000000442 C422220000      	   355:   ldt t1,4[s1]
02:0000000000000447 0DA2007CA0      	   356:   ext t0,t1,0,31
02:000000000000044C 53C247FFFF      	   357:   sto t0,-24[fp]
                                    	   358: ; if (inb[4]) {				// branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000451 46C247FFFF      	   359:   ldo t0,-24[fp]
02:0000000000000456 8F82000000      	   360:   mov t1,t0
02:000000000000045B 0DA3201080      	   361:   extu t2,t1,4,4
02:0000000000000460 28C2000000      	   362:   beqz t2,.00113
                                    	   363: ; pACIA[0] = ch;
02:0000000000000465 44C2C7FFFF      	   364:   ldt t0,-8[fp]
02:000000000000046A 5222020000      	   365:   stt t0,0[s1]
                                    	   366: ; restore_int(istat);
02:000000000000046F 84FFC7FFFF      	   367:   sub sp,sp,8
02:0000000000000474 53E8070000      	   368:   sto s0,0[sp]
02:0000000000000479 201C000000      	   369:   bsr _restore_int
                                    	   370: .00110:
02:000000000000047E 46E8070000      	   371:   ldo s0,[sp]
02:0000000000000483 C6E8470000      	   372:   ldo s1,8[sp]
02:0000000000000488 46DC870000      	   373:   ldo lr0,16[fp]
02:000000000000048D 8FDF070000      	   374:   mov sp,fp
02:0000000000000492 46FF070000      	   375:   ldo fp,[sp]
02:0000000000000497 2300470100      	   376:   rtd 40,0
                                    	   377: .00113:
                                    	   378: ; restore_int(istat);
02:000000000000049C 84FFC7FFFF      	   379:   sub sp,sp,8
02:00000000000004A1 53E8070000      	   380:   sto s0,0[sp]
02:00000000000004A6 201C000000      	   381:   bsr _restore_int
02:00000000000004AB 20C0EFFFFF      	   382:   bra .00111
                                    	   383: .00112:
02:00000000000004B0 20C0F9FFFF      	   384:   bra .00110
                                    	   385: 	.type	_SerialPutChar,@function
                                    	   386: 	.size	_SerialPutChar,$-_SerialPutChar
                                    	   387: 
                                    	   388: 
                                    	   389: ;--}
                                    	   390:      
                                    	   391: ;{++ _SerialIRQ
                                    	   392: 
                                    	   393: 	.sdreg	61
                                    	   394: 	.sd2reg	60
                                    	   395: 	.sd3reg	51
                                    	   396: _SerialIRQ:
02:00000000000004B5 84FF07FFFF      	   397:   sub sp,sp,32
02:00000000000004BA 53FF070000      	   398:   sto fp,[sp]
02:00000000000004BF 0FFF070000      	   399:   mov fp,sp
02:00000000000004C4 53DC870000      	   400:   sto lr0,16[fp]
02:00000000000004C9 84FFC7FDFF      	   401:   sub sp,sp,72
02:00000000000004CE 53E8070000      	   402:   sto s0,[sp]
02:00000000000004D3 D3E8470000      	   403:   sto s1,8[sp]
02:00000000000004D8 53E9870000      	   404:   sto s2,16[sp]
02:00000000000004DD D3E9C70000      	   405:   sto s3,24[sp]
02:00000000000004E2 53EA070100      	   406:   sto s4,32[sp]
02:00000000000004E7 C6C867FFFF      	   407:   ldo s1,-20[fp]
02:00000000000004EC 44C9A7FFFF      	   408:   ldt s2,-12[fp]
02:00000000000004F1 46C2A7FFFF      	   409:   ldo t0,-12[fp]
02:00000000000004F6 8D82F87C80      	   410:   extu t1,t0,31,31
02:00000000000004FB 8FA9000000      	   411:   mov s3,t1
02:0000000000000500 04A2070200      	   412:   lda t0,serial.00002[gp]
02:0000000000000505 0F8A000000      	   413:   mov s4,t0
                                    	   414: ; __int32* pACIA = 0xFED00000;
02:000000000000050A 0408000000      	   415:   ldi s0,0
02:000000000000050F 3128000000      	   416:   addm s0,4077
                                    	   417: .00137:
                                    	   418: ; tmp = pACIA[1];	// Look for IRQs
02:0000000000000514 4409220000      	   419:   ldt s2,4[s0]
                                    	   420: ; if (~tmp[31])						// quick test for any irqs, exit if no IRQ
02:0000000000000519 0A62FAFFFF      	   421:   com t0,s3
02:000000000000051E 2882000000      	   422:   beqz t0,.00139
                                    	   423: ; break;
02:0000000000000523 2020170000      	   424:   bra .00138
                                    	   425: .00139:
                                    	   426: ; if (~tmp[3])						// bit 3 = rx full, exit if IRQ but not receive IRQ
02:0000000000000528 0A62FAFFFF      	   427:   com t0,s3
02:000000000000052D 2882000000      	   428:   beqz t0,.00141
                                    	   429: ; break;
02:0000000000000532 2040150000      	   430:   bra .00138
                                    	   431: .00141:
                                    	   432: ; tmp = pACIA[0] & 0xff;	// Get data from RX port
02:0000000000000537 C402020000      	   433:   ldt t1,0[s0]
02:000000000000053C 08A9F80700      	   434:   and s2,t1,255
                                    	   435: ; nextTail = SerTailRcv + 1;
02:0000000000000541 C682020000      	   436:   ldo t1,[s4]
02:0000000000000546 84A8080000      	   437:   add s1,t1,1
                                    	   438: ; nextTail &= 0xfff;				// wrap around
02:000000000000054B 8828FA7F00      	   439:   and s1,s1,4095
                                    	   440: ; if (nextTail==SerHeadRcv)	// ignore new byte if buffer full.
02:0000000000000550 C6A2470200      	   441:   ldo t1,serial.00003[gp]
02:0000000000000555 A8302A0400      	   442:   bne s1,t1,.00143
                                    	   443: .00136:
02:000000000000055A 46E8070000      	   444:   ldo s0,[sp]
02:000000000000055F C6E8470000      	   445:   ldo s1,8[sp]
02:0000000000000564 46E9870000      	   446:   ldo s2,16[sp]
02:0000000000000569 C6E9C70000      	   447:   ldo s3,24[sp]
02:000000000000056E 46EA070100      	   448:   ldo s4,32[sp]
02:0000000000000573 46DC870000      	   449:   ldo lr0,16[fp]
02:0000000000000578 8FDF070000      	   450:   mov sp,fp
02:000000000000057D 46FF070000      	   451:   ldo fp,[sp]
02:0000000000000582 2300070100      	   452:   rtd 32,0
                                    	   453: .00143:
                                    	   454: ; SerRcvBuf[SerTailRcv] = tmp;
02:0000000000000587 47A2170300      	   455:   ldou t0,serial.00008[gp]
02:000000000000058C 5789220000      	   456:   stb s2,[s4+t0*]
                                    	   457: ; SerTailRcv = nextTail;
02:0000000000000591 D388020000      	   458:   sto s1,[s4]
                                    	   459: ; if (SerRcvXoff)
02:0000000000000596 41A20F0300      	   460:   ldbu t0,serial.00007[gp]
02:000000000000059B 2882000000      	   461:   beqz t0,.00145
                                    	   462: ; continue;
02:00000000000005A0 2080EEFFFF      	   463:   bra .00137
                                    	   464: .00145:
                                    	   465: ; if (SerialRcvCount() < 4070)
02:00000000000005A5 53C2C7FDFF      	   466:   sto t0,-72[fp]
02:00000000000005AA 20DC68FFFF      	   467:   bsr _SerialRcvCount
02:00000000000005AF 46C2C7FDFF      	   468:   ldo t0,-72[fp]
02:00000000000005B4 8402307F00      	   469:   ldi t1,4070
02:00000000000005B9 2932280000      	   470:   bge a0,t1,.00147
                                    	   471: ; continue;
02:00000000000005BE 20C0EAFFFF      	   472:   bra .00137
                                    	   473: .00147:
                                    	   474: ; SerRcvXon = 0;
02:00000000000005C3 50A0070300      	   475:   stb r0,serial.00006[gp]
                                    	   476: ; SerRcvXoff = 0x13;				// set XOFF status
02:00000000000005C8 0402980000      	   477:   ldi t0,19
02:00000000000005CD 50A20F0300      	   478:   stb t0,serial.00007[gp]
                                    	   479: ; pACIA[0] = 0x13;		// and send
02:00000000000005D2 5202020000      	   480:   stt t0,0[s0]
02:00000000000005D7 20A0E7FFFF      	   481:   bra .00137
                                    	   482: .00138:
02:00000000000005DC 20C0EFFFFF      	   483:   bra .00136
                                    	   484: 	.type	_SerialIRQ,@function
                                    	   485: 	.size	_SerialIRQ,$-_SerialIRQ
                                    	   486: 
                                    	   487: 
                                    	   488: ;--}
                                    	   489:      
                                    	   490: ;{++ _SerialPutString
                                    	   491: 
                                    	   492: 	.sdreg	61
                                    	   493: 	.sd2reg	60
                                    	   494: 	.sd3reg	51
                                    	   495: _SerialPutString:
02:00000000000005E1 84FF07FFFF      	   496:   sub sp,sp,32
02:00000000000005E6 53FF070000      	   497:   sto fp,[sp]
02:00000000000005EB 0FFF070000      	   498:   mov fp,sp
02:00000000000005F0 53DC870000      	   499:   sto lr0,16[fp]
02:00000000000005F5 84FF47FEFF      	   500:   sub sp,sp,56
02:00000000000005FA 53E8070000      	   501:   sto s0,[sp]
02:00000000000005FF D3E8470000      	   502:   sto s1,8[sp]
02:0000000000000604 53E9870000      	   503:   sto s2,16[sp]
02:0000000000000609 46C8070000      	   504:   ldo s0,0[fp]
02:000000000000060E C6C847FFFF      	   505:   ldo s1,-24[fp]
                                    	   506: ; __int32* pACIA = 0xFED00000;
02:0000000000000613 0409000000      	   507:   ldi s2,0
02:0000000000000618 3129000000      	   508:   addm s2,4077
                                    	   509: ; while (*str) {								// NULL terminator encountered?
02:000000000000061D 4102020000      	   510:   ldbu t0,[s0]
02:0000000000000622 2882000000      	   511:   beqz t0,.00166
                                    	   512: .00165:
                                    	   513: .00167:
                                    	   514: ; istat = disable_int(8);
02:0000000000000627 84FFC7FFFF      	   515:   sub sp,sp,8
02:000000000000062C 0402400000      	   516:   ldi t0,8
02:0000000000000631 53E2070000      	   517:   sto t0,0[sp]
02:0000000000000636 201C000000      	   518:   bsr _disable_int
02:000000000000063B 8F28000000      	   519:   mov s1,a0
                                    	   520: ; inb = pACIA[1];		// wait until the uart indicates tx empty
02:0000000000000640 C442220000      	   521:   ldt t1,4[s2]
02:0000000000000645 0DA2007CA0      	   522:   ext t0,t1,0,31
02:000000000000064A 53C287FFFF      	   523:   sto t0,-16[fp]
                                    	   524: ; if (inb[4])								// loop if transmitter is not empty, bit #4 of the status reg
02:000000000000064F 46C287FFFF      	   525:   ldo t0,-16[fp]
02:0000000000000654 8F82000000      	   526:   mov t1,t0
02:0000000000000659 0DA3201080      	   527:   extu t2,t1,4,4
02:000000000000065E 28C2000000      	   528:   beqz t2,.00169
                                    	   529: ; break;
02:0000000000000663 2020030000      	   530:   bra .00168
                                    	   531: .00169:
                                    	   532: ; restore_int(istat);
02:0000000000000668 84FFC7FFFF      	   533:   sub sp,sp,8
02:000000000000066D D3E8070000      	   534:   sto s1,0[sp]
02:0000000000000672 201C000000      	   535:   bsr _restore_int
02:0000000000000677 2000F6FFFF      	   536:   bra .00167
                                    	   537: .00168:
                                    	   538: ; pACIA[0] = *str;
02:000000000000067C C102020000      	   539:   ldbu t1,[s0]
02:0000000000000681 0DA2001CA0      	   540:   ext t0,t1,0,7
02:0000000000000686 5242020000      	   541:   stt t0,0[s2]
                                    	   542: ; restore_int(istat);
02:000000000000068B 84FFC7FFFF      	   543:   sub sp,sp,8
02:0000000000000690 D3E8070000      	   544:   sto s1,0[sp]
02:0000000000000695 201C000000      	   545:   bsr _restore_int
                                    	   546: ; str++;
02:000000000000069A 04080A0000      	   547:   add s0,s0,1
02:000000000000069F 4102020000      	   548:   ldbu t0,[s0]
02:00000000000006A4 0B82000000      	   549:   cmp t0,t0,0
02:00000000000006A9 0D82080080      	   550:   extu t0,t0,1,0
02:00000000000006AE A880000000      	   551:   bnez t0,.00165
                                    	   552: .00166:
                                    	   553: .00164:
02:00000000000006B3 46E8070000      	   554:   ldo s0,[sp]
02:00000000000006B8 C6E8470000      	   555:   ldo s1,8[sp]
02:00000000000006BD 46E9870000      	   556:   ldo s2,16[sp]
02:00000000000006C2 46DC870000      	   557:   ldo lr0,16[fp]
02:00000000000006C7 8FDF070000      	   558:   mov sp,fp
02:00000000000006CC 46FF070000      	   559:   ldo fp,[sp]
02:00000000000006D1 2300470100      	   560:   rtd 40,0
                                    	   561: 	.type	_SerialPutString,@function
                                    	   562: 	.size	_SerialPutString,$-_SerialPutString
                                    	   563: 
                                    	   564: 
                                    	   565: ;--}
                                    	   566:       
                                    	   567: ;{++ _SerialPutBuf
                                    	   568: 
                                    	   569: 	.sdreg	61
                                    	   570: 	.sd2reg	60
                                    	   571: 	.sd3reg	51
                                    	   572: _SerialPutBuf:
02:00000000000006D6 84FF07FFFF      	   573:   sub sp,sp,32
02:00000000000006DB 53FF070000      	   574:   sto fp,[sp]
02:00000000000006E0 0FFF070000      	   575:   mov fp,sp
02:00000000000006E5 53DC870000      	   576:   sto lr0,16[fp]
02:00000000000006EA 84FF07FEFF      	   577:   sub sp,sp,64
02:00000000000006EF 53E8070000      	   578:   sto s0,[sp]
02:00000000000006F4 D3E8470000      	   579:   sto s1,8[sp]
02:00000000000006F9 53E9870000      	   580:   sto s2,16[sp]
02:00000000000006FE D3E9C70000      	   581:   sto s3,24[sp]
02:0000000000000703 46C8470000      	   582:   ldo s0,8[fp]
02:0000000000000708 C6C8070000      	   583:   ldo s1,0[fp]
02:000000000000070D C6C947FFFF      	   584:   ldo s3,-24[fp]
                                    	   585: ; __int32* pACIA = 0xFED00000;
02:0000000000000712 0409000000      	   586:   ldi s2,0
02:0000000000000717 3129000000      	   587:   addm s2,4077
                                    	   588: ; for (; n != 0; n--) {					// end encountered?
02:000000000000071C 281A020C00      	   589:   beq s0,r0,.00189
                                    	   590: .00188:
                                    	   591: .00191:
                                    	   592: ; istat = disable_int(8);
02:0000000000000721 84FFC7FFFF      	   593:   sub sp,sp,8
02:0000000000000726 0402400000      	   594:   ldi t0,8
02:000000000000072B 53E2070000      	   595:   sto t0,0[sp]
02:0000000000000730 201C000000      	   596:   bsr _disable_int
02:0000000000000735 8F29000000      	   597:   mov s3,a0
                                    	   598: ; inb = pACIA[1];		// wait until the uart indicates tx empty
02:000000000000073A C442220000      	   599:   ldt t1,4[s2]
02:000000000000073F 0DA2007CA0      	   600:   ext t0,t1,0,31
02:0000000000000744 53C287FFFF      	   601:   sto t0,-16[fp]
                                    	   602: ; if (inb[4])								// loop if transmitter is not empty, bit #4 of the status reg
02:0000000000000749 46C287FFFF      	   603:   ldo t0,-16[fp]
02:000000000000074E 8F82000000      	   604:   mov t1,t0
02:0000000000000753 0DA3201080      	   605:   extu t2,t1,4,4
02:0000000000000758 28C2000000      	   606:   beqz t2,.00193
                                    	   607: ; break;
02:000000000000075D 2020030000      	   608:   bra .00192
                                    	   609: .00193:
                                    	   610: ; restore_int(istat);
02:0000000000000762 84FFC7FFFF      	   611:   sub sp,sp,8
02:0000000000000767 D3E9070000      	   612:   sto s3,0[sp]
02:000000000000076C 201C000000      	   613:   bsr _restore_int
02:0000000000000771 2000F6FFFF      	   614:   bra .00191
                                    	   615: .00192:
                                    	   616: ; pACIA[0] = *pBuf;
02:0000000000000776 C122020000      	   617:   ldbu t1,[s1]
02:000000000000077B 0DA2001CA0      	   618:   ext t0,t1,0,7
02:0000000000000780 5242020000      	   619:   stt t0,0[s2]
                                    	   620: ; restore_int(istat);
02:0000000000000785 84FFC7FFFF      	   621:   sub sp,sp,8
02:000000000000078A D3E9070000      	   622:   sto s3,0[sp]
02:000000000000078F 201C000000      	   623:   bsr _restore_int
                                    	   624: ; pBuf++;
02:0000000000000794 84280A0000      	   625:   add s1,s1,1
                                    	   626: .00190:
02:0000000000000799 0408FAFFFF      	   627:   sub s0,s0,1
02:000000000000079E A800020000      	   628:   bnez s0,.00188
                                    	   629: .00189:
                                    	   630: .00187:
02:00000000000007A3 46E8070000      	   631:   ldo s0,[sp]
02:00000000000007A8 C6E8470000      	   632:   ldo s1,8[sp]
02:00000000000007AD 46E9870000      	   633:   ldo s2,16[sp]
02:00000000000007B2 C6E9C70000      	   634:   ldo s3,24[sp]
02:00000000000007B7 46DC870000      	   635:   ldo lr0,16[fp]
02:00000000000007BC 8FDF070000      	   636:   mov sp,fp
02:00000000000007C1 46FF070000      	   637:   ldo fp,[sp]
02:00000000000007C6 2300870100      	   638:   rtd 48,0
                                    	   639: 	.type	_SerialPutBuf,@function
                                    	   640: 	.size	_SerialPutBuf,$-_SerialPutBuf
                                    	   641: 
                                    	   642: 
                                    	   643: ;--}
                                    	   644:          
                                    	   645: ;{++ _SerialGetBufDirect
                                    	   646: 
                                    	   647: 	.sdreg	61
                                    	   648: 	.sd2reg	60
                                    	   649: 	.sd3reg	51
                                    	   650: _SerialGetBufDirect:
02:00000000000007CB 84FF07FFFF      	   651:   sub sp,sp,32
02:00000000000007D0 53FF070000      	   652:   sto fp,[sp]
02:00000000000007D5 0FFF070000      	   653:   mov fp,sp
02:00000000000007DA 53DC870000      	   654:   sto lr0,16[fp]
02:00000000000007DF 84FF07FDFF      	   655:   sub sp,sp,96
02:00000000000007E4 53E8070000      	   656:   sto s0,[sp]
02:00000000000007E9 D3E8470000      	   657:   sto s1,8[sp]
02:00000000000007EE 53E9870000      	   658:   sto s2,16[sp]
02:00000000000007F3 D3E9C70000      	   659:   sto s3,24[sp]
02:00000000000007F8 53EA070100      	   660:   sto s4,32[sp]
02:00000000000007FD D3EA470100      	   661:   sto s5,40[sp]
02:0000000000000802 53EB870100      	   662:   sto s6,48[sp]
02:0000000000000807 D3EBC70100      	   663:   sto s7,56[sp]
02:000000000000080C 46C8C7FEFF      	   664:   ldo s0,-40[fp]
02:0000000000000811 46C9470000      	   665:   ldo s2,8[fp]
02:0000000000000816 C6C987FFFF      	   666:   ldo s3,-16[fp]
02:000000000000081B C6CA070000      	   667:   ldo s5,0[fp]
02:0000000000000820 840B000078      	   668:   ldi s7,983040
02:0000000000000825 B12B0F0000      	   669:   addm s7,16646147
02:000000000000082A B16B000000      	   670:   addh s7,278528
                                    	   671: ; __int32* pACIA = 0xFED00000;
02:000000000000082F 040B000000      	   672:   ldi s6,0
02:0000000000000834 312B000000      	   673:   addm s6,4077
02:0000000000000839 040A000000      	   674:   ldi s4,0
02:000000000000083E 312A000000      	   675:   addm s4,4076
02:0000000000000843 8F08000000      	   676:   mov s1,r0
                                    	   677: ; for (; n != 0; n--) {						// end encountered?
02:0000000000000848 285A021600      	   678:   beq s2,r0,.00217
                                    	   679: .00216:
                                    	   680: .00219:
                                    	   681: ; istat = disable_int(8);
02:000000000000084D 84FFC7FFFF      	   682:   sub sp,sp,8
02:0000000000000852 0402400000      	   683:   ldi t0,8
02:0000000000000857 53E2070000      	   684:   sto t0,0[sp]
02:000000000000085C 201C000000      	   685:   bsr _disable_int
02:0000000000000861 D3C047FFFF      	   686:   sto a0,-24[fp]
                                    	   687: ; inb = pACIA[1];
02:0000000000000866 C4C2220000      	   688:   ldt t1,4[s6]
02:000000000000086B 8DA9007CA0      	   689:   ext s3,t1,0,31
                                    	   690: ; if (inb[3])									// look for Rx not empty
02:0000000000000870 46C287FFFF      	   691:   ldo t0,-16[fp]
02:0000000000000875 8F82000000      	   692:   mov t1,t0
02:000000000000087A 0DA3180C80      	   693:   extu t2,t1,3,3
02:000000000000087F 28C2000000      	   694:   beqz t2,.00221
                                    	   695: ; break;
02:0000000000000884 2020030000      	   696:   bra .00220
                                    	   697: .00221:
                                    	   698: ; restore_int(8);
02:0000000000000889 84FFC7FFFF      	   699:   sub sp,sp,8
02:000000000000088E 53E2070000      	   700:   sto t0,0[sp]
02:0000000000000893 201C000000      	   701:   bsr _restore_int
02:0000000000000898 20A0F6FFFF      	   702:   bra .00219
                                    	   703: .00220:
                                    	   704: ; inb = pACIA[0] & 0xff;	// grab char from port
02:000000000000089D C4C2020000      	   705:   ldt t1,0[s6]
02:00000000000008A2 88A9F80700      	   706:   and s3,t1,255
                                    	   707: ; restore_int(8);
02:00000000000008A7 84FFC7FFFF      	   708:   sub sp,sp,8
02:00000000000008AC 53E2070000      	   709:   sto t0,0[sp]
02:00000000000008B1 201C000000      	   710:   bsr _restore_int
                                    	   711: ; *pBuf = inb;
02:00000000000008B6 D0A9020000      	   712:   stb s3,[s5]
                                    	   713: ; tch = ((inb >> 4) & 15) + '0';
02:00000000000008BB 5863222000      	   714:   asr t2,s3,4
02:00000000000008C0 88C2780000      	   715:   and t1,t2,15
02:00000000000008C5 04A8800100      	   716:   add s0,t1,48
                                    	   717: ; if (tch > '9')
02:00000000000008CA 8402C80100      	   718:   ldi t1,57
02:00000000000008CF A9112A0000      	   719:   ble s0,t1,.00223
                                    	   720: ; tch += 7;
02:00000000000008D4 04083A0000      	   721:   add s0,s0,7
                                    	   722: .00223:
                                    	   723: ; tch |= 0x43FFFFE0003F0000;
02:00000000000008D9 0208BA0002      	   724:   or s0,s0,s7
                                    	   725: ; pTextScreen[ndx] = tch;
02:00000000000008DE 57888AC600      	   726:   sto s0,0[s4+s1*]
                                    	   727: ; ndx++;
02:00000000000008E3 84280A0000      	   728:   add s1,s1,1
                                    	   729: ; tch = (inb & 15) + '0';
02:00000000000008E8 88627A0000      	   730:   and t1,s3,15
02:00000000000008ED 04A8800100      	   731:   add s0,t1,48
                                    	   732: ; if (tch > '9')
02:00000000000008F2 A9112A0000      	   733:   ble s0,t1,.00225
                                    	   734: ; tch += 7;
02:00000000000008F7 04083A0000      	   735:   add s0,s0,7
                                    	   736: .00225:
                                    	   737: ; tch |= 0x43FFFFE0003F0000;
02:00000000000008FC 0208BA0002      	   738:   or s0,s0,s7
                                    	   739: ; pTextScreen[ndx] = tch;
02:0000000000000901 57888AC600      	   740:   sto s0,0[s4+s1*]
                                    	   741: ; ndx++;
02:0000000000000906 84280A0000      	   742:   add s1,s1,1
                                    	   743: ; tch = 0x43FFFFE0003F0020;	// space
02:000000000000090B 0408000178      	   744:   ldi s0,983072
02:0000000000000910 31280F0000      	   745:   addm s0,16646147
02:0000000000000915 3168000000      	   746:   addh s0,278528
                                    	   747: ; pTextScreen[ndx] = tch;
02:000000000000091A 57888AC600      	   748:   sto s0,0[s4+s1*]
                                    	   749: ; ndx++;
02:000000000000091F 84280A0000      	   750:   add s1,s1,1
                                    	   751: ; pBuf++;
02:0000000000000924 84AA0A0000      	   752:   add s5,s5,1
                                    	   753: .00218:
02:0000000000000929 0449FAFFFF      	   754:   sub s2,s2,1
02:000000000000092E A840020000      	   755:   bnez s2,.00216
                                    	   756: .00217:
                                    	   757: .00215:
02:0000000000000933 46E8070000      	   758:   ldo s0,[sp]
02:0000000000000938 C6E8470000      	   759:   ldo s1,8[sp]
02:000000000000093D 46E9870000      	   760:   ldo s2,16[sp]
02:0000000000000942 C6E9C70000      	   761:   ldo s3,24[sp]
02:0000000000000947 46EA070100      	   762:   ldo s4,32[sp]
02:000000000000094C C6EA470100      	   763:   ldo s5,40[sp]
02:0000000000000951 46EB870100      	   764:   ldo s6,48[sp]
02:0000000000000956 C6EBC70100      	   765:   ldo s7,56[sp]
02:000000000000095B 46DC870000      	   766:   ldo lr0,16[fp]
02:0000000000000960 8FDF070000      	   767:   mov sp,fp
02:0000000000000965 46FF070000      	   768:   ldo fp,[sp]
02:000000000000096A 2300870100      	   769:   rtd 48,0
                                    	   770: 	.type	_SerialGetBufDirect,@function
                                    	   771: 	.size	_SerialGetBufDirect,$-_SerialGetBufDirect
                                    	   772: 
                                    	   773: 
                                    	   774: ;--}
                                    	   775: 
                                    	   776: 	.rodata
                                    	   777: 	.align	6
                                    	   778: 
                                    	   779: 	.align	8
                                    	   780: 
                                    	   781: 
                                    	   782: 
                                    	   783: 	.align	6
                                    	   784: 	.type	serial.00001,@object
                                    	   785: 	.size	serial.00001,7
                                    	   786: serial.00001: ; serial
                                    	   787: 
03:0000000000000000 73              	   788: 	.byte	115,101,114,105,97,108,0
03:0000000000000001 65
03:0000000000000002 72
03:0000000000000003 69
03:0000000000000004 61
03:0000000000000005 6C
03:0000000000000006 00
                                    	   789: 
                                    	   790: 	.align	2
                                    	   791: 
                                    	   792: 
                                    	   793: 	.bss
                                    	   794: 	.align	6
                                    	   795: 	.type	serial.00002,@object
                                    	   796: 	.size	serial.00002,8
                                    	   797: serial.00002: ; _SerTailRcv
00:0000000000000040 00              	   798: 	.byte	0,0,0,0,0,0,0,0
00:0000000000000041 00
00:0000000000000042 00
00:0000000000000043 00
00:0000000000000044 00
00:0000000000000045 00
00:0000000000000046 00
00:0000000000000047 00
                                    	   799: 
                                    	   800: 
                                    	   801: 
                                    	   802: 
                                    	   803: 
                                    	   804: 	.bss
                                    	   805: 	.type	serial.00003,@object
                                    	   806: 	.size	serial.00003,8
                                    	   807: serial.00003: ; _SerHeadRcv
00:0000000000000048 00              	   808: 	.byte	0,0,0,0,0,0,0,0
00:0000000000000049 00
00:000000000000004A 00
00:000000000000004B 00
00:000000000000004C 00
00:000000000000004D 00
00:000000000000004E 00
00:000000000000004F 00
                                    	   809: 
                                    	   810: 
                                    	   811: 
                                    	   812: 
                                    	   813: 
                                    	   814: 	.bss
                                    	   815: 	.type	serial.00004,@object
                                    	   816: 	.size	serial.00004,8
                                    	   817: serial.00004: ; _SerTailXmit
00:0000000000000050 00              	   818: 	.byte	0,0,0,0,0,0,0,0
00:0000000000000051 00
00:0000000000000052 00
00:0000000000000053 00
00:0000000000000054 00
00:0000000000000055 00
00:0000000000000056 00
00:0000000000000057 00
                                    	   819: 
                                    	   820: 
                                    	   821: 
                                    	   822: 
                                    	   823: 
                                    	   824: 	.bss
                                    	   825: 	.type	serial.00005,@object
                                    	   826: 	.size	serial.00005,8
                                    	   827: serial.00005: ; _SerHeadXmit
00:0000000000000058 00              	   828: 	.byte	0,0,0,0,0,0,0,0
00:0000000000000059 00
00:000000000000005A 00
00:000000000000005B 00
00:000000000000005C 00
00:000000000000005D 00
00:000000000000005E 00
00:000000000000005F 00
                                    	   829: 
                                    	   830: 
                                    	   831: 
                                    	   832: 
                                    	   833: 
                                    	   834: 	.bss
                                    	   835: 	.type	serial.00006,@object
                                    	   836: 	.size	serial.00006,1
                                    	   837: serial.00006: ; _SerRcvXon
00:0000000000000060 00              	   838: 	.byte	0
                                    	   839: 
                                    	   840: 
                                    	   841: 
                                    	   842: 
                                    	   843: 
                                    	   844: 	.bss
                                    	   845: 	.type	serial.00007,@object
                                    	   846: 	.size	serial.00007,1
                                    	   847: serial.00007: ; _SerRcvXoff
00:0000000000000061 00              	   848: 	.byte	0
                                    	   849: 
                                    	   850: 
                                    	   851: 
                                    	   852: 
                                    	   853: 
                                    	   854: 	.bss
                                    	   855: 	.type	serial.00008,@object
                                    	   856: 	.size	serial.00008,8
                                    	   857: serial.00008: ; _SerRcvBuf
00:0000000000000062 00              	   858: 	.byte	0,0,0,0,0,0,0,0
00:0000000000000063 00
00:0000000000000064 00
00:0000000000000065 00
00:0000000000000066 00
00:0000000000000067 00
00:0000000000000068 00
00:0000000000000069 00
                                    	   859: 
                                    	   860: 
                                    	   861: 	.extern	_restore_int
                                    	   862: 	.global	_SerialPutBuf
                                    	   863: 	.global	_SerialPeekCharDirect
                                    	   864: 	.global	_SerialInit
                                    	   865: 	.global	_SerialGetBufDirect
                                    	   866: 	.global	_SerialGetChar
                                    	   867: 	.global	_SerialTest
                                    	   868: 	.global	_SerialPutString
                                    	   869: 	.global	_SerialPutChar
                                    	   870: 	.global	_SerialIRQ
                                    	   871: 	.global	_SerialPeekChar
                                    	   872: 	.extern	_disable_int
                                    	   873: 	.global	_SerialRcvCount
                                    	   874: 	.extern	_start_data
                                    	   875: 	.extern	_start_bss
                                    	   876: 	.extern	_start_rodata
                                    	   877: 	.global	_nmeSerial
                                    	   878: 

Source: "boot.asm"
                                    	    33: .include "bootrom.asm"

Source: "bootrom.asm"
                                    	     1:      	.bss
                                    	     2: 	.align 4
                                    	     3: _another_var:
                                    	     4: 	.type	_another_var,@object
                                    	     5: 	.size	_another_var,8
                                    	     6: 
                                    	     7:    
                                    	     8: 	.text
                                    	     9:  
                                    	    10: ;{++ _Delay3s
                                    	    11: 	.sdreg	61
                                    	    12: 	.sd2reg	60
                                    	    13: 	.sd3reg	51
                                    	    14: _Delay3s:
02:000000000000096F 84FF07FFFF      	    15:   sub sp,sp,32
02:0000000000000974 53FF070000      	    16:   sto fp,[sp]
02:0000000000000979 0FFF070000      	    17:   mov fp,sp
02:000000000000097E 53DC870000      	    18:   sto lr0,16[fp]
02:0000000000000983 84FF87FEFF      	    19:   sub sp,sp,48
02:0000000000000988 53E8070000      	    20:   sto s0,[sp]
02:000000000000098D D3E8470000      	    21:   sto s1,8[sp]
                                    	    22: ; __int64* leds = 0x0FEDFFF00;
02:0000000000000992 840800F87F      	    23:   ldi s1,1048320
02:0000000000000997 B128000000      	    24:   addm s1,4077
                                    	    25: ; for (cnt = 0; cnt < 300000; cnt++)
02:000000000000099C 0F08000000      	    26:   mov s0,r0
02:00000000000009A1 8402009F24      	    27:   ldi t1,300000
02:00000000000009A6 290A2A0200      	    28:   bge s0,t1,.00016
                                    	    29: .00015:
                                    	    30: ; leds[0] = cnt >> 17;
02:00000000000009AB 58028A2000      	    31:   asr t0,s0,17
02:00000000000009B0 5322020000      	    32:   sto t0,0[s1]
                                    	    33: .00017:
02:00000000000009B5 04080A0000      	    34:   add s0,s0,1
02:00000000000009BA 29092AFEFF      	    35:   blt s0,t1,.00015
                                    	    36: .00016:
                                    	    37: .00014:
02:00000000000009BF 46E8070000      	    38:   ldo s0,[sp]
02:00000000000009C4 C6E8470000      	    39:   ldo s1,8[sp]
02:00000000000009C9 8FDF070000      	    40:   mov sp,fp
02:00000000000009CE 46FF070000      	    41:   ldo fp,[sp]
02:00000000000009D3 2300070100      	    42:   rtd 32,0
                                    	    43: 	.type	_Delay3s,@function
                                    	    44: 	.size	_Delay3s,$-_Delay3s
                                    	    45: 
                                    	    46: 
                                    	    47: ;--}
                                    	    48:        
                                    	    49: ;{++ _bootrom
                                    	    50: 
                                    	    51: 	.sdreg	61
                                    	    52: 	.sd2reg	60
                                    	    53: 	.sd3reg	51
                                    	    54: _bootrom:
02:00000000000009D8 84FF07FFFF      	    55:   sub sp,sp,32
02:00000000000009DD 53FF070000      	    56:   sto fp,[sp]
02:00000000000009E2 0FFF070000      	    57:   mov fp,sp
02:00000000000009E7 53DC870000      	    58:   sto lr0,16[fp]
02:00000000000009EC 84FFC7FDFF      	    59:   sub sp,sp,72
02:00000000000009F1 53E8070000      	    60:   sto s0,[sp]
02:00000000000009F6 D3E8470000      	    61:   sto s1,8[sp]
02:00000000000009FB 53E9870000      	    62:   sto s2,16[sp]
02:0000000000000A00 D3E9C70000      	    63:   sto s3,24[sp]
02:0000000000000A05 53EA070100      	    64:   sto s4,32[sp]
                                    	    65: ; int* pgtbl = 0xfff80000;
02:0000000000000A0A 8408000040      	    66:   ldi s1,524288
02:0000000000000A0F B128000000      	    67:   addm s1,4095
02:0000000000000A14 040A00F927      	    68:   ldi s4,327456
02:0000000000000A19 312A000000      	    69:   addm s4,4095
02:0000000000000A1E 840900F87F      	    70:   ldi s3,1048320
02:0000000000000A23 B129000000      	    71:   addm s3,4077
                                    	    72: ; *PTBR = &pgtbl[0];
02:0000000000000A28 0222020008      	    73:   add t0,s1,r0
02:0000000000000A2D 5382020000      	    74:   sto t0,[s4]
                                    	    75: ; pRand = 0xFEE1FD00;
02:0000000000000A32 040900E80F      	    76:   ldi s2,130304
02:0000000000000A37 3129000000      	    77:   addm s2,4078
                                    	    78: ; __sync(0x0FFFF);
02:0000000000000A3C 72FFFF0000      	    79:   sync 65535
                                    	    80: ; for (cnt = 0; cnt < 16; cnt++) {
02:0000000000000A41 0F08000000      	    81:   mov s0,r0
02:0000000000000A46 8402800000      	    82:   ldi t1,16
02:0000000000000A4B 29022A0200      	    83:   bge s0,t1,.00032
                                    	    84: .00031:
                                    	    85: ; pgtbl[cnt] = 0;
02:0000000000000A50 572082C600      	    86:   sto r0,0[s1+s0*]
                                    	    87: .00033:
02:0000000000000A55 04080A0000      	    88:   add s0,s0,1
02:0000000000000A5A 29112AFEFF      	    89:   blt s0,t1,.00031
                                    	    90: .00032:
                                    	    91: ; pgtbl[0x1EDF] = 0x83000FFFFFFFFEDF;	/* LEDs */
02:0000000000000A5F 0402F8F67F      	    92:   ldi t0,1048287
02:0000000000000A64 31220F0000      	    93:   addm t0,16777215
02:0000000000000A69 3162000000      	    94:   addh t0,16265217
02:0000000000000A6E 5322C2B707      	    95:   sto t0,63224[s1]
                                    	    96: ; pgtbl[0x1EC0] = 0x83000FFFFFFFFEC0;	/* text mode screen */
02:0000000000000A73 040200F67F      	    97:   ldi t0,1048256
02:0000000000000A78 31220F0000      	    98:   addm t0,16777215
02:0000000000000A7D 3162000000      	    99:   addh t0,16265217
02:0000000000000A82 532202B007      	   100:   sto t0,62976[s1]
                                    	   101: ; pgtbl[0x1EDC] = 0x83000FFFFFFFFEDC;	/* Keyboard */
02:0000000000000A87 0402E0F67F      	   102:   ldi t0,1048284
02:0000000000000A8C 31220F0000      	   103:   addm t0,16777215
02:0000000000000A91 3162000000      	   104:   addh t0,16265217
02:0000000000000A96 532202B707      	   105:   sto t0,63200[s1]
                                    	   106: ; pgtbl[0x1EE1] = 0x83000FFFFFFFFEE1;	/* random number generator */
02:0000000000000A9B 040208F77F      	   107:   ldi t0,1048289
02:0000000000000AA0 31220F0000      	   108:   addm t0,16777215
02:0000000000000AA5 3162000000      	   109:   addh t0,16265217
02:0000000000000AAA 532242B807      	   110:   sto t0,63240[s1]
                                    	   111: ; __sync(0x0FFFF);
02:0000000000000AAF 72FFFF0000      	   112:   sync 65535
                                    	   113: ; leds[0] = -1;
02:0000000000000AB4 0402F8FFFF      	   114:   ldi t0,2097151
02:0000000000000AB9 5362020000      	   115:   sto t0,0[s3]
                                    	   116: ; pRand[1] = 0;						/* select random stream #0 */
02:0000000000000ABE 5240220000      	   117:   stt r0,4[s2]
                                    	   118: ; pRand[2] = 0x99999999;	/* set random seed value */
02:0000000000000AC3 0402C8CC4C      	   119:   ldi t0,629145
02:0000000000000AC8 3122000000      	   120:   addm t0,2457
02:0000000000000ACD 5242420000      	   121:   stt t0,8[s2]
                                    	   122: ; pRand[3] = 0x99999999;
02:0000000000000AD2 3122000000      	   123:   addm t0,2457
02:0000000000000AD7 5242620000      	   124:   stt t0,12[s2]
                                    	   125: ; Delay3s();
02:0000000000000ADC 207CD2FFFF      	   126:   bsr _Delay3s
                                    	   127: ; SerialInit();
02:0000000000000AE1 203CB4FEFF      	   128:   bsr _SerialInit
                                    	   129: ; SerialTest();
02:0000000000000AE6 203CAAFEFF      	   130:   bsr _SerialTest
                                    	   131: .00030:
02:0000000000000AEB 46E8070000      	   132:   ldo s0,[sp]
02:0000000000000AF0 C6E8470000      	   133:   ldo s1,8[sp]
02:0000000000000AF5 46E9870000      	   134:   ldo s2,16[sp]
02:0000000000000AFA C6E9C70000      	   135:   ldo s3,24[sp]
02:0000000000000AFF 46EA070100      	   136:   ldo s4,32[sp]
02:0000000000000B04 46DC870000      	   137:   ldo lr0,16[fp]
02:0000000000000B09 8FDF070000      	   138:   mov sp,fp
02:0000000000000B0E 46FF070000      	   139:   ldo fp,[sp]
02:0000000000000B13 2300070100      	   140:   rtd 32,0
                                    	   141: 	.type	_bootrom,@function
                                    	   142: 	.size	_bootrom,$-_bootrom
                                    	   143: 
                                    	   144: 
                                    	   145: ;--}
                                    	   146: 
                                    	   147: 	.extern	_SerialInit
                                    	   148: 	.extern	_SerialTest
                                    	   149: 	.global	_bootrom
                                    	   150: 	.extern	_start_data
                                    	   151: 	.extern	_start_bss
                                    	   152: 	.global	_another_var
                                    	   153: 	.extern	_start_rodata
                                    	   154: 

Source: "boot.asm"
                                    	    34: 
                                    	    35: .extern _start_data
                                    	    36: .extern _start_rodata
                                    	    37: .extern _start_bss
                                    	    38: 


Symbols by name:
_Delay3s                        02:000000000000096F
_SerialGetBufDirect             02:00000000000007CB EXP
_SerialGetChar                  02:0000000000000159 EXP
_SerialIRQ                      02:00000000000004B5 EXP
_SerialInit                     02:0000000000000082 EXP
_SerialPeekChar                 02:0000000000000285 EXP
_SerialPeekCharDirect           02:000000000000032F EXP
_SerialPutBuf                   02:00000000000006D6 EXP
_SerialPutChar                  02:00000000000003F7 EXP
_SerialPutString                02:00000000000005E1 EXP
_SerialRcvCount                 02:00000000000000F0 EXP
_SerialTest                     02:0000000000000037 EXP
_another_var                    00:0000000000000070 EXP
_bootrom                        02:00000000000009D8 EXP
_disable_int                    external EXP
_nmeSerial                      external EXP
_restore_int                    external EXP
_start                          external
_start_bss                      external EXP
_start_data                     external EXP
_start_rodata                   external EXP
serial.00001                    03:0000000000000000
serial.00002                    00:0000000000000040
serial.00003                    00:0000000000000048
serial.00004                    00:0000000000000050
serial.00005                    00:0000000000000058
serial.00006                    00:0000000000000060
serial.00007                    00:0000000000000061
serial.00008                    00:0000000000000062
start                           02:0000000000000000

Symbols by value:
0000000000000000 serial.00001
0000000000000000 start
0000000000000037 _SerialTest
0000000000000040 serial.00002
0000000000000048 serial.00003
0000000000000050 serial.00004
0000000000000058 serial.00005
0000000000000060 serial.00006
0000000000000061 serial.00007
0000000000000062 serial.00008
0000000000000070 _another_var
0000000000000082 _SerialInit
00000000000000F0 _SerialRcvCount
0000000000000159 _SerialGetChar
0000000000000285 _SerialPeekChar
000000000000032F _SerialPeekCharDirect
00000000000003F7 _SerialPutChar
00000000000004B5 _SerialIRQ
00000000000005E1 _SerialPutString
00000000000006D6 _SerialPutBuf
00000000000007CB _SerialGetBufDirect
000000000000096F _Delay3s
00000000000009D8 _bootrom
