Sections:
00: ".bss" (0-14)
01: ".data" (0-A)
02: ".text" (0-1F00)
03: ".rodata" (0-10000)


Source: "boot.asm"
                                    	     1: # boot.asm Qupls assembly language
                                    	     2: 
                                    	     3: 	.bss
00:0000000000000000 00              	     4: 	.space	10
00:0000000000000001 *
                                    	     5: .set pgtbl,0xFFF80000
                                    	     6: .set ary,0xFFFC0000
                                    	     7: .set txtscreen,0xFEC00000
                                    	     8: .set leds,0xFEDFFF00
                                    	     9: .set keybd,0xFEDCFE00
                                    	    10: .set rand,0xFEE1FD00
                                    	    11: .set CTRLH,8
                                    	    12: .set CTRLX,24
                                    	    13: .set PTBR,0xFFF4FF20
                                    	    14: 
                                    	    15: .set CursorRow,0xFFFC0400
                                    	    16: .set CursorCol,0xFFFC0401
                                    	    17: .set TextRows,0xFFFC0402
                                    	    18: .set TextCols,0xFFFC0403
                                    	    19: .set TextCurpos,0xFFFC0404
                                    	    20: .set TextScr,0xFFFC0408
                                    	    21: .set TextAttr,0xFFFC0410
                                    	    22: 
                                    	    23: .set mon_r1,0xFFFC0430
                                    	    24: .set mon_r2,0xFFFC0440
                                    	    25: 
                                    	    26: .extern	SerialInit
                                    	    27: .extern SerialPutString
                                    	    28: .extern SerialTest
                                    	    29: 
                                    	    30: 	.data
01:0000000000000000 00              	    31: 	.space	10
01:0000000000000001 *
                                    	    32: 	.sdreg 60
                                    	    33: 
                                    	    34: #	.org	0xFFFFFFFFFFFD0000
                                    	    35: 	.text
                                    	    36: #	.align	0
                                    	    37: 
                                    	    38: #typedef struct packed
                                    	    39: #{
                                    	    40: #	logic v;
                                    	    41: #	logic [4:0] lvl;
                                    	    42: #	logic [2:0] rgn;
                                    	    43: #	logic m;
                                    	    44: #	logic a;
                                    	    45: #	logic t;							// Type, 0=MPP, 1=PTP
                                    	    46: #	logic s;
                                    	    47: #	logic g;
                                    	    48: #	logic [1:0] sw;
                                    	    49: #	logic [3:0] cache;
                                    	    50: #	rwx_t [2:0] mrwx;
                                    	    51: #	rwx_t [2:0] hrwx;
                                    	    52: #	rwx_t [2:0] srwx;
                                    	    53: #	rwx_t [2:0] urwx;
                                    	    54: #	logic [31:0] ppn;			// 32 bit address space
                                    	    55: #} spte_t;	// 64 bits
                                    	    56: 
                                    	    57: start:
02:0000000000000000 0402F8FFFF      	    58: 	ldi t0,-1
                                    	    59: # Setup page table so some IO may be accessed
02:0000000000000005 84000000C03C0000	    60: 	ldi a0,pgtbl								# level 0 table
02:000000000000000D F8FF
02:000000000000000F D30000F9A73C20FF	    61: 	sto a0,PTBR
02:0000000000000017 F4FF
02:0000000000000019 0401000000      	    62: 	ldi	a1,0										
                                    	    63: .clrpgtbl:
02:000000000000001E 53400000C03C0000	    64: 	sto	r0,pgtbl[a1]
02:0000000000000026 F8FF
02:0000000000000028 0441400000      	    65: 	add	a1,a1,8
02:000000000000002D 285100FCFF3C0800	    66: 	bltu a1,8,.clrpgtbl				# number of entries to clear *8
02:0000000000000035 0000
                                    	    67: 
02:0000000000000037 FFFFFFFFFFFF3700	    68: 	ldi a0,0x83000FFFFFFFFEDF	# LEDS
02:000000000000003F 008400F8F6FF3CDF
02:0000000000000047 FEFFFF3CFF0F0083
02:000000000000004F D300C0B7C73CF8F6	    69: 	sto	a0,pgtbl+0x1EDF*8
02:0000000000000057 F8FF
02:0000000000000059 840000F6FF3CC0FE	    70: 	ldi a0,0x83000FFFFFFFFEC0	# text screen
02:0000000000000061 FFFF3CFF0F0083
02:0000000000000068 D30000B0C73C00F6	    71: 	sto	a0,pgtbl+0x1EC0*8
02:0000000000000070 F8FF
02:0000000000000072 FFFFFFFFFFFFFFFF	    72: 	ldi a0,0x83000FFFFFFFFEDC	# keyboard
02:000000000000007A FFFFFF3200008400
02:0000000000000082 E0F6FF3CDCFEFFFF
02:000000000000008A 3CFF0F0083
02:000000000000008F D30000B7C73CE0F6	    73: 	sto	a0,pgtbl+0x1EDC*8
02:0000000000000097 F8FF
02:0000000000000099 840008F7FF3CE1FE	    74: 	ldi a0,0x83000FFFFFFFFEE1	# random
02:00000000000000A1 FFFF3CFF0F0083
02:00000000000000A8 D30040B8C73C08F7	    75: 	sto	a0,pgtbl+0x1EE1*8
02:00000000000000B0 F8FF
                                    	    76: 
                                    	    77: # Get the previous stores to complete, otherwise when a TLB miss occurs a page
                                    	    78: # fault will occur, and we're not ready for one yet.
02:00000000000000B2 FFFFFFFFFF      	    79: 	nop
02:00000000000000B7 FFFFFFFFFF      	    80: 	nop
02:00000000000000BC FF3C000072FF0000	    81: 	sync
02:00000000000000C4 00
02:00000000000000C5 520200F8FF3C00FF	    82: 	stt t0,leds
02:00000000000000CD DFFE
02:00000000000000CF 520020E80F3C04FD	    83: 	stt r0,rand+4								# select stream 0
02:00000000000000D7 E1FE
02:00000000000000D9 8400C8CCCC3C9999	    84: 	ldi a0,0x99999999						# set random seed
02:00000000000000E1 9999
02:00000000000000E3 D820180000      	    85: 	asl a0,a0,3
02:00000000000000E8 D20040E80F3C08FD	    86: 	stt a0,rand+8
02:00000000000000F0 E1FE
02:00000000000000F2 D20060E80F3C0CFD	    87: 	stt a0,rand+12
02:00000000000000FA E1FE
02:00000000000000FC FF3C0000C40000E8	    88: 	ldt a0,rand
02:0000000000000104 0F3C00FDE1FE
02:000000000000010A D20000E80F3C00FD	    89: 	stt a0,rand
02:0000000000000112 E1FE
02:0000000000000114 04140000E03C0000	    90: 	ldi a3,0xfffc0000
02:000000000000011C FCFF
                                    	    91: #	stt r0,rand+4								# select stream 0
                                    	    92: #	bsr Delay3s	
                                    	    93: #	bsr ramtest
02:000000000000011E 20FC0C0000      	    94: 	bsr Delay3s	
02:0000000000000123 20FC400000      	    95: 	bsr SerialInit
02:0000000000000128 20FC0A0000      	    96: 	bsr Delay3s	
                                    	    97: #	bsr SerialTest
02:000000000000012D 84000000EF3C00E0	    98: 	ldi a0,0xfffde000
02:0000000000000135 FDFF
02:0000000000000137 0401008000      	    99: 	ldi a1,4096
02:000000000000013C FF3C0000209C6100	   100: 	bsr SerialGetBufDirect
02:0000000000000144 00
                                    	   101: #	jsr 0xfffde000
                                    	   102: #	bsr Delay3s	
                                    	   103: #	bsr Delay3s	
02:0000000000000145 4A020049003C2009	   104: 	lda	t0,ExcHandler
02:000000000000014D 0000
02:000000000000014F 0780988121      	   105: 	csrrw r0,t0,0x3033					# set kernel exception vector
02:0000000000000154 04020000003C0000	   106: 	ldi	t0,txtscreen
02:000000000000015C C0FE
02:000000000000015E 52024020E03C0804	   107: 	stt t0,TextScr
02:0000000000000166 FCFF
02:0000000000000168 04020000F83C0000	   108: 	ldi t0,0x43FFFFE0003F0000		# white foreground, blue background
02:0000000000000170 3F003CE0FFFF43
02:0000000000000177 FFFFFFFFFFFF3700	   109: 	sto t0,TextAttr
02:000000000000017F 0053028020E03C10
02:0000000000000187 04FCFF
02:000000000000018A 0402000100      	   110: 	ldi t0,32
02:000000000000018F 50021020E03C0204	   111: 	stb t0,TextRows
02:0000000000000197 FCFF
02:0000000000000199 0402000200      	   112: 	ldi t0,64
02:000000000000019E 50021820E03C0304	   113: 	stb t0,TextCols
02:00000000000001A6 FCFF
                                    	   114: 	
                                    	   115: #	bsr	Delay3s
02:00000000000001A8 041E0000F83C0000	   116: 	ldi gp,0xffff0000
02:00000000000001B0 FFFF
02:00000000000001B2 CA80DF1E003CDB03	   117: 	lda a0,msgStart[gp]
02:00000000000001BA 0000
02:00000000000001BC FF3C000020DC5400	   118: 	bsr	SerialPutString
02:00000000000001C4 00
                                    	   119: #	bsr SerialTest
02:00000000000001C5 207C2F0000      	   120: 	bsr HomeCursor
02:00000000000001CA 207C080000      	   121: 	bsr ClearScreen
02:00000000000001CF CA80DF1E003CDB03	   122: 	lda a0,msgStart[gp]
02:00000000000001D7 0000
02:00000000000001D9 207C310000      	   123: 	bsr DisplayString
                                    	   124: 
02:00000000000001DE 8F03000000      	   125: 	mov t3,r0
02:00000000000001E3 0403400100      	   126: 	ldi t2,40
                                    	   127: .st2:
02:00000000000001E8 570038C0003C0000	   128: 	sto r0,0xfffc0000[r0+t3]
02:00000000000001F0 FCFF
02:00000000000001F2 84E3400000      	   129: 	add t3,t3,8
02:00000000000001F7 29F930C4FF      	   130: 	blt t3,t2,.st2
                                    	   131: 	
02:00000000000001FC FF3C000007010880	   132: 	csrrd r2,r0,0x3001	# get the thread number
02:0000000000000204 01
02:0000000000000205 0841780000      	   133: 	and r2,r2,15				# 0 to 3
02:000000000000020A 0402080000      	   134: 	ldi t0,1
02:000000000000020F A85820C2FF      	   135: 	bne r2,t0,stall			# Allow only thread 1 to work
                                    	   136: 
02:0000000000000214 0401E80700      	   137: 	ldi r2,0xFD
02:0000000000000219 0401080000      	   138: 	ldi r2,0x01					# x = 1
02:000000000000021E 52010000E03C0000	   139: 	stt r2,ary@got
02:0000000000000226 FCFF
                                    	   140: 
02:0000000000000228 8401800000      	   141: 	ldi r3,0x10		# calculates 16th fibonacci number (13 = D in hex) (CHANGE HERE IF YOU WANT TO CALCULATE ANOTHER NUMBER)
02:000000000000022D 8260000400      	   142: 	or r1,r3,r0	# transfer y register to accumulator
02:0000000000000232 8461E8FFFF      	   143: 	add r3,r3,-3	# handles the algorithm iteration counting
                                    	   144: 
02:0000000000000237 8400100000      	   145: 	ldi r1,2		# a = 2
02:000000000000023C FF3C0000D2002000	   146: 	stt r1,0xFFFC0004		# stores a
02:0000000000000244 E03C0400FCFF
                                    	   147: 
                                    	   148: floop: 
02:000000000000024A 44012000E03C0400	   149: 	LDT r2,0xFFFC0004		# x = a
02:0000000000000252 FCFF
02:0000000000000254 8220101000      	   150: 	ADD r1,r1,r2					# a += x
02:0000000000000259 D2002000E03C0400	   151: 	STT r1,0xFFFC0004		# stores a
02:0000000000000261 FCFF
02:0000000000000263 52010000E03C0000	   152: 	STT r2,0xFFFC0000		# stores x
02:000000000000026B FCFF
02:000000000000026D 8461F8FFFF      	   153: 	ADD r3,r3,-1					# y -= 1
02:0000000000000272 A8600000003C4A02	   154:   bnez r3,floop		# jumps back to loop if Z bit != 0 (y's decremention isn't zero yet)
02:000000000000027A 0000
02:000000000000027C FF3C0000FFFFFFFF	   155:   NOP
02:0000000000000284 FF
02:0000000000000285 FFFFFFFFFF      	   156:   NOP
02:000000000000028A FFFFFFFFFF      	   157:   NOP
02:000000000000028F FFFFFFFFFF      	   158:   NOP
02:0000000000000294 FFFFFFFFFF      	   159:   NOP
02:0000000000000299 FFFFFFFFFF      	   160: 	NOP  
                                    	   161: 	
                                    	   162: stall:
02:000000000000029E 20C0000000      	   163: 	BRA	stall
                                    	   164: 
                                    	   165: # ------------------------------------------------------------------------------
                                    	   166: # Delay for a few seconds at startup.
                                    	   167: # ------------------------------------------------------------------------------
                                    	   168: 
                                    	   169: Delay3s:
02:00000000000002A3 8400080000      	   170: 	ldi	a0,1	#0000000
02:00000000000002A8 8401000000      	   171: 	ldi a2,0
                                    	   172: Delay:
                                    	   173: .0001:
02:00000000000002AD 5821881000      	   174: 	lsr	a1,a0,17
02:00000000000002B2 520100F8FF3C00FF	   175: 	stt a1,leds
02:00000000000002BA DFFE
02:00000000000002BC FF3C00008420F8FF	   176: 	sub	a0,a0,1
02:00000000000002C4 FF
02:00000000000002C5 A93A00A4FF      	   177: 	bgt	a0,r0,.0001	
                                    	   178: doRet:
02:00000000000002CA 231C000000      	   179: 	ret
                                    	   180: 
                                    	   181: #------------------------------------------------------------------------------
                                    	   182: # clearscreen
                                    	   183: # Parameters:
                                    	   184: # 	none
                                    	   185: # Modifies:
                                    	   186: #		mc0,mc1,mc2
                                    	   187: # Stack space:
                                    	   188: #		none
                                    	   189: #------------------------------------------------------------------------------
                                    	   190: 
                                    	   191: ClearScreen:
02:00000000000002CF 46188020E03C1004	   192: 	ldo mc0,TextAttr
02:00000000000002D7 FCFF
02:00000000000002D9 0418060100      	   193: 	add mc0,mc0,' '
                                    	   194: #	ldtu mc1,TextScr
02:00000000000002DE 84180000003C0000	   195: 	ldi mc1,txtscreen
02:00000000000002E6 C0FE
02:00000000000002E8 0439060002      	   196: 	add mc2,mc1,64*8*32						# 64x32x8
                                    	   197: .0001:
02:00000000000002ED 53380600003C0000	   198: 	sto mc0,[mc1]
02:00000000000002F5 0000
02:00000000000002F7 8438460000      	   199: 	add mc1,mc1,8
02:00000000000002FC FF3C00002839969D	   200: 	bltu mc1,mc2,.0001
02:0000000000000304 FF
02:0000000000000305 231C000000      	   201: 	ret
                                    	   202: 
                                    	   203: #------------------------------------------------------------------------------
                                    	   204: # Calculate screen memory location from CursorRow,CursorCol.
                                    	   205: # Returns:
                                    	   206: #		a0 = screen location
                                    	   207: # Stack space:
                                    	   208: #		1 word
                                    	   209: #------------------------------------------------------------------------------
                                    	   210: 
                                    	   211: CalcScreenLoc:
02:000000000000030A C0000020E03C0004	   212: 	ldb	a0,CursorRow			# cursor row
02:0000000000000312 FCFF
02:0000000000000314 8820F80300      	   213: 	and a0,a0,0x7f
02:0000000000000319 40181820E03C0304	   214: 	ldb mc0,TextCols			# times number of columns
02:0000000000000321 FCFF
02:0000000000000323 8220804100      	   215: 	mul a0,a0,mc0
02:0000000000000328 40180820E03C0104	   216: 	ldb mc0,CursorCol			# plus cursor col
02:0000000000000330 FCFF
02:0000000000000332 0818FE0300      	   217: 	and mc0,mc0,0x7f
02:0000000000000337 8220801100      	   218: 	add a0,a0,mc0
02:000000000000033C FF3C0000D1002020	   219: 	stw a0,TextCurpos			# update text position
02:0000000000000344 E03C0404FCFF
02:000000000000034A D820180000      	   220: 	asl a0,a0,3						# multiply by text cell size
02:000000000000034F 45184020E03C0804	   221: 	ldtu mc0,TextScr			# add in text screen location
02:0000000000000357 FCFF
02:0000000000000359 84200000003C0000	   222: 	add a0,a0,txtscreen	#mc0
02:0000000000000361 C0FE
02:0000000000000363 231C000000      	   223: 	ret
                                    	   224: 
                                    	   225: #------------------------------------------------------------------------------
                                    	   226: # Display a character on the screen
                                    	   227: #
                                    	   228: # Parameters:
                                    	   229: # 	a1 = char to display
                                    	   230: # Modifies:
                                    	   231: #		screen and text cursor position updated
                                    	   232: #------------------------------------------------------------------------------
                                    	   233: 
                                    	   234: DisplayChar:
02:0000000000000368 B61C008000      	   235: 	push lr1
02:000000000000036D A8480090FF3C0D00	   236: 	bne a1,'\r',.0010				# carriage return?
02:0000000000000375 0000
02:0000000000000377 FFFFFFFFFFFF3700	   237: 	stb r0,CursorCol				# just set cursor column to zero on a CR
02:000000000000037F 0050000820E03C01
02:0000000000000387 04FCFF
02:000000000000038A 20DC220000      	   238: 	bsr SyncCursor
02:000000000000038F B71C008000      	   239: 	pop lr1
02:0000000000000394 231C000000      	   240: 	ret
                                    	   241: .0010:
02:0000000000000399 B640185002      	   242: 	push a0,a1,a2,a3
02:000000000000039E 0841F80700      	   243: 	and a1,a1,0xff					# make char unsigned
02:00000000000003A3 A848008AFF3C9100	   244: 	bne a1,0x91,.0005				# cursor right?
02:00000000000003AB 0000
                                    	   245: 	# Cursor right
02:00000000000003AD C0000820E03C0104	   246: 	ldb a0,CursorCol				# Is rightmost column reached?
02:00000000000003B5 FCFF
02:00000000000003B7 FFFFFFFFFFFF3700	   247: 	ldb a2,TextCols
02:00000000000003BF 00C0011820E03C03
02:00000000000003C7 04FCFF
02:00000000000003CA 8461F8FFFF      	   248: 	sub a2,a2,1
02:00000000000003CF 292A1880FF      	   249: 	bge a0,a2,.0001
02:00000000000003D4 8420080000      	   250: 	add	a0,a0,1							# not rightmost, add 1 to column
02:00000000000003D9 D0000820E03C0104	   251: 	stb a0,CursorCol
02:00000000000003E1 FCFF
                                    	   252: .0002:
02:00000000000003E3 20DC1E0000      	   253: 	bsr SyncCursor
                                    	   254: .0001:
02:00000000000003E8 B740185002      	   255: 	pop a0,a1,a2,a3
02:00000000000003ED B71C008000      	   256: 	pop lr1
02:00000000000003F2 231C000000      	   257: 	ret
                                    	   258: .0005:
02:00000000000003F7 FFFFFFFFFFFF3700	   259: 	bne a1,0x90,.0006
02:00000000000003FF 00A8480080FF3C90
02:0000000000000407 000000
                                    	   260: 	# Cursor up
02:000000000000040A C0000020E03C0004	   261: 	ldb a0,CursorRow				# can the cursor move up?
02:0000000000000412 FCFF
02:0000000000000414 283A007CFF      	   262: 	beq a0,r0,.0001
02:0000000000000419 8420F8FFFF      	   263: 	sub a0,a0,1
02:000000000000041E D0000020E03C0004	   264: 	stb a0,CursorRow
02:0000000000000426 FCFF
02:0000000000000428 20E0FCFFFF      	   265: 	bra .0002
                                    	   266: .0006:
02:000000000000042D A8480078FF3C9300	   267: 	bne a1,0x93,.0007
02:0000000000000435 0000
                                    	   268: 	# Cursor left
02:0000000000000437 FFFFFFFFFFFF3700	   269: 	ldb a0,CursorCol				# can the cursor move left?
02:000000000000043F 00C0000820E03C01
02:0000000000000447 04FCFF
02:000000000000044A 28220074FF      	   270: 	beq a0,r0,.0001	
02:000000000000044F 8420F8FFFF      	   271: 	sub a0,a0,1
02:0000000000000454 D0000820E03C0104	   272: 	stb a0,CursorCol
02:000000000000045C FCFF
02:000000000000045E 20E0FCFFFF      	   273: 	bra .0002
                                    	   274: .0007:
02:0000000000000463 A8400072FF3C9200	   275: 	bne a1,0x92,.0008
02:000000000000046B 0000
                                    	   276: 	# Cursor down
02:000000000000046D C0000020E03C0004	   277: 	ldb a0,CursorRow				# can cursor move down?
02:0000000000000475 FCFF
02:0000000000000477 FFFFFFFFFFFF3700	   278: 	ldb a2,TextRows
02:000000000000047F 00C0011020E03C02
02:0000000000000487 04FCFF
02:000000000000048A 8461F8FFFF      	   279: 	sub a2,a2,1
02:000000000000048F 2922186AFF      	   280: 	bge a0,a2,.0001
02:0000000000000494 8420080000      	   281: 	add a0,a0,1
02:0000000000000499 D0000020E03C0004	   282: 	stb a0,CursorRow
02:00000000000004A1 FCFF
02:00000000000004A3 20E0FAFFFF      	   283: 	bra .0002
                                    	   284: .0008:										# home cursor
02:00000000000004A8 A8480068FF3C9400	   285: 	bne a1,0x94,.0011
02:00000000000004B0 0000
                                    	   286: 	# Home cursor
02:00000000000004B2 C0000820E03C0104	   287: 	ldb a0,CursorCol
02:00000000000004BA FCFF
02:00000000000004BC FF3C000028220068	   288: 	beq a0,r0,.0003
02:00000000000004C4 FF
02:00000000000004C5 50000820E03C0104	   289: 	stb r0,CursorCol
02:00000000000004CD FCFF
02:00000000000004CF 20E0F8FFFF      	   290: 	bra .0002
                                    	   291: .0003:
02:00000000000004D4 50000020E03C0004	   292: 	stb r0,CursorRow
02:00000000000004DC FCFF
02:00000000000004DE 20E0F8FFFF      	   293: 	bra .0002
                                    	   294: .0011:
02:00000000000004E3 28520062FF3C9900	   295: 	beq a1,0x99,doDelete
02:00000000000004EB 0000
02:00000000000004ED 28420062FF3C0800	   296: 	beq a1,CTRLH,doBackspace
02:00000000000004F5 0000
02:00000000000004F7 FFFFFFFFFFFF3700	   297: 	beq a1,CTRLX,doCtrlX
02:00000000000004FF 00285A006CFF3C18
02:0000000000000507 000000
02:000000000000050A 285A0060FF3C0A00	   298: 	beq a1,'\n',.0012				# line feed
02:0000000000000512 0000
                                    	   299: 	# Regular char
02:0000000000000514 205CEEFFFF      	   300: 	bsr CalcScreenLoc				# a0 = screen location
02:0000000000000519 C6018020E03C1004	   301: 	ldo a2,TextAttr
02:0000000000000521 FCFF
02:0000000000000523 8261100400      	   302: 	or a2,a2,a1
02:0000000000000528 D3210000003C0000	   303: 	sto a2,[a0]
02:0000000000000530 0000
02:0000000000000532 203C070000      	   304: 	bsr IncCursorPos
                                    	   305: .0004:
02:0000000000000537 20DC140000      	   306: 	bsr SyncCursor
02:000000000000053C FF3C0000B7401850	   307: 	pop a0,a1,a2,a3
02:0000000000000544 02
02:0000000000000545 B71C008000      	   308: 	pop lr1
02:000000000000054A 231C000000      	   309: 	ret
                                    	   310: .0012:										# line feed
02:000000000000054F 207C090000      	   311: 	bsr IncCursorRow
02:0000000000000554 2060FFFFFF      	   312: 	bra .0004
                                    	   313: 			
                                    	   314: 	#---------------------------
                                    	   315: 	# CTRL-H: backspace
                                    	   316: 	#---------------------------
                                    	   317: doBackspace:
02:0000000000000559 C0000820E03C0104	   318: 	ldb a0,CursorCol				# At start of line already?
02:0000000000000561 FCFF
02:0000000000000563 A8300850FF      	   319: 	bne a0,a0,.0001
02:0000000000000568 B740185002      	   320: 	pop a0,a1,a2,a3
02:000000000000056D B71C008000      	   321: 	pop lr1
02:0000000000000572 231C000000      	   322: 	ret
                                    	   323: .0001:
02:0000000000000577 8420F8FFFF      	   324: 	sub a0,a0,1							#decrement column
02:000000000000057C FF3C0000D0000820	   325: 	stb a0,CursorCol
02:0000000000000584 E03C0104FCFF
                                    	   326: 
                                    	   327: 	#---------------------------
                                    	   328: 	# Delete key
                                    	   329: 	#---------------------------
                                    	   330: doDelete:
02:000000000000058A 205CECFFFF      	   331: 	bsr	CalcScreenLoc				# a0 = screen location
02:000000000000058F C0010820E03C0104	   332: 	ldb a2,CursorCol
02:0000000000000597 FCFF
02:0000000000000599 40141820E03C0304	   333: 	ldb a3,TextCols
02:00000000000005A1 FCFF
                                    	   334: .0001:
02:00000000000005A3 46214000003C0800	   335: 	ldo a1,8[a0]
02:00000000000005AB 0000
02:00000000000005AD 53210000003C0000	   336: 	sto a1,[a0]
02:00000000000005B5 0000
02:00000000000005B7 8420400000      	   337: 	add a0,a0,8
02:00000000000005BC FF3C000084610800	   338: 	add a2,a2,1
02:00000000000005C4 00
02:00000000000005C5 29794045FF      	   339: 	blt a2,a3,.0001
02:00000000000005CA 0401000100      	   340: 	ldi a1,' '						# one space
02:00000000000005CF 5021C0FFFF3CF8FF	   341: 	stb a1,-8[a0]					# terminate line with space char
02:00000000000005D7 FFFF
02:00000000000005D9 B740185002      	   342: 	pop a0,a1,a2,a3
02:00000000000005DE B71C008000      	   343: 	pop lr1
02:00000000000005E3 231C000000      	   344: 	ret
                                    	   345: 
                                    	   346: 	#---------------------------
                                    	   347: 	# CTRL-X: erase line
                                    	   348: 	#---------------------------
                                    	   349: doCtrlX:
02:00000000000005E8 50000820E03C0104	   350: 	stb r0,CursorCol			# Reset cursor to start of line
02:00000000000005F0 FCFF
02:00000000000005F2 C0001820E03C0304	   351: 	ldb a0,TextCols				# and display TextCols number of spaces
02:00000000000005FA FCFF
02:00000000000005FC FF3C000004010001	   352: 	ldi	a1,' '						# one space
02:0000000000000604 00
                                    	   353: .0001:
                                    	   354: 	# DisplayChar is called recursively here
                                    	   355: 	# It's safe to do because we know it won't recurse again due to the
                                    	   356: 	# fact we know the character being displayed is a space char
02:0000000000000605 201CEBFFFF      	   357: 	bsr DisplayChar
02:000000000000060A 8420F8FFFF      	   358: 	sub a0,a0,1
02:000000000000060F 292A003CFF      	   359: 	bge a0,r0,.0001
02:0000000000000614 50000820E03C0104	   360: 	stb r0,CursorCol			# Reset cursor to start of line
02:000000000000061C FCFF
02:000000000000061E B740185002      	   361: 	pop a0,a1,a2,a3
02:0000000000000623 B71C008000      	   362: 	pop lr1
02:0000000000000628 231C000000      	   363: 	ret										# we're done
                                    	   364: 
                                    	   365: #------------------------------------------------------------------------------
                                    	   366: # Increment the cursor position, scroll the screen if needed.
                                    	   367: #------------------------------------------------------------------------------
                                    	   368: #
                                    	   369: IncCursorPos:
02:000000000000062D B640000001      	   370: 	push a0,a1
02:0000000000000632 C0000820E03C0104	   371: 	ldb a0,CursorCol
02:000000000000063A FCFF
02:000000000000063C FF3C000084200800	   372: 	add a0,a0,1
02:0000000000000644 00
02:0000000000000645 D0000820E03C0104	   373: 	stb a0,CursorCol
02:000000000000064D FCFF
02:000000000000064F C0001820E03C0304	   374: 	ldb a0,TextCols
02:0000000000000657 FCFF
02:0000000000000659 40010820E03C0104	   375: 	ldb a1,CursorCol
02:0000000000000661 FCFF
02:0000000000000663 29410832FF      	   376: 	blt a1,a0,IncCursorPos1	# return if text cols not exceeded
02:0000000000000668 50000820E03C0104	   377: 	stb r0,CursorCol
02:0000000000000670 FCFF
02:0000000000000672 B740000001      	   378: 	pop a0,a1
                                    	   379: IncCursorRow:
02:0000000000000677 FFFFFFFFFF      	   380: 	nop
02:000000000000067C FF3C0000FFFFFFFF	   381: 	nop
02:0000000000000684 FF
02:0000000000000685 B640000001      	   382: 	push a0,a1
02:000000000000068A C0000020E03C0004	   383: 	ldb a0,CursorRow
02:0000000000000692 FCFF
02:0000000000000694 8420080000      	   384: 	add a0,a0,1
02:0000000000000699 D0000020E03C0004	   385: 	stb a0,CursorRow
02:00000000000006A1 FCFF
02:00000000000006A3 40011020E03C0204	   386: 	ldb a1,TextRows
02:00000000000006AB FCFF
02:00000000000006AD 29291028FF      	   387: 	blt a0,a1,IncCursorPos1	# return if text rows not exceeded
02:00000000000006B2 0441F8FFFF      	   388: 	sub a1,a1,1
02:00000000000006B7 FFFFFFFFFFFF3700	   389: 	stb a1,CursorRow
02:00000000000006BF 0050010020E03C00
02:00000000000006C7 04FCFF
02:00000000000006CA B61C008000      	   390: 	push lr1
02:00000000000006CF 205CE0FFFF      	   391: 	bsr CalcScreenLoc
02:00000000000006D4 201C010000      	   392: 	bsr ScrollUp
02:00000000000006D9 B71C008000      	   393: 	pop lr1
                                    	   394: IncCursorPos1:
02:00000000000006DE B740000001      	   395: 	pop	a0,a1
02:00000000000006E3 231C000000      	   396: 	ret
                                    	   397: 
                                    	   398: #------------------------------------------------------------------------------
                                    	   399: # Scroll text screen
                                    	   400: #------------------------------------------------------------------------------
                                    	   401: 
                                    	   402: ScrollUp:
02:00000000000006E8 B69C000001      	   403: 	push lr1,t0
02:00000000000006ED B640185002      	   404: 	push a0,a1,a2,a3
02:00000000000006F2 C4004020E03C0804	   405: 	ldt a0,TextScr				# a0 = pointer to screen
02:00000000000006FA FCFF
02:00000000000006FC FF3C000040011820	   406: 	ldb a1,TextCols				# a1 = number of columns
02:0000000000000704 E03C0304FCFF
02:000000000000070A C0011020E03C0204	   407: 	ldb a2,TextRows
02:0000000000000712 FCFF
02:0000000000000714 8461F8FFFF      	   408: 	sub a2,a2,1
02:0000000000000719 8241184000      	   409: 	mul a2,a1,a2					# a2 = number of cells to move
02:000000000000071E 0F54000000      	   410: 	mov a3,a1
                                    	   411: .0001:
02:0000000000000723 4F22808101      	   412: 	ldo t0,[a0+a3]
02:0000000000000728 0214151400      	   413: 	sub a3,a3,a1
02:000000000000072D 572280C100      	   414: 	sto.io t0,[a0+a3]
02:0000000000000732 0214151000      	   415: 	add a3,a3,a1
02:0000000000000737 0214151000      	   416: 	add a3,a3,a1
02:000000000000073C FF3C00008461F8FF	   417: 	sub a2,a2,1
02:0000000000000744 FF
02:0000000000000745 A97A0014FF      	   418: 	bgt a2,r0,.0001
02:000000000000074A 20DC000000      	   419: 	bsr BlankLastLine
02:000000000000074F B740185002      	   420: 	pop a0,a1,a2,a3
02:0000000000000754 B79C000001      	   421: 	pop lr1,t0
02:0000000000000759 231C000000      	   422: 	ret
                                    	   423: 
                                    	   424: #------------------------------------------------------------------------------
                                    	   425: # Blank out the last line of the screen.
                                    	   426: #------------------------------------------------------------------------------
                                    	   427: 
                                    	   428: BlankLastLine:
02:000000000000075E 44184020E03C0804	   429: 	ldt mc0,TextScr
02:0000000000000766 FCFF
02:0000000000000768 C0181820E03C0304	   430: 	ldb mc1,TextCols
02:0000000000000770 FCFF
02:0000000000000772 40191020E03C0204	   431: 	ldb mc2,TextRows
02:000000000000077A FCFF
02:000000000000077C FF3C00000459FEFF	   432: 	sub mc2,mc2,1
02:0000000000000784 FF
02:0000000000000785 8238964100      	   433: 	mul mc1,mc1,mc2
02:000000000000078A D8381E0000      	   434: 	asl mc1,mc1,3
02:000000000000078F 8419000100      	   435: 	ldi mc3,' '
02:0000000000000794 40191820E03C0304	   436: 	ldb mc2,TextCols
02:000000000000079C FCFF
                                    	   437: .0001:
02:000000000000079E D7198E0100      	   438: 	stb.io mc3,[mc0+mc1]
02:00000000000007A3 8438460000      	   439: 	add mc1,mc1,8
02:00000000000007A8 0459FEFFFF      	   440: 	sub mc2,mc2,1
02:00000000000007AD A952060CFF      	   441: 	bgt mc2,r0,.0001
02:00000000000007B2 231C000000      	   442: 	ret	
                                    	   443: 
                                    	   444: #------------------------------------------------------------------------------
                                    	   445: #------------------------------------------------------------------------------
                                    	   446: 
                                    	   447: HomeCursor:
02:00000000000007B7 FFFFFFFFFFFF3700	   448: 	stb r0,CursorRow
02:00000000000007BF 0050000020E03C00
02:00000000000007C7 04FCFF
02:00000000000007CA 50000820E03C0104	   449: 	stb r0,CursorCol
02:00000000000007D2 FCFF
02:00000000000007D4 51002020E03C0404	   450: 	stw r0,TextCurpos
02:00000000000007DC FCFF
                                    	   451: 
                                    	   452: #------------------------------------------------------------------------------
                                    	   453: # SyncCursor:
                                    	   454: #
                                    	   455: # Sync the hardware cursor's position to the text cursor position.
                                    	   456: #
                                    	   457: # Parameters:
                                    	   458: #		none
                                    	   459: # Returns:
                                    	   460: #		none
                                    	   461: # Registers Affected:
                                    	   462: #		mc0
                                    	   463: #------------------------------------------------------------------------------
                                    	   464: 
                                    	   465: SyncCursor:
02:00000000000007DE 42182020E03C0404	   466: 	ldw mc0,TextCurpos
02:00000000000007E6 FCFF
02:00000000000007E8 51182001403C2400	   467: 	stw mc0,0xfec80024
02:00000000000007F0 C8FE
02:00000000000007F2 231C000000      	   468: 	ret
                                    	   469: 	
                                    	   470: #------------------------------------------------------------------------------
                                    	   471: # Display string on screen
                                    	   472: #
                                    	   473: # Parameters:
                                    	   474: # 	a0 = pointer to string to display
                                    	   475: # Returns:
                                    	   476: #		<none>
                                    	   477: # Modifies:
                                    	   478: #		<none>
                                    	   479: #------------------------------------------------------------------------------
                                    	   480: 
                                    	   481: DisplayString:
02:00000000000007F7 B63C108001      	   482: 	push lr1,a0,a1
                                    	   483: .0002:
02:00000000000007FC FF3C000040210000	   484: 	ldb a1,[a0]
02:0000000000000804 003C00000000
02:000000000000080A 284A00F8FE      	   485: 	beq a1,r0,.0001
02:000000000000080F 201CDBFFFF      	   486: 	bsr DisplayChar
02:0000000000000814 8420080000      	   487: 	add a0,a0,1
02:0000000000000819 2080FFFFFF      	   488: 	bra .0002
                                    	   489: .0001:
02:000000000000081E B73C108001      	   490: 	pop lr1,a0,a1
02:0000000000000823 231C000000      	   491: 	ret
                                    	   492: 
                                    	   493: #------------------------------------------------------------------------------
                                    	   494: #------------------------------------------------------------------------------
                                    	   495: CRLF:
02:0000000000000828 3601008000      	   496: 	push a1
02:000000000000082D 0401680000      	   497: 	ldi a1,'\r'
02:0000000000000832 201CD9FFFF      	   498: 	bsr DisplayChar
02:0000000000000837 0401500000      	   499: 	ldi a1,'\n'
02:000000000000083C FF3C0000201CD9FF	   500: 	bsr DisplayChar
02:0000000000000844 FF
02:0000000000000845 3701008000      	   501: 	pop a1
02:000000000000084A 231C000000      	   502: 	ret
                                    	   503: 
                                    	   504: #------------------------------------------------------------------------------
                                    	   505: # Display nybble in a1
                                    	   506: #------------------------------------------------------------------------------
                                    	   507: 
                                    	   508: DisplayNybble:
02:000000000000084F 3621070001      	   509: 	push a1,lr1
02:0000000000000854 0841780000      	   510: 	and a1,a1,15
02:0000000000000859 0441800100      	   511: 	add a1,a1,'0'
02:000000000000085E A94900F0FE3C3900	   512: 	ble a1,'9',.0001
02:0000000000000866 0000
02:0000000000000868 0441380000      	   513: 	add a1,a1,7
                                    	   514: .0001:
02:000000000000086D 201CD7FFFF      	   515: 	bsr DisplayChar
02:0000000000000872 3721070001      	   516: 	pop a1,lr1
02:0000000000000877 231C000000      	   517: 	ret
                                    	   518: 
                                    	   519: #------------------------------------------------------------------------------
                                    	   520: # Display the byte in a1
                                    	   521: #------------------------------------------------------------------------------
                                    	   522: 
                                    	   523: DisplayByte:
02:000000000000087C FF3C0000B61C0080	   524: 	push lr1
02:0000000000000884 00
02:0000000000000885 5841204000      	   525: 	ror a1,a1,4
02:000000000000088A 207CFEFFFF      	   526: 	bsr DisplayNybble
02:000000000000088F 5841203000      	   527: 	rol a1,a1,4
02:0000000000000894 207CFCFFFF      	   528: 	bsr DisplayNybble
02:0000000000000899 B71C008000      	   529: 	pop lr1
02:000000000000089E 231C000000      	   530: 	ret
                                    	   531: 
                                    	   532: #------------------------------------------------------------------------------
                                    	   533: # Display the wyde in a0.B
                                    	   534: #------------------------------------------------------------------------------
                                    	   535: 
                                    	   536: DisplayWyde:
02:00000000000008A3 B61C008000      	   537: 	push lr1
02:00000000000008A8 5841404000      	   538: 	ror a1,a1,8
02:00000000000008AD 209CFFFFFF      	   539: 	bsr DisplayByte
02:00000000000008B2 5841403000      	   540: 	rol a1,a1,8
02:00000000000008B7 209CFFFFFF      	   541: 	bsr DisplayByte
02:00000000000008BC FF3C0000B71C0080	   542: 	pop lr1
02:00000000000008C4 00
02:00000000000008C5 231C000000      	   543: 	ret
                                    	   544: 
                                    	   545: #------------------------------------------------------------------------------
                                    	   546: # Display the tetra in a1
                                    	   547: #------------------------------------------------------------------------------
                                    	   548: 
                                    	   549: DisplayTetra:
02:00000000000008CA B61C008000      	   550: 	push lr1
02:00000000000008CF 5841804000      	   551: 	ror a1,a1,16
02:00000000000008D4 20FCFEFFFF      	   552: 	bsr DisplayWyde
02:00000000000008D9 5841803000      	   553: 	rol a1,a1,16
02:00000000000008DE 20FCFEFFFF      	   554: 	bsr DisplayWyde
02:00000000000008E3 B71C008000      	   555: 	pop lr1
02:00000000000008E8 231C000000      	   556: 	ret
                                    	   557: 
                                    	   558: #------------------------------------------------------------------------------
                                    	   559: # Display the octa in a1
                                    	   560: #------------------------------------------------------------------------------
                                    	   561: 
                                    	   562: DisplayOcta:
02:00000000000008ED B61C008000      	   563: 	push lr1
02:00000000000008F2 5841004100      	   564: 	ror a1,a1,32
02:00000000000008F7 205CFEFFFF      	   565: 	bsr DisplayTetra
02:00000000000008FC FF3C000058410031	   566: 	rol a1,a1,32
02:0000000000000904 00
02:0000000000000905 205CFEFFFF      	   567: 	bsr DisplayTetra
02:000000000000090A B71C008000      	   568: 	pop lr1
02:000000000000090F 231C000000      	   569: 	ret
                                    	   570: 
                                    	   571: GetNumber:
02:0000000000000914 231C000000      	   572: 	ret
                                    	   573: 
                                    	   574: #------------------------------------------------------------------------------
                                    	   575: #------------------------------------------------------------------------------
                                    	   576: 	.align 4
                                    	   577: ExcHandler:
02:0000000000000920 2320000000      	   578: 	rti
                                    	   579: 
                                    	   580: 	.include "serial.asm"

Source: "serial.asm"
                                    	     1: # ============================================================================
                                    	     2: #        __
                                    	     3: #   \\__/ o\    (C) 2022-2023  Robert Finch, Waterloo
                                    	     4: #    \  __ /    All rights reserved.
                                    	     5: #     \/_//     robfinch<remove>@finitron.ca
                                    	     6: #       ||
                                    	     7: #  
                                    	     8: #
                                    	     9: # Serial port routines for a WDC6551 compatible circuit.
                                    	    10: #
                                    	    11: # ============================================================================
                                    	    12: #
                                    	    13: 	.extern Delay
                                    	    14: 
                                    	    15: 	.bss
00:000000000000000A 00              	    16: 	.space	10
00:000000000000000B *
                                    	    17: .set XON,0x11
                                    	    18: .set XOFF,0x13
                                    	    19: .set ACIA_RX,0xFED00000
                                    	    20: .set ACIA_TX,0xFED00000
                                    	    21: .set ACIA_STAT,0xFED00004
                                    	    22: .set ACIA_CMD,0xFED00008
                                    	    23: .set ACIA_CTRL,0xFED0000C
                                    	    24: .set SerTailRcv,0xFFFC0000
                                    	    25: .set SerHeadRcv,0xFFFC0004
                                    	    26: .set SerTailXmit,0xFFFC0008
                                    	    27: .set SerHeadXmit,0xFFFC000C
                                    	    28: .set SerRcvXon,0xFFFC0010
                                    	    29: .set SerRcvXoff,0xFFFC0011
                                    	    30: .set SerRcvBuf,0xFFFC1000
                                    	    31: .set uart,0xFED00000
                                    	    32: 
                                    	    33: 	.text
                                    	    34: #------------------------------------------------------------------------------
                                    	    35: # Initialize serial port.
                                    	    36: #
                                    	    37: # Clear buffer indexes. Two bytes are used for the buffer index.
                                    	    38: # The port is initialized for 57600 baud, 1 stop bit and 8 bits data sent.
                                    	    39: # The internal baud rate generator is used.
                                    	    40: #
                                    	    41: # Stack Space:
                                    	    42: #		none
                                    	    43: # Parameters:
                                    	    44: #		none
                                    	    45: # Modifies:
                                    	    46: #		mc0
                                    	    47: # Returns:
                                    	    48: #		none
                                    	    49: #------------------------------------------------------------------------------
                                    	    50: 
                                    	    51: InitSerial:
                                    	    52: SerialInit:
02:0000000000000925 52002000E03C0400	    53: 	stt	r0,SerHeadRcv
02:000000000000092D FCFF
02:000000000000092F 52000000E03C0000	    54: 	stt	r0,SerTailRcv
02:0000000000000937 FCFF
02:0000000000000939 FFFFFFFF39000052	    55: 	stt	r0,SerHeadXmit
02:0000000000000941 006000E03C0C00FC
02:0000000000000949 FF
02:000000000000094A 52004000E03C0800	    56: 	stt	r0,SerTailXmit
02:0000000000000952 FCFF
02:0000000000000954 50008000E03C1000	    57: 	stb	r0,SerRcvXon
02:000000000000095C FCFF
02:000000000000095E 50008800E03C1100	    58: 	stb	r0,SerRcvXoff
02:0000000000000966 FCFF
02:0000000000000968 0418480000      	    59: 	ldi	mc0,0x09						#	dtr,rts active, rxint enabled (bit 1=0), no parity
02:000000000000096D 52184000803C0800	    60: 	stt mc0,ACIA_CMD
02:0000000000000975 D0FE
02:0000000000000977 0418F00030      	    61: 	ldi	mc0,0x6001E					# baud 9600, 1 stop bit, 8 bit, internal baud gen
02:000000000000097C FF3C000052186000	    62: 	stt mc0,ACIA_CTRL		# disable fifos (bit zero, one), reset fifos
02:0000000000000984 803C0C00D0FE
02:000000000000098A 231C000000      	    63: 	ret
                                    	    64: #	lda		COREID
                                    	    65: #sini1:
                                    	    66: #	cmpa	IOFocusID
                                    	    67: #	bne		sini1
                                    	    68: #	orcc	#$290						; mask off interrupts
                                    	    69: #	ldd		#ACIA_MMU				; map ACIA into address space
                                    	    70: #	std		MMU
02:000000000000098F 0418480000      	    71: 	ldi	mc0,0x09						#	dtr,rts active, rxint enabled (bit 1=0), no parity
02:0000000000000994 52184000803C0800	    72: 	stt mc0,ACIA_CMD
02:000000000000099C D0FE
02:000000000000099E 0418F00030      	    73: 	ldi	mc0,0x6001E					# baud 9600, 1 stop bit, 8 bit, internal baud gen
                                    	    74: #	ldi	mc0,0x08060011			# baud 57600, 1 stop bit, 8 bit, internal baud gen
02:00000000000009A3 52186000803C0C00	    75: 	stt mc0,ACIA_CTRL		# disable fifos (bit zero, one), reset fifos
02:00000000000009AB D0FE
                                    	    76: #	ldd		#$000F00				; map out ACIA
                                    	    77: #	std		MMU
02:00000000000009AD 231C000000      	    78: 	ret
                                    	    79: 
                                    	    80: #------------------------------------------------------------------------------
                                    	    81: # Calculate number of character in input buffer. Must be called with interrupts
                                    	    82: # disabled.
                                    	    83: #
                                    	    84: # Stack Space:
                                    	    85: #		none
                                    	    86: # Parameters:
                                    	    87: #		none
                                    	    88: # Modifies:
                                    	    89: #		mc0,mc1
                                    	    90: # Returns:
                                    	    91: #		a0 = number of bytes in buffer.
                                    	    92: #------------------------------------------------------------------------------
                                    	    93: 
                                    	    94: SerialRcvCount:
02:00000000000009B2 8F00000000      	    95: 	mov	a0,r0
02:00000000000009B7 FFFFFFFFFFFF3700	    96: 	ldtu mc0,SerTailRcv
02:00000000000009BF 0045180000E03C00
02:00000000000009C7 00FCFF
02:00000000000009CA C5182000E03C0400	    97: 	ldtu mc1,SerHeadRcv
02:00000000000009D2 FCFF
02:00000000000009D4 82008E1500      	    98: 	sub	a0,mc0,mc1
02:00000000000009D9 292200C0FE      	    99: 	bge	a0,r0,.srcXit
02:00000000000009DE 8400008000      	   100: 	ldi	a0,0x1000
02:00000000000009E3 C5182000E03C0400	   101: 	ldtu mc1,SerHeadRcv
02:00000000000009EB FCFF
02:00000000000009ED 45180000E03C0000	   102: 	ldtu mc0,SerTailRcv
02:00000000000009F5 FCFF
02:00000000000009F7 8220881500      	   103: 	sub	a0,a0,mc1
02:00000000000009FC FF3C000082208011	   104: 	add	a0,a0,mc0
02:0000000000000A04 00
                                    	   105: .srcXit:
02:0000000000000A05 231C000000      	   106: 	ret
                                    	   107: 
                                    	   108: #------------------------------------------------------------------------------
                                    	   109: # SerialGetChar
                                    	   110: #
                                    	   111: # Check the serial port buffer to see if there's a char available. If there's
                                    	   112: # a char available then return it. If the buffer is almost empty then send an
                                    	   113: # XON.
                                    	   114: #
                                    	   115: # Stack Space:
                                    	   116: #		3 words
                                    	   117: # Parameters:
                                    	   118: #		none
                                    	   119: # Modifies:
                                    	   120: #		none
                                    	   121: # Returns:
                                    	   122: #		a0 = character or -1
                                    	   123: #------------------------------------------------------------------------------
                                    	   124: 
                                    	   125: SerialGetChar:
02:0000000000000A0A B65C188001      	   126: 	push lr1,a1,a2
02:0000000000000A0F 8400400000      	   127: 	ldi	a0,8							# bit 3=machine interrupt enable, mask off interrupts
02:0000000000000A14 8721208061      	   128: 	csrrc	a2,a0,0x3004		# status reg
02:0000000000000A19 FFFFFFFFFF      	   129: 	nop
02:0000000000000A1E FFFFFFFFFF      	   130: 	nop
02:0000000000000A23 FFFFFFFFFF      	   131: 	nop
02:0000000000000A28 FFFFFFFFFF      	   132: 	nop
02:0000000000000A2D FFFFFFFFFF      	   133: 	nop
02:0000000000000A32 FFFFFFFFFF      	   134: 	nop
02:0000000000000A37 FFFFFFFFFF      	   135: 	nop
02:0000000000000A3C FF3C0000FFFFFFFF	   136: 	nop
02:0000000000000A44 FF
02:0000000000000A45 205CFBFFFF      	   137: 	bsr	SerialRcvCount			# check number of chars in receive buffer
02:0000000000000A4A A93A00B8FE3C0800	   138: 	bgt	a0,8,.sgc2
02:0000000000000A52 0000
02:0000000000000A54 C0008000E03C1000	   139: 	ldb	a0,SerRcvXon			# skip sending XON if already sent
02:0000000000000A5C FCFF
02:0000000000000A5E A8200000003C8F0A	   140: 	bnez a0,.sgc2        	# XON already sent?
02:0000000000000A66 0000
02:0000000000000A68 8400880000      	   141: 	ldi	a0,XON						# if <8 send an XON
02:0000000000000A6D 50008800E03C1100	   142: 	stb	r0,SerRcvXoff			# clear XOFF status
02:0000000000000A75 FCFF
02:0000000000000A77 FFFFFFFFFFFF3700	   143: 	stb	a0,SerRcvXon			# flag so we don't send it multiple times
02:0000000000000A7F 00D0008000E03C10
02:0000000000000A87 00FCFF
02:0000000000000A8A 201C070000      	   144: 	bsr	SerialPutChar
                                    	   145: .sgc2:
02:0000000000000A8F C5002000E03C0400	   146: 	ldtu a0,SerHeadRcv		# check if anything is in buffer
02:0000000000000A97 FCFF
02:0000000000000A99 45010000E03C0000	   147: 	ldtu a1,SerTailRcv
02:0000000000000AA1 FCFF
02:0000000000000AA3 282A10A8FE      	   148: 	beq	a0,a1,.sgcNoChars
02:0000000000000AA8 0F21000000      	   149: 	mov	a1,a0
02:0000000000000AAD C1400080E03C0010	   150: 	ldbu a0,SerRcvBuf[a1]	# get byte from buffer
02:0000000000000AB5 FCFF
02:0000000000000AB7 0441080000      	   151: 	add	a1,a1,1
02:0000000000000ABC FF3C00000841F87F	   152: 	and	a1,a1,0xfff				# 4k wrap around
02:0000000000000AC4 00
02:0000000000000AC5 52012000E03C0400	   153: 	stt	a1,SerHeadRcv
02:0000000000000ACD FCFF
02:0000000000000ACF 0760208021      	   154: 	csrrw	r0,a2,0x3004		# restore interrupts
02:0000000000000AD4 B75C188001      	   155: 	pop lr1,a1,a2
02:0000000000000AD9 231C000000      	   156: 	ret
                                    	   157: .sgcNoChars:
02:0000000000000ADE 8400F8FFFF      	   158: 	ldi	a0,-1							#-1
02:0000000000000AE3 0760208021      	   159: 	csrrw	r0,a2,0x3004		# restore interrupts
02:0000000000000AE8 B75C188001      	   160: 	pop lr1,a1,a2
02:0000000000000AED 231C000000      	   161: 	ret
                                    	   162: 
                                    	   163: #------------------------------------------------------------------------------
                                    	   164: # SerialPeekChar
                                    	   165: #
                                    	   166: # Check the serial port buffer to see if there's a char available. If there's
                                    	   167: # a char available then return it. But don't update the buffer indexes. No need
                                    	   168: # to send an XON here.
                                    	   169: #
                                    	   170: # Stack Space:
                                    	   171: #		none
                                    	   172: # Parameters:
                                    	   173: #		none
                                    	   174: # Modifies:
                                    	   175: #		mc0
                                    	   176: # Returns:
                                    	   177: #		a0 = character or -1
                                    	   178: #------------------------------------------------------------------------------
                                    	   179: 
                                    	   180: SerialPeekChar:
02:0000000000000AF2 FAFF3F0000      	   181: 	atom 077777							# temporarily mask interrupts
02:0000000000000AF7 FFFFFFFFFFFF3700	   182: 	ldtu a0,SerHeadRcv			# check if anything is in buffer
02:0000000000000AFF 00C5002000E03C04
02:0000000000000B07 00FCFF
02:0000000000000B0A 45180000E03C0000	   183: 	ldtu mc0,SerTailRcv
02:0000000000000B12 FCFF
02:0000000000000B14 282A8099FE      	   184: 	beq	a0,mc0,.spcNoChars		# no?
02:0000000000000B19 C1200080E03C0010	   185: 	ldbu a0,SerRcvBuf[a0]		# get byte from buffer
02:0000000000000B21 FCFF
02:0000000000000B23 231C000000      	   186: 	ret
                                    	   187: .spcNoChars:
02:0000000000000B28 8400F8FFFF      	   188: 	ldi	a0,-1
02:0000000000000B2D 231C000000      	   189: 	ret
                                    	   190: 
                                    	   191: #------------------------------------------------------------------------------
                                    	   192: # SerialPeekChar
                                    	   193: #		Get a character directly from the I/O port. This bypasses the input
                                    	   194: # buffer.
                                    	   195: #
                                    	   196: # Stack Space:
                                    	   197: #		none
                                    	   198: # Parameters:
                                    	   199: #		none
                                    	   200: # Modifies:
                                    	   201: #		a0
                                    	   202: # Returns:
                                    	   203: #		a0 = character or -1
                                    	   204: #------------------------------------------------------------------------------
                                    	   205: 
                                    	   206: SerialPeekCharDirect:
                                    	   207: #	lda		COREID					; Ensure we have the IO Focus
                                    	   208: #	cmpa	IOFocusID
                                    	   209: #	bne		spcd0001
                                    	   210: # Disallow interrupts between status read and rx read.
                                    	   211: #	orcc	#$290						; mask off interrupts
02:0000000000000B32 FAFF3F0000      	   212: 	atom 077777
02:0000000000000B37 FFFFFFFFFFFF3700	   213: 	ldbu.io	a0,ACIA_STAT
02:0000000000000B3F 00C1002000803C04
02:0000000000000B47 00D0FE
02:0000000000000B4A 2E280091FE      	   214: 	bbc	a0,3,.0001				# look for Rx not empty
02:0000000000000B4F C1000000803C0000	   215: 	ldbu.io	a0,ACIA_RX
02:0000000000000B57 D0FE
02:0000000000000B59 231C000000      	   216: 	ret
                                    	   217: .0001:
02:0000000000000B5E 8400F8FFFF      	   218: 	ldi	a0,-1
02:0000000000000B63 231C000000      	   219: 	ret
                                    	   220: 
                                    	   221: #------------------------------------------------------------------------------
                                    	   222: # SerialPutChar
                                    	   223: #    Put a character to the serial transmitter. This routine blocks until the
                                    	   224: # transmitter is empty. 
                                    	   225: #
                                    	   226: # Stack Space
                                    	   227: #		1 words
                                    	   228: # Parameters:
                                    	   229: #		a1 = character to put
                                    	   230: # Modifies:
                                    	   231: #		mc0
                                    	   232: #------------------------------------------------------------------------------
                                    	   233: 
                                    	   234: SerialPutChar:
                                    	   235: .0001:
                                    	   236: #	lda		COREID					; Ensure we have the IO Focus
                                    	   237: #	cmpa	IOFocusID
                                    	   238: #	bne		spc0001
02:0000000000000B68 FFFFFFFFFF      	   239: 	nop										# provide a window for an interrupt to occur
02:0000000000000B6D FFFFFFFFFF      	   240: 	nop
                                    	   241: 	# Between the status read and the transmit do not allow an
                                    	   242: 	# intervening interrupt.
02:0000000000000B72 FAFF000000      	   243: 	atom 0777
02:0000000000000B77 FFFFFFFFFFFF3700	   244: 	ldtu.io mc0,ACIA_STAT	# wait until the uart indicates tx empty
02:0000000000000B7F 0045182000803C04
02:0000000000000B87 00D0FE
02:0000000000000B8A 2E18868CFE      	   245: 	bbc	mc0,4,.0001				# branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000B8F 52010000803C0000	   246: 	stt.io a1,ACIA_TX			# send the byte
02:0000000000000B97 D0FE
02:0000000000000B99 231C000000      	   247: 	ret
                                    	   248: 
                                    	   249: #------------------------------------------------------------------------------
                                    	   250: # Serial IRQ routine
                                    	   251: #
                                    	   252: # Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                                    	   253: # Received characters are buffered. If the buffer becomes full, new characters
                                    	   254: # will be lost.
                                    	   255: #
                                    	   256: # Stack Space:
                                    	   257: #		1 word
                                    	   258: # Parameters:
                                    	   259: #		none
                                    	   260: # Modifies:
                                    	   261: #		d,x
                                    	   262: # Returns:
                                    	   263: #		none
                                    	   264: #------------------------------------------------------------------------------
                                    	   265: 
                                    	   266: SerialIRQ:
                                    	   267: #	lda		$2000+$D3				; Serial active interrupt flag
                                    	   268: #	beq		notSerInt
                                    	   269: .0002:
02:0000000000000B9E C4002000803C0400	   270: 	ldt.io a0,ACIA_STAT		# look for IRQs
02:0000000000000BA6 D0FE
02:0000000000000BA8 A93A008AFE      	   271: 	bgt	a0,r0,.0001				# quick test for any irqs
02:0000000000000BAD 2E38808AFE      	   272: 	bbc	a0,3,.0001				# check bit 3 = rx full (not empty)
02:0000000000000BB2 C1000000803C0000	   273: 	ldbu.io	a0,ACIA_RX		# get data from Rx buffer to clear interrupt
02:0000000000000BBA D0FE
02:0000000000000BBC FF3C000045010000	   274: 	ldtu a1,SerTailRcv		# check if recieve buffer full
02:0000000000000BC4 E03C0000FCFF
02:0000000000000BCA 0441080000      	   275: 	add	a1,a1,1
02:0000000000000BCF 0841F87F00      	   276: 	and	a1,a1,0xfff				# 4k Limit
02:0000000000000BD4 C5012000E03C0400	   277: 	ldtu a2,SerHeadRcv
02:0000000000000BDC FCFF
02:0000000000000BDE 28421882FE      	   278: 	beq	a1,a2,.0001				# ignore byte if buffer full
02:0000000000000BE3 52010000E03C0000	   279: 	stt	a1,SerTailRcv			# update tail pointer
02:0000000000000BEB FCFF
02:0000000000000BED 0441F8FFFF      	   280: 	sub	a1,a1,1						# backup
02:0000000000000BF2 0841F87F00      	   281: 	and	a1,a1,0xfff
02:0000000000000BF7 FFFFFFFFFFFF3700	   282: 	stb	a0,SerRcvBuf[a1]	# store recieved byte in buffer
02:0000000000000BFF 00D0400080E03C00
02:0000000000000C07 10FCFF
02:0000000000000C0A C1008800E03C1100	   283: 	ldbu a0,SerRcvXoff		# check if xoff already sent
02:0000000000000C12 FCFF
02:0000000000000C14 A838007AFE      	   284: 	bne	a0,r0,.0002
02:0000000000000C19 205CEDFFFF      	   285: 	bsr	SerialRcvCount		# if more than 4070 chars in buffer
02:0000000000000C1E 2939007AFE3CE60F	   286: 	blt	a0,4070,.0002
02:0000000000000C26 0000
02:0000000000000C28 8400980000      	   287: 	ldi	a0,XOFF						# send an XOFF
02:0000000000000C2D 50008000E03C1000	   288: 	stb	r0,SerRcvXon			# clear XON status
02:0000000000000C35 FCFF
02:0000000000000C37 FFFFFFFFFFFF3700	   289: 	stb	a0,SerRcvXoff			# set XOFF status
02:0000000000000C3F 00D0008800E03C11
02:0000000000000C47 00FCFF
02:0000000000000C4A D0000000803C0000	   290: 	stb.io a0,ACIA_TX
02:0000000000000C52 D0FE
02:0000000000000C54 20C0FAFFFF      	   291: 	bra	.0002     				# check the status for another byte
                                    	   292: 	# Process other serial IRQs
                                    	   293: .0001:
02:0000000000000C59 231C000000      	   294: 	ret
                                    	   295: 
                                    	   296: #------------------------------------------------------------------------------
                                    	   297: # Put a string to the serial port.
                                    	   298: #
                                    	   299: # Stack Space:
                                    	   300: #		none
                                    	   301: # Parameters:
                                    	   302: #		a0 = pointer to string
                                    	   303: # Modifies:
                                    	   304: #		mc0,mc1,mc2,mc3
                                    	   305: # Returns:
                                    	   306: #		none
                                    	   307: #------------------------------------------------------------------------------
                                    	   308: 
                                    	   309: SerialPutString:
02:0000000000000C5E 8F38000000      	   310: 	mov mc1,a0
02:0000000000000C63 0F59000000      	   311: 	mov mc2,a1
                                    	   312: .0002:
02:0000000000000C68 40210000003C0000	   313: 	ldb a1,[a0]
02:0000000000000C70 0000
02:0000000000000C72 284A0072FE      	   314: 	beq	a1,r0,.0003				# NULL terminator encountered?
02:0000000000000C77 8420080000      	   315: 	add	a0,a0,1
                                    	   316: 	# inline serial putchar, avoid stacks pushes and pops
                                    	   317: .0001:
02:0000000000000C7C FF3C0000FFFFFFFF	   318: 	nop										# provide a window for an interrupt to occur
02:0000000000000C84 FF
02:0000000000000C85 FFFFFFFFFF      	   319: 	nop
02:0000000000000C8A FFFFFFFFFF      	   320: 	nop
                                    	   321: 	# Between the status read and the transmit do not allow an
                                    	   322: 	# intervening interrupt.
02:0000000000000C8F FAFF000000      	   323: 	atom 0777
02:0000000000000C94 45182000803C0400	   324: 	ldtu mc0,ACIA_STAT		# wait until the uart indicates tx empty
02:0000000000000C9C D0FE
02:0000000000000C9E 2E00866EFE      	   325: 	bbc	mc0,4,.0001				# branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000CA3 52010000803C0000	   326: 	stt a1,ACIA_TX				# send the byte
02:0000000000000CAB D0FE
02:0000000000000CAD 2000FDFFFF      	   327: 	bra	.0002
                                    	   328: .0003:
02:0000000000000CB2 8F20060000      	   329: 	mov a0,mc1
02:0000000000000CB7 0F41060000      	   330: 	mov a1,mc2
02:0000000000000CBC FF3C0000231C0000	   331: 	ret
02:0000000000000CC4 00
                                    	   332: 
                                    	   333: #------------------------------------------------------------------------------
                                    	   334: # Put a buffer to the serial port.
                                    	   335: #
                                    	   336: # Stack Space:
                                    	   337: #		none
                                    	   338: # Parameters:
                                    	   339: #		a0 = pointer to buffer
                                    	   340: #		a1 = number of bytes
                                    	   341: # Modifies:
                                    	   342: #		mc0,mc1,mc2,mc3
                                    	   343: # Returns:
                                    	   344: #		none
                                    	   345: #------------------------------------------------------------------------------
                                    	   346: 
                                    	   347: SerialPutBuf:
02:0000000000000CC5 8F38000000      	   348: 	mov mc1,a0
02:0000000000000CCA 0F59000000      	   349: 	mov mc2,a1
                                    	   350: .0002:
02:0000000000000CCF A941006AFE      	   351: 	ble a1,r0,.0003				# end of buffer reached?
02:0000000000000CD4 0441F8FFFF      	   352: 	sub a1,a1,1
02:0000000000000CD9 C0390000003C0000	   353: 	ldb mc3,[a0]
02:0000000000000CE1 0000
02:0000000000000CE3 8420080000      	   354: 	add	a0,a0,1
                                    	   355: 	# inline serial putchar, avoid stacks pushes and pops
                                    	   356: .0001:
02:0000000000000CE8 FFFFFFFFFF      	   357: 	nop										# provide a window for an interrupt to occur
02:0000000000000CED FFFFFFFFFF      	   358: 	nop
                                    	   359: 	# Between the status read and the transmit do not allow an
                                    	   360: 	# intervening interrupt.
02:0000000000000CF2 FAFF000000      	   361: 	atom 0777
02:0000000000000CF7 FFFFFFFFFFFF3700	   362: 	ldtu mc0,ACIA_STAT		# wait until the uart indicates tx empty
02:0000000000000CFF 0045182000803C04
02:0000000000000D07 00D0FE
02:0000000000000D0A 2E18865DFE      	   363: 	bbc	mc0,4,.0001				# branch if transmitter is not empty, bit #4 of the status reg
02:0000000000000D0F D2190000803C0000	   364: 	stt mc3,ACIA_TX				# send the byte
02:0000000000000D17 D0FE
02:0000000000000D19 2060FCFFFF      	   365: 	bra	.0002
                                    	   366: .0003:
02:0000000000000D1E 8F20060000      	   367: 	mov a0,mc1
02:0000000000000D23 0F41060000      	   368: 	mov a1,mc2
02:0000000000000D28 231C000000      	   369: 	ret
                                    	   370: 
                                    	   371: #------------------------------------------------------------------------------
                                    	   372: #------------------------------------------------------------------------------
                                    	   373: 
                                    	   374: SerialTest:
                                    	   375: .0001:
02:0000000000000D2D 0401080200      	   376: 	ldi a1,'A'
02:0000000000000D32 201CF1FFFF      	   377: 	bsr SerialPutChar
02:0000000000000D37 2020FFFFFF      	   378: 	bra .0001
                                    	   379: 
                                    	   380: #------------------------------------------------------------------------------
                                    	   381: # Get a buffer from the serial port.
                                    	   382: #
                                    	   383: # Stack Space:
                                    	   384: #		none
                                    	   385: # Parameters:
                                    	   386: #		a0 = pointer to buffer
                                    	   387: #		a1 = number of bytes
                                    	   388: # Modifies:
                                    	   389: #		mc0,mc1,mc2,mc3,t0
                                    	   390: # Returns:
                                    	   391: #		none
                                    	   392: #------------------------------------------------------------------------------
                                    	   393: 
                                    	   394: SerialGetBufDirect:
02:0000000000000D3C FF3C00008F380000	   395: 	mov mc1,a0						# preserve a0,a1
02:0000000000000D44 00
02:0000000000000D45 0F59000000      	   396: 	mov mc2,a1
02:0000000000000D4A 8419000000      	   397: 	ldi mc3,0
                                    	   398: .0001:
02:0000000000000D4F FFFFFFFFFF      	   399: 	nop										# interrupt ramp
02:0000000000000D54 FFFFFFFFFF      	   400: 	nop
02:0000000000000D59 FFFFFFFFFF      	   401: 	nop
02:0000000000000D5E FAFF3F0000      	   402: 	atom 077777						# no interrupts for 5 instructions
02:0000000000000D63 7200FF0000      	   403: 	memdb
02:0000000000000D68 45182000803C0400	   404: 	ldtu mc0,ACIA_STAT		# check the status
02:0000000000000D70 D0FE
02:0000000000000D72 2E100655FE      	   405: 	bbc	mc0,3,.0001				# look for Rx not empty
02:0000000000000D77 7200FF0000      	   406: 	memdb
02:0000000000000D7C FF3C000045180000	   407: 	ldtu mc0,ACIA_RX			# grab the char from the port
02:0000000000000D84 803C0000D0FE
02:0000000000000D8A 7200FF0000      	   408: 	memdb
02:0000000000000D8F 50380000003C0000	   409: 	stb mc0,[a0]					# store in buffer
02:0000000000000D97 0000
02:0000000000000D99 5802264000      	   410: 	ror t0,mc0,4
02:0000000000000D9E 0882780000      	   411: 	and t0,t0,15
02:0000000000000DA3 0482800100      	   412: 	add t0,t0,'0'
02:0000000000000DA8 A9910048FE3C3900	   413: 	ble t0,'9',.0002
02:0000000000000DB0 0000
02:0000000000000DB2 0482380000      	   414: 	add t0,t0,7
                                    	   415: .0002:
02:0000000000000DB7 FFFFFFFFFFFF3700	   416: 	or t0,t0,0x43FFFFE0003F0000
02:0000000000000DBF 0009820000F83C00
02:0000000000000DC7 003F003CE0FFFF43
02:0000000000000DCF 53620600003C0000	   417: 	sto t0,txtscreen[mc3]
02:0000000000000DD7 C0FE
02:0000000000000DD9 8479460000      	   418: 	add mc3,mc3,8
02:0000000000000DDE 0F02060000      	   419: 	mov t0,mc0
02:0000000000000DE3 0882780000      	   420: 	and t0,t0,15
02:0000000000000DE8 0482800100      	   421: 	add t0,t0,'0'
02:0000000000000DED A9910040FE3C3900	   422: 	ble t0,'9',.0003
02:0000000000000DF5 0000
02:0000000000000DF7 0482380000      	   423: 	add t0,t0,7
                                    	   424: .0003:
02:0000000000000DFC FF3C000009820000	   425: 	or t0,t0,0x43FFFFE0003F0000
02:0000000000000E04 F83C00003F003CE0
02:0000000000000E0C FFFF43
02:0000000000000E0F 53620600003C0000	   426: 	sto t0,txtscreen[mc3]
02:0000000000000E17 C0FE
02:0000000000000E19 8479460000      	   427: 	add mc3,mc3,8
02:0000000000000E1E 04020001F83C2000	   428: 	ldi t0,0x43FFFFE0003F0020
02:0000000000000E26 3F003CE0FFFF43
02:0000000000000E2D 53620600003C0000	   429: 	sto t0,txtscreen[mc3]
02:0000000000000E35 C0FE
02:0000000000000E37 8479460000      	   430: 	add mc3,mc3,8
02:0000000000000E3C FF3C000084200800	   431: 	add a0,a0,1						# increment buffer pointer
02:0000000000000E44 00
02:0000000000000E45 0441F8FFFF      	   432: 	sub a1,a1,1						# and decrement buffer count
02:0000000000000E4A A8400028FE      	   433: 	bne a1,r0,.0001				# go back for another character
02:0000000000000E4F 8F20060000      	   434: 	mov a0,mc1
02:0000000000000E54 0F41060000      	   435: 	mov a1,mc2
02:0000000000000E59 2420000000      	   436: 	jmp [a0]
02:0000000000000E5E 231C000000      	   437: 	ret
                                    	   438: 
                                    	   439: 	.rodata
                                    	   440: nmeSerial:
03:0000000000000000 53657269616C    	   441: 	.byte "Serial",0
03:0000000000000006 00
                                    	   442: 
                                    	   443: .global SerialInit
                                    	   444: .global SerialPutString
                                    	   445: .global SerialPutBuf
                                    	   446: .global SerialTest
                                    	   447: 

Source: "boot.asm"
                                    	   581: 	.include "xmodem.asm"

Source: "xmodem.asm"
                                    	     1: # ============================================================================
                                    	     2: #        __
                                    	     3: #   \\__/ o\    (C) 2022-2023  Robert Finch, Waterloo
                                    	     4: #    \  __ /    All rights reserved.
                                    	     5: #     \/_//     robfinch<remove>@opencores.org
                                    	     6: #       ||
                                    	     7: #  
                                    	     8: #
                                    	     9: # BSD 3-Clause License
                                    	    10: # Redistribution and use in source and binary forms, with or without
                                    	    11: # modification, are permitted provided that the following conditions are met:
                                    	    12: #
                                    	    13: # 1. Redistributions of source code must retain the above copyright notice, this
                                    	    14: #    list of conditions and the following disclaimer.
                                    	    15: #
                                    	    16: # 2. Redistributions in binary form must reproduce the above copyright notice,
                                    	    17: #    this list of conditions and the following disclaimer in the documentation
                                    	    18: #    and/or other materials provided with the distribution.
                                    	    19: #
                                    	    20: # 3. Neither the name of the copyright holder nor the names of its
                                    	    21: #    contributors may be used to endorse or promote products derived from
                                    	    22: #    this software without specific prior written permission.
                                    	    23: #
                                    	    24: # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                                    	    25: # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                                    	    26: # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                    	    27: # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                                    	    28: # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                                    	    29: # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                                    	    30: # SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                                    	    31: # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                                    	    32: # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                                    	    33: # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                    	    34: #                                                                          
                                    	    35: # ============================================================================
                                    	    36: 
                                    	    37: 	.extern Delay3s
                                    	    38: 	.extern GetRange
                                    	    39: 	.extern SerialPutBuf
                                    	    40: #
                                    	    41: # Xmodem variables
                                    	    42: #
                                    	    43: .set SOH,1
                                    	    44: .set EOT,4
                                    	    45: .set ACK,6
                                    	    46: .set LF,10
                                    	    47: .set CR,13
                                    	    48: .set NAK,21
                                    	    49: .set ETB,23			# end of transfer block
                                    	    50: .set CAN,24
                                    	    51: .set xm_timer,0xFFFC0020
                                    	    52: .set xm_protocol,0xFFFC0028
                                    	    53: .set xm_flag,0xFFFC0029
                                    	    54: .set xm_checksum,0xFFFC0030
                                    	    55: .set xm_tmp2,0xFFFC0040
                                    	    56: .set xm_tmp,0xFFFC0048
                                    	    57: .set xm_packetnum,0xFFFC0050
                                    	    58: .set xm_crc,0xFFFC0058
                                    	    59: .set xm_ibuf,0xFFFC0080
                                    	    60: .set xm_obuf,0xFFFC0100
                                    	    61: 
                                    	    62: 	.text
                                    	    63: # ------------------------------------------------------------------------------
                                    	    64: # Send data using XModem.
                                    	    65: #
                                    	    66: # Parameters:
                                    	    67: #		a0 = buffer address
                                    	    68: #		a1 = last address
                                    	    69: # Register usage
                                    	    70: #		t2 = xm_flag
                                    	    71: #		t3 = xm_protocol
                                    	    72: #		t5 = xm_packetnum
                                    	    73: # ------------------------------------------------------------------------------
                                    	    74: 
                                    	    75: xm_SendStart:
02:0000000000000E63 B61C008000      	    76: 	push lr1
02:0000000000000E68 0F34000000      	    77: 	mov a3,a0							# a3 = buffer address
02:0000000000000E6D 8F54000000      	    78: 	mov a4,a1							# a4 = last address
02:0000000000000E72 8404080000      	    79: 	ldi	t5,1							# packet numbers start at one
                                    	    80: 	# Wait for receiver to send a NAK
                                    	    81: xm_send:							
02:0000000000000E77 205CDCFFFF      	    82: 	bsr SerialGetChar			# select blocking input
02:0000000000000E7C FF3C000028220030	    83: 	beq a0,NAK,xm_send5		# should have got a NAK
02:0000000000000E84 FE3C15000000
02:0000000000000E8A A838002CFE3C4300	    84: 	bne a0,'C',xm_send		# or a 'C'
02:0000000000000E92 0000
                                    	    85: xm_send5:
02:0000000000000E94 8F23000000      	    86: 	mov t3,a0
                                    	    87: xm_send4:
02:0000000000000E99 0401080000      	    88: 	ldi a1,SOH
02:0000000000000E9E 201CE7FFFF      	    89: 	bsr SerialPutChar			# send start
02:0000000000000EA3 0F21010000      	    90: 	mov a1,t5							# send packet number
02:0000000000000EA8 201CE7FFFF      	    91: 	bsr SerialPutChar
02:0000000000000EAD 0A41F8FFFF      	    92: 	xor a1,a1,-1					# one's complement
02:0000000000000EB2 201CE5FFFF      	    93: 	bsr SerialPutChar
02:0000000000000EB7 8F00050000      	    94: 	mov a0,a3							# a0 = buffer address
02:0000000000000EBC FF3C000004010004	    95: 	ldi a1,128						# a1 = byte count
02:0000000000000EC4 00
02:0000000000000EC5 203CF0FFFF      	    96: 	bsr SerialPutBuf			# copy buffer to serial port
02:0000000000000ECA A8E80020FE3C4300	    97: 	bne t3,'C',xm_send2		# CRC protocol?
02:0000000000000ED2 0000
02:0000000000000ED4 201C170000      	    98: 	bsr	xm_calc_crc				# compute CRC
02:0000000000000ED9 5821401000      	    99: 	lsr a1,a0,8						# transfer high eight bits first
02:0000000000000EDE 201CE5FFFF      	   100: 	bsr SerialPutChar
02:0000000000000EE3 2020010000      	   101: 	bra	xm_send3
                                    	   102: xm_send2:
02:0000000000000EE8 20DC120000      	   103: 	bsr	xm_calc_checksum
                                    	   104: xm_send3:
02:0000000000000EED 0F21000000      	   105: 	mov a1,a0							# transfer low eight bits
02:0000000000000EF2 201CE3FFFF      	   106: 	bsr SerialPutChar			# send low byte
02:0000000000000EF7 205CD8FFFF      	   107: 	bsr SerialGetChar			# block until input is present
02:0000000000000EFC FF3C0000A838001A	   108: 	bne a0,ACK,xm_send4		# not an ACK then resend the record
02:0000000000000F04 FE3C06000000
02:0000000000000F0A 8424090000      	   109: 	add t5,t5,1						# increment packet number
02:0000000000000F0F 0414050400      	   110: 	add a3,a3,128					# advance buffer pointer
02:0000000000000F14 28194D1BFE      	   111: 	bltu a3,a4,xm_send4		# go send next record
02:0000000000000F19 0401200000      	   112: 	ldi a1,EOT
02:0000000000000F1E 201CE3FFFF      	   113: 	bsr SerialPutChar			# send end of transmission
02:0000000000000F23 201CE3FFFF      	   114: 	bsr SerialPutChar			# send end of transmission
02:0000000000000F28 201CE3FFFF      	   115: 	bsr SerialPutChar			# send end of transmission
02:0000000000000F2D B71C008000      	   116: 	pop lr1
02:0000000000000F32 231C000000      	   117: 	ret
                                    	   118: 
                                    	   119: # ------------------------------------------------------------------------------
                                    	   120: # Get a byte, checking for a receive timeout.
                                    	   121: #
                                    	   122: # Returns:
                                    	   123: #		a0 = byte (0 to 255) or -1 if timed out
                                    	   124: # ------------------------------------------------------------------------------
                                    	   125: 
                                    	   126: xm_getbyte:
02:0000000000000F37 3601008000      	   127: 	push a1
                                    	   128: xm_gb1:
02:0000000000000F3C FF3C000046010001	   129: 	ldo a1,xm_timer
02:0000000000000F44 E03C2000FCFF
02:0000000000000F4A 2F489011FE      	   130: 	bbs a1,11,xm_gb2					# check the timeout - 2048 ticks (3 seconds approx.)
02:0000000000000F4F 205CDFFFFF      	   131: 	bsr SerialPeekCharDirect	# non-blocking, try and get a character
02:0000000000000F54 29210016FE      	   132: 	blt a0,r0,xm_gb1					# if no character, try again
                                    	   133: #	bsr	xm_outbyteAsHex
02:0000000000000F59 3701008000      	   134: 	pop a1
02:0000000000000F5E 231C000000      	   135: 	ret
                                    	   136: xm_gb2:
02:0000000000000F63 8400F8FFFF      	   137: 	ldi	a0,-1
02:0000000000000F68 3701008000      	   138: 	pop a1
02:0000000000000F6D 231C000000      	   139: 	ret
                                    	   140: 
                                    	   141: # ------------------------------------------------------------------------------
                                    	   142: # XModem Receive
                                    	   143: #
                                    	   144: # Register usage
                                    	   145: #		t2 = xm_flag
                                    	   146: #		t3 = xm_protocol
                                    	   147: #		t4 = xm_packetnum (last seen)
                                    	   148: #		t5 = xm_packetnum
                                    	   149: # Parameters:
                                    	   150: #		a0 = transfer address
                                    	   151: # Modifies:
                                    	   152: #		All
                                    	   153: #	Returns:
                                    	   154: #		none
                                    	   155: # ------------------------------------------------------------------------------
                                    	   156: 
                                    	   157: xm_ReceiveStart:
02:0000000000000F72 B61C008000      	   158: 	push lr1
02:0000000000000F77 FFFFFFFFFFFF3700	   159: 	ldi gp,0xffff0000
02:0000000000000F7F 00041E0000F83C00
02:0000000000000F87 00FFFF
02:0000000000000F8A 0F34000000      	   160: 	mov a3,a0					# a3 = transfer address
02:0000000000000F8F 20FC98FFFF      	   161: 	bsr	Delay3s				# give a little bit of time for sender
02:0000000000000F94 20FC98FFFF      	   162: 	bsr	Delay3s
02:0000000000000F99 20FC98FFFF      	   163: 	bsr	Delay3s
                                    	   164: #	ldx	mon_numwka+2	; X = transfer address
02:0000000000000F9E 0404000000      	   165: 	ldi t4,0					# packet num = 0
02:0000000000000FA3 8404000000      	   166: 	ldi t5,0
02:0000000000000FA8 8403180200      	   167: 	ldi t3,'C'				# try for CRC first
                                    	   168: xm_receive:
02:0000000000000FAD 8414100000      	   169: 	ldi	a4,2					# number of times to retry -1
                                    	   170: xm_rcv5:
02:0000000000000FB2 0FE1000000      	   171: 	mov	a1,t3					# indicate we want a transfer (send protocol byte)
02:0000000000000FB7 201CDDFFFF      	   172: 	bsr SerialPutChar
                                    	   173: xm_rcv4:
02:0000000000000FBC FF3C000053000001	   174: 	sto r0,xm_timer		# clear the timeout
02:0000000000000FC4 E03C2000FCFF
                                    	   175: xm_rcv1:
02:0000000000000FCA 207CFBFFFF      	   176: 	bsr	xm_getbyte
02:0000000000000FCF 29210012FE      	   177: 	blt a0,r0,xm_retry1	# timeout on protocol id?
02:0000000000000FD4 28220000FE3C0100	   178: 	beq a0,SOH,xm_SOH	# it should be start of a transfer
02:0000000000000FDC 0000
02:0000000000000FDE 28220008FE3C0400	   179: 	beq a0,EOT,xm_EOT	# or end of transfer (EOT)
02:0000000000000FE6 0000
02:0000000000000FE8 283A0004FE3C1800	   180: 	beq a0,CAN,xm_receive	# might be a cancel
02:0000000000000FF0 0000
02:0000000000000FF2 28220008FE3C1700	   181: 	beq a0,ETB,xm_EOT
02:0000000000000FFA 0000
                                    	   182: xm_rcv_nak:					# wasn't a valid start so
02:0000000000000FFC FF3C00000401A800	   183: 	ldi a1,NAK				# send a NAK
02:0000000000001004 00
02:0000000000001005 201CDBFFFF      	   184: 	bsr SerialPutChar	# and try again
02:000000000000100A 2080FDFFFF      	   185: 	bra	xm_rcv4
                                    	   186: xm_SOH:
02:000000000000100F 207CF9FFFF      	   187: 	bsr	xm_getbyte		# get packet number
02:0000000000001014 29390004FE      	   188: 	blt a0,r0,xm_rcv_to1
02:0000000000001019 8F24000000      	   189: 	mov t5,a0					# t5 = packet num
02:000000000000101E 8F21000000      	   190: 	mov a2,a0					# save it
02:0000000000001023 207CF9FFFF      	   191: 	bsr	xm_getbyte		# get complement of packet number
02:0000000000001028 29390004FE      	   192: 	blt a0,r0,xm_rcv_to2
02:000000000000102D 8220181000      	   193: 	add a0,a0,a2			# add the two values
02:0000000000001032 8820F80700      	   194: 	and a0,a0,0xff		# the sum should be $FF
02:0000000000001037 842008F8FF      	   195: 	sub a0,a0,0xff
02:000000000000103C FF3C00000F230000	   196: 	mov	t2,a0					# xm_flag, should be storing a zero if there is no error
02:0000000000001044 00
02:0000000000001045 8401000000      	   197: 	ldi a2,0					# a2 = payload byte counter
                                    	   198: xm_rcv2:
02:000000000000104A 207CF7FFFF      	   199: 	bsr	xm_getbyte
02:000000000000104F 292100FCFD      	   200: 	blt a0,r0,xm_rcv_to1
02:0000000000001054 D7001E0000      	   201: 	stb a0,[a3+a2]		# store the byte to memory
02:0000000000001059 8461080000      	   202: 	add a2,a2,1
02:000000000000105E 2E7008F5FD      	   203: 	bbc a2,7,xm_rcv2	# 128 bytes per payload
02:0000000000001063 207CF7FFFF      	   204: 	bsr	xm_getbyte		# get checksum or CRC byte
02:0000000000001068 292100FCFD      	   205: 	blt a0,r0,xm_rcv_to1
02:000000000000106D 8F22000000      	   206: 	mov	t1,a0					# stuff checksum/CRC byte
02:0000000000001072 A8E800F2FD3C4300	   207: 	bne t3,'C',xm_rcv_chksum	# check protocol
02:000000000000107A 0000
02:000000000000107C FF3C0000207CF5FF	   208: 	bsr	xm_getbyte		# get low order CRC byte
02:0000000000001084 FF
02:0000000000001085 292900F2FD      	   209: 	blt a0,r0,xm_rcv_to1
02:000000000000108A 08A1F80700      	   210: 	and a1,t1,0xff		# get the high byte
02:000000000000108F 5841400000      	   211: 	asl a1,a1,8
02:0000000000001094 0228100400      	   212: 	or s0,a0,a1				# combine high and low byte
02:0000000000001099 8F00050000      	   213: 	mov a0,a3					# buffer address
02:000000000000109E 0401000400      	   214: 	ldi a1,128				# number of bytes in buffer
02:00000000000010A3 201C090000      	   215: 	bsr	xm_calc_crc		# compute the CRC-16 for the received data
02:00000000000010A8 0F01020000      	   216: 	mov a1,s0					# and compare to received value
02:00000000000010AD 2020000000      	   217: 	bra	xm_rcv3
                                    	   218: xm_rcv_chksum:
02:00000000000010B2 8F00050000      	   219: 	mov a0,a3
02:00000000000010B7 20DC040000      	   220: 	bsr	xm_calc_checksum
02:00000000000010BC FF3C000008A1F807	   221: 	and a1,t1,0xff		# where we stuffed the byte
02:00000000000010C4 00
                                    	   222: xm_rcv3:
02:00000000000010C5 A83010E0FD      	   223: 	bne a0,a1,xm_rcv_nak	# if not the same, NAK
02:00000000000010CA 8FC0000000      	   224: 	mov a0,t2					# get back flag value
02:00000000000010CF A83000D8FD      	   225: 	bne	a0,r0,xm_rcv_nak	# bad packet number?
02:00000000000010D4 0401300000      	   226: 	ldi a1,ACK				# packet recieved okay, send back an ACK
02:00000000000010D9 201CD5FFFF      	   227: 	bsr SerialPutChar
02:00000000000010DE 280249DEFD      	   228: 	beq	t4,t5,xm_rcv4		# same packet received, dont update buffer pointer
02:00000000000010E3 0F24010000      	   229: 	mov t4,t5						# update last seen packet number
02:00000000000010E8 0414050400      	   230: 	add a3,a3,128				# increment buffer pointer
02:00000000000010ED 2080F7FFFF      	   231: 	bra	xm_rcv4					# and go back for next packet
                                    	   232: xm_rcv_to2:
                                    	   233: xm_rcv_to1:
02:00000000000010F2 CA803F00003C0700	   234: 	lda a0,msgXmTimeout[gp]
02:00000000000010FA 0000
02:00000000000010FC FF3C0000207CB7FF	   235: 	bsr DisplayString
02:0000000000001104 FF
02:0000000000001105 B71C008000      	   236: 	pop lr1
02:000000000000110A 231C000000      	   237: 	ret
                                    	   238: xm_EOT:								# end of transmission received, return
02:000000000000110F 0401300000      	   239: 	ldi a1,ACK
02:0000000000001114 201CD3FFFF      	   240: 	bsr SerialPutChar		# ACK the EOT
02:0000000000001119 B71C008000      	   241: 	pop lr1
02:000000000000111E 231C000000      	   242: 	ret
                                    	   243: xm_retry1:
02:0000000000001123 8434FDFFFF      	   244: 	sub a4,a4,1
02:0000000000001128 A92205D4FD      	   245: 	bgt a4,r0,xm_rcv5
                                    	   246: 	# are we already lowered down to checksum protocol?
02:000000000000112D 28E200D8FD3C1500	   247: 	beq t3,NAK,xm_noTransmitter		# did we try both checksum and CRC?
02:0000000000001135 0000
02:0000000000001137 8403A80000      	   248: 	ldi t3,NAK					# set protocol
02:000000000000113C FF3C00002020F3FF	   249: 	bra xm_receive
02:0000000000001144 FF
                                    	   250: xm_noTransmitter:
02:0000000000001145 CA80DF00003C1B00	   251: 	lda a0,msgXmNoTransmitter[gp]
02:000000000000114D 0000
02:000000000000114F 207CB5FFFF      	   252: 	bsr DisplayString
02:0000000000001154 B71C008000      	   253: 	pop lr1
02:0000000000001159 231C000000      	   254: 	ret
                                    	   255: 
                                    	   256: 	.rodata
                                    	   257: msgXmTimeout:
03:0000000000000007 586D6F64656D3A20	   258: 	.byte "Xmodem: timed out",CR,LF,0
03:000000000000000F 74696D6564206F75
03:0000000000000017 74
03:0000000000000018 0D
03:0000000000000019 0A
03:000000000000001A 00
                                    	   259: msgXmNoTransmitter:
03:000000000000001B 584D6F64656D3A20	   260: 	.byte "XModem: transmitter not responding",CR,LF,0
03:0000000000000023 7472616E736D6974
03:000000000000002B 746572206E6F7420
03:0000000000000033 726573706F6E6469
03:000000000000003B 6E67
03:000000000000003D 0D
03:000000000000003E 0A
03:000000000000003F 00
                                    	   261: 
                                    	   262: 	.text
                                    	   263: # ------------------------------------------------------------------------------
                                    	   264: # Calculate checksum value. The checksum is simply the low order eight bits of
                                    	   265: # the sum of all the bytes in the payload area.
                                    	   266: #
                                    	   267: # Stack space:
                                    	   268: #		two words
                                    	   269: #	Modifies:
                                    	   270: #		xm_checksum		contains the checksum value for the record
                                    	   271: # Parameters:
                                    	   272: #		a0 = buffer address
                                    	   273: #	Returns:
                                    	   274: #		a0 = checksum
                                    	   275: # ------------------------------------------------------------------------------
                                    	   276: 
                                    	   277: xm_calc_checksum:
02:000000000000115E 3661408101      	   278: 	push a1,a2,a3
02:0000000000001163 0401000000      	   279: 	ldi a1,0
02:0000000000001168 0414000000      	   280: 	ldi a3,0
                                    	   281: xm_cs1:
02:000000000000116D CF21800100      	   282: 	ldb a2,[a0+a3]
02:0000000000001172 04140D0000      	   283: 	add a3,a3,1
02:0000000000001177 0241181000      	   284: 	add a1,a1,a2
02:000000000000117C FF3C0000291905CC	   285: 	blt a3,128,xm_cs1
02:0000000000001184 FD3C80000000
02:000000000000118A 0841F80700      	   286: 	and a1,a1,0xff
02:000000000000118F 50018001E03C3000	   287: 	stb	a1,xm_checksum
02:0000000000001197 FCFF
02:0000000000001199 8F40000000      	   288: 	mov a0,a1
02:000000000000119E 3761408101      	   289: 	pop a1,a2,a3
02:00000000000011A3 231C000000      	   290: 	ret
                                    	   291: 
                                    	   292: # ------------------------------------------------------------------------------
                                    	   293: # Compute CRC-16 of buffer.
                                    	   294: #
                                    	   295: #int calcrc(char *ptr, int count)
                                    	   296: #{
                                    	   297: #    int  crc;
                                    	   298: #    char i;
                                    	   299: #    crc = 0;
                                    	   300: #    while (--count >= 0)
                                    	   301: #    {
                                    	   302: #        crc = crc ^ (int) (*ptr++ << 8);
                                    	   303: #        i = 8;
                                    	   304: #        do
                                    	   305: #        {
                                    	   306: #            if (crc & 0x8000)
                                    	   307: #                crc = crc << 1 ^ 0x1021;
                                    	   308: #            else
                                    	   309: #                crc = crc << 1;
                                    	   310: #        } while(--i);
                                    	   311: #    }
                                    	   312: #    return (crc);
                                    	   313: #}
                                    	   314: #
                                    	   315: # Modifies:
                                    	   316: #		xm_crc variable
                                    	   317: # Parameters:
                                    	   318: #		a0 = buffer address
                                    	   319: #		a1 = buffer length
                                    	   320: # Returns:
                                    	   321: #		a0 = crc
                                    	   322: # ------------------------------------------------------------------------------
                                    	   323: 
                                    	   324: xm_calc_crc:
02:00000000000011A8 B6014D5502      	   325: 	push a2,a3,a4,a5
02:00000000000011AD 8401000000      	   326: 	ldi a2,0					# crc = 0
02:00000000000011B2 0415000000      	   327: 	ldi	a5,0					# a5 = byte count
                                    	   328: xm_crc1:
02:00000000000011B7 4F34900100      	   329: 	ldbu a3,[a0+a5]		# get byte
02:00000000000011BC FF3C000058144500	   330: 	asl a3,a3,8
02:00000000000011C4 00
02:00000000000011C5 8261400900      	   331: 	xor a2,a2,a3			# crc = crc ^ tmp
02:00000000000011CA 8414000000      	   332: 	ldi a4,0					# iter count
                                    	   333: xm_crc4:
02:00000000000011CF D861080000      	   334: 	asl a2,a2,1
02:00000000000011D4 2E6818C0FD      	   335: 	bbc	a2,16,xm_crc3	# check for $10000, no?
02:00000000000011D9 8A61088100      	   336: 	xor a2,a2,0x1021	# and xor
                                    	   337: xm_crc3:
02:00000000000011DE 84340D0000      	   338: 	add a4,a4,1
02:00000000000011E3 293105C4FD3C0800	   339: 	blt a4,8,xm_crc4	# repeat eight times
02:00000000000011EB 0000
02:00000000000011ED 04550D0000      	   340: 	add a5,a5,1				# increment byte count
02:00000000000011F2 295915C4FD      	   341: 	blt a5,a1,xm_crc1
02:00000000000011F7 8860F8FF07      	   342: 	and a0,a2,0xffff	# we want only a 16-bit CRC
02:00000000000011FC FF3C0000D100C002	   343: 	stw a0,xm_crc
02:0000000000001204 E03C5800FCFF
02:000000000000120A B7014D5502      	   344: 	pop a2,a3,a4,a5
02:000000000000120F 231C000000      	   345: 	ret
                                    	   346: 
                                    	   347: #xm_outbyteAsHex:
                                    	   348: #	pshs	d
                                    	   349: #	ldd		CharOutVec						; get current char out vector
                                    	   350: #	pshs	d											; save it
                                    	   351: #	ldd		#ScreenDisplayChar		; set output vector to screen display
                                    	   352: #	std		CharOUtVec
                                    	   353: #	ldd		2,s										; get passed data
                                    	   354: #	lbsr	DispByteAsHex					; and display on-screen
                                    	   355: #	ldb		#' '
                                    	   356: #	lbsr	ScreenDisplayChar
                                    	   357: #	puls	d											; get back old char out vector
                                    	   358: #	std		CharOutVec						; and restore it
                                    	   359: #	puls	d											; restore input arguments
                                    	   360: #	rts
                                    	   361: 
                                    	   362: 	

Source: "boot.asm"
                                    	   582: 	.include "keyboard.asm"

Source: "keyboard.asm"
                                    	     1: #==============================================================================
                                    	     2: # Keyboard stuff
                                    	     3: #
                                    	     4: # KeyState2_
                                    	     5: # 876543210
                                    	     6: # ||||||||+ = shift
                                    	     7: # |||||||+- = alt
                                    	     8: # ||||||+-- = control
                                    	     9: # |||||+--- = numlock
                                    	    10: # ||||+---- = capslock
                                    	    11: # |||+----- = scrolllock
                                    	    12: # ||+------ =
                                    	    13: # |+------- = 
                                    	    14: # +-------- = extended
                                    	    15: #
                                    	    16: #==============================================================================
                                    	    17: 
                                    	    18: 	.set KEYBD,0xFEDC0000
                                    	    19: 	.set _KeyState1,0xFFFC0420
                                    	    20: 	.set _KeyState2,0xFFFC0421
                                    	    21: 	.set _KeybdEcho,0xFFFC0422
                                    	    22: 	.set KeybdWaitFlag,0xFFFC0423
                                    	    23: 	.set KeybdLEDs,0xFFFC0424
                                    	    24: 	.set SC_F12,7
                                    	    25: 	.set SC_C,0x21
                                    	    26: 	.set SC_T,0x2c
                                    	    27: 	.set SC_Z,0x1a
                                    	    28: 	.set SC_KEYUP,0xf0
                                    	    29: 	.set SC_EXTEND,0xE0
                                    	    30: 	.set SC_CTRL,0x14
                                    	    31: 	.set SC_RSHIFT,0x59
                                    	    32: 	.set SC_NUMLOCK,0x77
                                    	    33: 	.set SC_SCROLLLOCK,0x7E
                                    	    34: 	.set SC_CAPSLOCK,0x58
                                    	    35: 	.set SC_ALT,0x11
                                    	    36: 	.set SC_LSHIFT,0x12
                                    	    37: 	.set SC_DEL,0x71				# extend
                                    	    38: 	.set SC_LCTRL,0x58
                                    	    39: 	.set SC_TAB,0x0D
                                    	    40: 
                                    	    41: 	.text
                                    	    42: _KeybdInit:
02:0000000000001214 50000021E03C2004	    43: 	stb r0,_KeyState1
02:000000000000121C FCFF
02:000000000000121E 50000821E03C2104	    44: 	stb r0,_KeyState2
02:0000000000001226 FCFF
02:0000000000001228 231C000000      	    45: 	ret
                                    	    46: 
                                    	    47: _KeybdGetStatus:
02:000000000000122D 44012000E03C0400	    48: 	ldt.io a1,KEYBD+4
02:0000000000001235 DCFE
02:0000000000001237 231C000000      	    49: 	ret
                                    	    50: 
                                    	    51: # Get the scancode from the keyboard port
                                    	    52: 
                                    	    53: _KeybdGetScancode:
02:000000000000123C FF3C000004010000	    54: 	ldi a1,0
02:0000000000001244 00
02:0000000000001245 44010000E03C0000	    55: 	ldt.io a1,KEYBD				# get the scan code
02:000000000000124D DCFE
02:000000000000124F 52002000E03C0400	    56: 	stt.io r0,KEYBD+4			# clear receive register
02:0000000000001257 DCFE
02:0000000000001259 231C000000      	    57: 	ret
                                    	    58: 
                                    	    59: # Recieve a byte from the keyboard, used after a command is sent to the
                                    	    60: # keyboard in order to wait for a response.
                                    	    61: 
                                    	    62: KeybdRecvByte:
02:000000000000125E 3614008000      	    63: 	push a3
02:0000000000001263 0414200300      	    64: 	ldi a3,100					# wait up to 1s
                                    	    65: .0003:
02:0000000000001268 203CFFFFFF      	    66: 	bsr	_KeybdGetStatus	# wait for response from keyboard
02:000000000000126D 294100B0FD      	    67: 	blt a1,r0,.0004			# is input buffer full ? yes, branch
02:0000000000001272 20BC280000      	    68: 	bsr	Wait10ms				# wait a bit
02:0000000000001277 0414FDFFFF      	    69: 	sub a3,a3,1
02:000000000000127C FF3C0000A91A0DAC	    70: 	bgt a3,a0,.0003			# go back and try again
02:0000000000001284 FD
02:0000000000001285 3714008000      	    71: 	pop a3
02:000000000000128A 0401F8FFFF      	    72: 	ldi a1,-1
02:000000000000128F 231C000000      	    73: 	ret
                                    	    74: .0004:
02:0000000000001294 209CFDFFFF      	    75: 	bsr	_KeybdGetScancode
02:0000000000001299 3714008000      	    76: 	pop a3
02:000000000000129E 231C000000      	    77: 	ret
                                    	    78: 
                                    	    79: # Wait until the keyboard transmit is complete
                                    	    80: 
                                    	    81: KeybdWaitTx:
02:00000000000012A3 3614008000      	    82: 	push a3
02:00000000000012A8 0414200300      	    83: 	ldi a3,100		# wait a max of 1s
                                    	    84: .0001:
02:00000000000012AD 203CFDFFFF      	    85: 	bsr	_KeybdGetStatus
02:00000000000012B2 2F4888A8FD      	    86: 	bbs a1,6,.0002	# check for transmit complete bit
02:00000000000012B7 20BC260000      	    87: 	bsr	Wait10ms		# delay a little bit
02:00000000000012BC FF3C00000414FDFF	    88: 	sub a3,a3,1
02:00000000000012C4 FF
02:00000000000012C5 A91A05A4FD      	    89: 	bgt a3,r0,.0001	# go back and try again
02:00000000000012CA 3714008000      	    90: 	pop a3
02:00000000000012CF 0401F8FFFF      	    91: 	ldi a1,-1
02:00000000000012D4 231C000000      	    92: 	ret
                                    	    93: .0002:
02:00000000000012D9 3714008000      	    94: 	pop a3
02:00000000000012DE 0401000000      	    95: 	ldi a1,0
02:00000000000012E3 231C000000      	    96: 	ret
                                    	    97: 
                                    	    98: 
                                    	    99: #------------------------------------------------------------------------------
                                    	   100: # Get key pending status into a1
                                    	   101: #------------------------------------------------------------------------------
                                    	   102: 
                                    	   103: CheckForKey:
02:00000000000012E8 44012000E03C0400	   104: 	ldt.io a1,KEYBD+4
02:00000000000012F0 DCFE
02:00000000000012F2 5841381000      	   105: 	lsr a1,a1,7
02:00000000000012F7 0841080000      	   106: 	and a1,a1,1
02:00000000000012FC FF3C0000231C0000	   107: 	ret
02:0000000000001304 00
                                    	   108: 
                                    	   109: #------------------------------------------------------------------------------
                                    	   110: #------------------------------------------------------------------------------
                                    	   111: 
                                    	   112: GetKey:
02:0000000000001305 B660000001      	   113: 	push a0,a2
02:000000000000130A 207C020000      	   114: 	bsr	KeybdGetCharWait
02:000000000000130F C0011021E03C2204	   115: 	ldb a2,_KeybdEcho			# is keyboard echo on ?
02:0000000000001317 FCFF
02:0000000000001319 28720098FD      	   116: 	beq a2,r0,.0001
02:000000000000131E A8480098FD3C0D00	   117: 	bne a1,'\r',.0002
02:0000000000001326 0000
02:0000000000001328 201CA9FFFF      	   118: 	bsr CRLF							# convert CR keystroke into CRLF
                                    	   119: .0002:
02:000000000000132D 201C81FFFF      	   120: 	bsr DisplayChar
                                    	   121: .0001:
02:0000000000001332 B760000001      	   122: 	pop a0,a2
02:0000000000001337 231C000000      	   123: 	ret
                                    	   124: 
                                    	   125: 
                                    	   126: #------------------------------------------------------------------------------
                                    	   127: #------------------------------------------------------------------------------
                                    	   128: 
                                    	   129: KeybdGetCharNoWait:
02:000000000000133C FF3C000050001821	   130: 	stb r0,KeybdWaitFlag
02:0000000000001344 E03C2304FCFF
02:000000000000134A 20C0000000      	   131: 	bra	KeybdGetChar
                                    	   132: 
                                    	   133: KeybdGetCharWait:
02:000000000000134F 0401F8FFFF      	   134: 	ldi a1,-1
02:0000000000001354 50011821E03C2304	   135: 	stb a1,KeybdWaitFlag
02:000000000000135C FCFF
                                    	   136: 
                                    	   137: KeybdGetChar:
02:000000000000135E B600008000      	   138: 	push a0
                                    	   139: B0003:
02:0000000000001363 203CF7FFFF      	   140: 	bsr	_KeybdGetStatus			# check keyboard status for key available
02:0000000000001368 29410090FD      	   141: 	blt a1,r0,.0006					# yes, go process
02:000000000000136D 40011821E03C2304	   142: 	ldb a1,KeybdWaitFlag		# are we willing to wait for a key ?
02:0000000000001375 FCFF
02:0000000000001377 29590094FD      	   143: 	blt a1,r0,B0003					# yes, branch back
02:000000000000137C FF3C00000401F8FF	   144: 	ldi a1,-1								# flag no char available
02:0000000000001384 FF
02:0000000000001385 231C000000      	   145: 	ret
                                    	   146: .0006:
02:000000000000138A 209CF5FFFF      	   147: 	bsr	_KeybdGetScancode
                                    	   148: .0001:
02:000000000000138F 8400080000      	   149: 	ldi a0,1
02:0000000000001394 D20000F8FF3C00FF	   150: 	stt.io a0,leds
02:000000000000139C DFFE
02:000000000000139E 28420092FD3CF000	   151: 	beq a1,SC_KEYUP,doKeyup
02:00000000000013A6 0000
02:00000000000013A8 284A0092FD3CE000	   152: 	beq a1,SC_EXTEND,doExtend
02:00000000000013B0 0000
02:00000000000013B2 28420092FD3C1400	   153: 	beq a1,SC_CTRL,doCtrl
02:00000000000013BA 0000
02:00000000000013BC FF3C0000285A0098	   154: 	beq a1,SC_LSHIFT,doShift
02:00000000000013C4 FD3C12000000
02:00000000000013CA 285A0098FD3C5900	   155: 	beq a1,SC_RSHIFT,doShift
02:00000000000013D2 0000
02:00000000000013D4 285A009AFD3C7700	   156: 	beq a1,SC_NUMLOCK,doNumLock
02:00000000000013DC 0000
02:00000000000013DE 2852009AFD3C5800	   157: 	beq a1,SC_CAPSLOCK,doCapsLock
02:00000000000013E6 0000
02:00000000000013E8 285A009CFD3C7E00	   158: 	beq a1,SC_SCROLLLOCK,doScrollLock
02:00000000000013F0 0000
02:00000000000013F2 2842008CFD3C1100	   159: 	beq a1,SC_ALT,doAlt
02:00000000000013FA 0000
02:00000000000013FC FF3C0000C0000021	   160: 	ldb a0,_KeyState1			# check key up/down
02:0000000000001404 E03C2004FCFF
02:000000000000140A 50000021E03C2004	   161: 	stb r0,_KeyState1			# clear keyup status
02:0000000000001412 FCFF
02:0000000000001414 A820007AFD      	   162: 	bne a0,r0,B0003				# ignore key up
02:0000000000001419 2852008CFD3C0D00	   163: 	beq a1,SC_TAB,doTab
02:0000000000001421 0000
                                    	   164: B0013:
02:0000000000001423 C0000821E03C2104	   165: 	ldb a0,_KeyState2
02:000000000000142B FCFF
02:000000000000142D 292A0078FD      	   166: 	bge a0,r0,.0010				# is it extended code ?
02:0000000000001432 8820F80300      	   167: 	and a0,a0,0x7f				# clear extended bit
02:0000000000001437 FFFFFFFFFFFF3700	   168: 	stb a0,_KeyState2
02:000000000000143F 00D0000821E03C21
02:0000000000001447 04FCFF
02:000000000000144A 50000021E03C2004	   169: 	stb r0,_KeyState1			# clear keyup
02:0000000000001452 FCFF
02:0000000000001454 CA000016003CC002	   170: 	lda a0,_keybdExtendedCodes
02:000000000000145C 0000
02:000000000000145E 4F21100000      	   171: 	ldb a1,[a0+a1]
02:0000000000001463 2040020000      	   172: 	bra	.0008
                                    	   173: .0010:
02:0000000000001468 2E200071FD      	   174: 	bbc a0,2,.0009				# is it CTRL code ?
02:000000000000146D 0841F80300      	   175: 	and a1,a1,0x7f
02:0000000000001472 CA000012003C4002	   176: 	lda	a0,_keybdControlCodes
02:000000000000147A 0000
02:000000000000147C FF3C00004F211000	   177: 	ldb a1,[a0+a1]
02:0000000000001484 00
02:0000000000001485 2040020000      	   178: 	bra	.0008
                                    	   179: .0009:
02:000000000000148A 2E288068FD      	   180: 	bbc a0,0,.0007				# is it shift down ?
02:000000000000148F CA00000A003C4001	   181: 	lda	a0,_shiftedScanCodes
02:0000000000001497 0000
02:0000000000001499 4F21100000      	   182: 	ldb a1,[a0+a1]
02:000000000000149E 2040000000      	   183: 	bra	.0008
                                    	   184: .0007:
02:00000000000014A3 CA000002003C4000	   185: 	lda	a0,_unshiftedScanCodes
02:00000000000014AB 0000
02:00000000000014AD 4F21100000      	   186: 	ldb a1,[a0+a1]
02:00000000000014B2 8400101000      	   187: 	ldi a0,0x0202
02:00000000000014B7 FFFFFFFFFFFF3700	   188: 	stt.io a0,leds
02:00000000000014BF 00D20000F8FF3C00
02:00000000000014C7 FFDFFE
                                    	   189: .0008:
02:00000000000014CA 8400181800      	   190: 	ldi a0,0x0303
02:00000000000014CF D20000F8FF3C00FF	   191: 	stt.io a0,leds
02:00000000000014D7 DFFE
02:00000000000014D9 B700008000      	   192: 	pop a0
02:00000000000014DE 231C000000      	   193: 	ret
                                    	   194: doKeyup:
02:00000000000014E3 8400F8FFFF      	   195: 	ldi a0,-1
02:00000000000014E8 D0000021E03C2004	   196: 	stb a0,_KeyState1
02:00000000000014F0 FCFF
02:00000000000014F2 20E0F2FFFF      	   197: 	bra	B0003
                                    	   198: doExtend:
02:00000000000014F7 FFFFFFFFFFFF3700	   199: 	ldb a0,_KeyState2
02:00000000000014FF 00C0000821E03C21
02:0000000000001507 04FCFF
02:000000000000150A 8920000400      	   200: 	or a0,a0,0x80
02:000000000000150F D0000821E03C2104	   201: 	stb a0,_KeyState2
02:0000000000001517 FCFF
02:0000000000001519 20E0F2FFFF      	   202: 	bra	B0003
                                    	   203: doCtrl:
02:000000000000151E 40010021E03C2004	   204: 	ldb a1,_KeyState1
02:0000000000001526 FCFF
02:0000000000001528 50000021E03C2004	   205: 	stb r0,_KeyState1
02:0000000000001530 FCFF
02:0000000000001532 294A0058FD      	   206: 	bge a1,r0,.0004
02:0000000000001537 FFFFFFFFFFFF3700	   207: 	ldb a0,_KeyState2
02:000000000000153F 00C0000821E03C21
02:0000000000001547 04FCFF
02:000000000000154A 8820D80700      	   208: 	and a0,a0,0xfb
02:000000000000154F D0000821E03C2104	   209: 	stb a0,_KeyState2
02:0000000000001557 FCFF
02:0000000000001559 20E0F0FFFF      	   210: 	bra	B0003
                                    	   211: .0004:
02:000000000000155E C0000821E03C2104	   212: 	ldb a0,_KeyState2
02:0000000000001566 FCFF
02:0000000000001568 8920200000      	   213: 	or a0,a0,4
02:000000000000156D D0000821E03C2104	   214: 	stb a0,_KeyState2
02:0000000000001575 FCFF
02:0000000000001577 20E0EEFFFF      	   215: 	bra	B0003
                                    	   216: doAlt:
02:000000000000157C FF3C000040010021	   217: 	ldb a1,_KeyState1
02:0000000000001584 E03C2004FCFF
02:000000000000158A 50000021E03C2004	   218: 	stb r0,_KeyState1
02:0000000000001592 FCFF
02:0000000000001594 29520048FD      	   219: 	bge a1,r0,.0011
02:0000000000001599 C0000821E03C2104	   220: 	ldb a0,_KeyState2
02:00000000000015A1 FCFF
02:00000000000015A3 8820E80700      	   221: 	and a0,a0,0xfd
02:00000000000015A8 D0000821E03C2104	   222: 	stb a0,_KeyState2
02:00000000000015B0 FCFF
02:00000000000015B2 20E0ECFFFF      	   223: 	bra	B0003
                                    	   224: .0011:
02:00000000000015B7 FFFFFFFFFFFF3700	   225: 	ldb a0,_KeyState2
02:00000000000015BF 00C0000821E03C21
02:00000000000015C7 04FCFF
02:00000000000015CA 8920100000      	   226: 	or a0,a0,2
02:00000000000015CF D0000821E03C2104	   227: 	stb a0,_KeyState2
02:00000000000015D7 FCFF
02:00000000000015D9 20E0ECFFFF      	   228: 	bra	B0003
                                    	   229: doTab:
02:00000000000015DE 3601008000      	   230: 	push a1
02:00000000000015E3 40010821E03C2104	   231: 	ldb a1,_KeyState2
02:00000000000015EB FCFF
02:00000000000015ED 2E500040FD      	   232: 	bbc a1,0,.0012				# is ALT down ?
                                    	   233: #    	inc     _iof_switch
02:00000000000015F2 3701008000      	   234: 	pop a1
02:00000000000015F7 20E0EAFFFF      	   235:   bra B0003
                                    	   236: .0012:
02:00000000000015FC FF3C000037010080	   237: 	pop a1
02:0000000000001604 00
02:0000000000001605 20E0F0FFFF      	   238:   bra B0013
                                    	   239: doShift:
02:000000000000160A 40010021E03C2004	   240: 	ldb a1,_KeyState1
02:0000000000001612 FCFF
02:0000000000001614 50000021E03C2004	   241: 	stb r0,_KeyState1
02:000000000000161C FCFF
02:000000000000161E 29420038FD      	   242: 	bge a1,r0,.0005
02:0000000000001623 C0000821E03C2104	   243: 	ldb a0,_KeyState2
02:000000000000162B FCFF
02:000000000000162D 8820F00700      	   244: 	and a0,a0,0xfe
02:0000000000001632 D0000821E03C2104	   245: 	stb a0,_KeyState2
02:000000000000163A FCFF
02:000000000000163C FF3C000020E0E8FF	   246: 	bra	B0003
02:0000000000001644 FF
                                    	   247: .0005:
02:0000000000001645 C0000821E03C2104	   248: 	ldb a0,_KeyState2
02:000000000000164D FCFF
02:000000000000164F 8920080000      	   249: 	or a0,a0,1
02:0000000000001654 D0000821E03C2104	   250: 	stb a0,_KeyState2
02:000000000000165C FCFF
02:000000000000165E 20E0E8FFFF      	   251: 	bra	B0003
                                    	   252: doNumLock:
02:0000000000001663 C0000821E03C2104	   253: 	ldb a0,_KeyState2
02:000000000000166B FCFF
02:000000000000166D 8A20800000      	   254: 	xor a0,a0,16
02:0000000000001672 D0000821E03C2104	   255: 	stb a0,_KeyState2
02:000000000000167A FCFF
02:000000000000167C FF3C0000209C0200	   256: 	bsr	KeybdSetLEDStatus
02:0000000000001684 00
02:0000000000001685 20E0E6FFFF      	   257: 	bra	B0003
                                    	   258: doCapsLock:
02:000000000000168A C0000821E03C2104	   259: 	ldb a0,_KeyState2
02:0000000000001692 FCFF
02:0000000000001694 8A20000100      	   260: 	xor a0,a0,32
02:0000000000001699 D0000821E03C2104	   261: 	stb a0,_KeyState2
02:00000000000016A1 FCFF
02:00000000000016A3 209C000000      	   262: 	bsr	KeybdSetLEDStatus
02:00000000000016A8 20E0E4FFFF      	   263: 	bra	B0003
                                    	   264: doScrollLock:
02:00000000000016AD C0000821E03C2104	   265: 	ldb a0,_KeyState2
02:00000000000016B5 FCFF
02:00000000000016B7 8A20000200      	   266: 	xor a0,a0,64
02:00000000000016BC FF3C0000D0000821	   267: 	stb a0,_KeyState2
02:00000000000016C4 E03C2104FCFF
02:00000000000016CA 209C000000      	   268: 	bsr	KeybdSetLEDStatus
02:00000000000016CF 20E0E4FFFF      	   269: 	bra	B0003
                                    	   270: 
                                    	   271: KeybdSetLEDStatus:
02:00000000000016D4 B640000001      	   272: 	push a0,a1
02:00000000000016D9 50002021E03C2404	   273: 	stb r0,KeybdLEDs	
02:00000000000016E1 FCFF
02:00000000000016E3 C0000821E03C2104	   274: 	ldb a0,_KeyState2
02:00000000000016EB FCFF
02:00000000000016ED 2E200020FD      	   275: 	bbc a0,4,.0002
02:00000000000016F2 0401100000      	   276: 	ldi a1,2
02:00000000000016F7 FFFFFFFFFFFF3700	   277: 	stb a1,KeybdLEDs
02:00000000000016FF 0050012021E03C24
02:0000000000001707 04FCFF
                                    	   278: .0002:
02:000000000000170A 2E288819FD      	   279: 	bbc a0,5,.0003
02:000000000000170F 40012021E03C2404	   280: 	ldb a1,KeybdLEDs
02:0000000000001717 FCFF
02:0000000000001719 0941200000      	   281: 	or a1,a1,4
02:000000000000171E 50012021E03C2404	   282: 	stb a1,KeybdLEDs
02:0000000000001726 FCFF
                                    	   283: .0003:
02:0000000000001728 2E208819FD      	   284: 	bbc a0,6,.0004
02:000000000000172D 40012021E03C2404	   285: 	ldb a1,KeybdLEDs
02:0000000000001735 FCFF
02:0000000000001737 0941080000      	   286: 	or a1,a1,1
02:000000000000173C FF3C000050012021	   287: 	stb a1,KeybdLEDs
02:0000000000001744 E03C2404FCFF
                                    	   288: .0004:
02:000000000000174A 0401680700      	   289: 	ldi a1,0xED
02:000000000000174F 205C000000      	   290: 	bsr	KeybdSendByte
02:0000000000001754 20FCDAFFFF      	   291: 	bsr	KeybdWaitTx
02:0000000000001759 20DCD8FFFF      	   292: 	bsr	KeybdRecvByte
02:000000000000175E 29510010FD      	   293: 	blt a1,r0,.0001
                                    	   294: #		cmp		#$FA,d1
02:0000000000001763 40012021E03C2404	   295: 	ldb a1,KeybdLEDs
02:000000000000176B FCFF
02:000000000000176D 205C000000      	   296: 	bsr	KeybdSendByte
02:0000000000001772 20FCD8FFFF      	   297: 	bsr	KeybdWaitTx
02:0000000000001777 20DCD6FFFF      	   298: 	bsr	KeybdRecvByte
                                    	   299: .0001:
02:000000000000177C FF3C0000B7400000	   300: 	pop a0,a1
02:0000000000001784 01
02:0000000000001785 231C000000      	   301: 	ret
                                    	   302: 
                                    	   303: KeybdSendByte:
02:000000000000178A 52010000E03C0000	   304: 	stt.io a1,KEYBD
02:0000000000001792 DCFE
02:0000000000001794 231C000000      	   305: 	ret
                                    	   306: 	
                                    	   307: Wait10ms:
02:0000000000001799 B600008000      	   308: 	push a0
02:000000000000179E 8400401F00      	   309: 	ldi a0,1000
                                    	   310: .0001:
02:00000000000017A3 8220101400      	   311: 	sub a0,a0,a1
02:00000000000017A8 A93A000CFD      	   312: 	bgt a0,r0,.0001
02:00000000000017AD B700008000      	   313: 	pop a0
02:00000000000017B2 231C000000      	   314: 	ret
                                    	   315: 
                                    	   316: 
                                    	   317: 		.rodata
                                    	   318: #--------------------------------------------------------------------------
                                    	   319: # PS2 scan codes to ascii conversion tables.
                                    	   320: #--------------------------------------------------------------------------
                                    	   321: 
                                    	   322: _unshiftedScanCodes:
03:0000000000000040 2E              	   323: 	.byte	0x2e,0xa9,0x2e,0xa5,0xa3,0xa1,0xa2,0xac
03:0000000000000041 A9
03:0000000000000042 2E
03:0000000000000043 A5
03:0000000000000044 A3
03:0000000000000045 A1
03:0000000000000046 A2
03:0000000000000047 AC
03:0000000000000048 2E              	   324: 	.byte	0x2e,0xaa,0xa8,0xa6,0xa4,0x09,0x60,0x2e
03:0000000000000049 AA
03:000000000000004A A8
03:000000000000004B A6
03:000000000000004C A4
03:000000000000004D 09
03:000000000000004E 60
03:000000000000004F 2E
03:0000000000000050 2E              	   325: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x71,0x31,0x2e
03:0000000000000051 2E
03:0000000000000052 2E
03:0000000000000053 2E
03:0000000000000054 2E
03:0000000000000055 71
03:0000000000000056 31
03:0000000000000057 2E
03:0000000000000058 2E              	   326: 	.byte	0x2e,0x2e,0x7a,0x73,0x61,0x77,0x32,0x2e
03:0000000000000059 2E
03:000000000000005A 7A
03:000000000000005B 73
03:000000000000005C 61
03:000000000000005D 77
03:000000000000005E 32
03:000000000000005F 2E
03:0000000000000060 2E              	   327: 	.byte	0x2e,0x63,0x78,0x64,0x65,0x34,0x33,0x2e
03:0000000000000061 63
03:0000000000000062 78
03:0000000000000063 64
03:0000000000000064 65
03:0000000000000065 34
03:0000000000000066 33
03:0000000000000067 2E
03:0000000000000068 2E              	   328: 	.byte	0x2e,0x20,0x76,0x66,0x74,0x72,0x35,0x2e
03:0000000000000069 20
03:000000000000006A 76
03:000000000000006B 66
03:000000000000006C 74
03:000000000000006D 72
03:000000000000006E 35
03:000000000000006F 2E
03:0000000000000070 2E              	   329: 	.byte	0x2e,0x6e,0x62,0x68,0x67,0x79,0x36,0x2e
03:0000000000000071 6E
03:0000000000000072 62
03:0000000000000073 68
03:0000000000000074 67
03:0000000000000075 79
03:0000000000000076 36
03:0000000000000077 2E
03:0000000000000078 2E              	   330: 	.byte	0x2e,0x2e,0x6d,0x6a,0x75,0x37,0x38,0x2e
03:0000000000000079 2E
03:000000000000007A 6D
03:000000000000007B 6A
03:000000000000007C 75
03:000000000000007D 37
03:000000000000007E 38
03:000000000000007F 2E
03:0000000000000080 2E              	   331: 	.byte	0x2e,0x2c,0x6b,0x69,0x6f,0x30,0x39,0x2e
03:0000000000000081 2C
03:0000000000000082 6B
03:0000000000000083 69
03:0000000000000084 6F
03:0000000000000085 30
03:0000000000000086 39
03:0000000000000087 2E
03:0000000000000088 2E              	   332: 	.byte	0x2e,0x2e,0x2f,0x6c,0x3b,0x70,0x2d,0x2e
03:0000000000000089 2E
03:000000000000008A 2F
03:000000000000008B 6C
03:000000000000008C 3B
03:000000000000008D 70
03:000000000000008E 2D
03:000000000000008F 2E
03:0000000000000090 2E              	   333: 	.byte	0x2e,0x2e,0x27,0x2e,0x5b,0x3d,0x2e,0x2e
03:0000000000000091 2E
03:0000000000000092 27
03:0000000000000093 2E
03:0000000000000094 5B
03:0000000000000095 3D
03:0000000000000096 2E
03:0000000000000097 2E
03:0000000000000098 AD              	   334: 	.byte	0xad,0x2e,0x0d,0x5d,0x2e,0x5c,0x2e,0x2e
03:0000000000000099 2E
03:000000000000009A 0D
03:000000000000009B 5D
03:000000000000009C 2E
03:000000000000009D 5C
03:000000000000009E 2E
03:000000000000009F 2E
03:00000000000000A0 2E              	   335: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:00000000000000A1 2E
03:00000000000000A2 2E
03:00000000000000A3 2E
03:00000000000000A4 2E
03:00000000000000A5 2E
03:00000000000000A6 08
03:00000000000000A7 2E
03:00000000000000A8 2E              	   336: 	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
03:00000000000000A9 95
03:00000000000000AA 2E
03:00000000000000AB 93
03:00000000000000AC 94
03:00000000000000AD 2E
03:00000000000000AE 2E
03:00000000000000AF 2E
03:00000000000000B0 98              	   337: 	.byte	0x98,0x7f,0x92,0x2e,0x91,0x90,0x1b,0xaf
03:00000000000000B1 7F
03:00000000000000B2 92
03:00000000000000B3 2E
03:00000000000000B4 91
03:00000000000000B5 90
03:00000000000000B6 1B
03:00000000000000B7 AF
03:00000000000000B8 AB              	   338: 	.byte	0xab,0x2e,0x97,0x2e,0x2e,0x96,0xae,0x2e
03:00000000000000B9 2E
03:00000000000000BA 97
03:00000000000000BB 2E
03:00000000000000BC 2E
03:00000000000000BD 96
03:00000000000000BE AE
03:00000000000000BF 2E
                                    	   339: 
03:00000000000000C0 2E              	   340: 	.byte	0x2e,0x2e,0x2e,0xa7,0x2e,0x2e,0x2e,0x2e
03:00000000000000C1 2E
03:00000000000000C2 2E
03:00000000000000C3 A7
03:00000000000000C4 2E
03:00000000000000C5 2E
03:00000000000000C6 2E
03:00000000000000C7 2E
03:00000000000000C8 2E              	   341: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000C9 2E
03:00000000000000CA 2E
03:00000000000000CB 2E
03:00000000000000CC 2E
03:00000000000000CD 2E
03:00000000000000CE 2E
03:00000000000000CF 2E
03:00000000000000D0 2E              	   342: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000D1 2E
03:00000000000000D2 2E
03:00000000000000D3 2E
03:00000000000000D4 2E
03:00000000000000D5 2E
03:00000000000000D6 2E
03:00000000000000D7 2E
03:00000000000000D8 2E              	   343: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000D9 2E
03:00000000000000DA 2E
03:00000000000000DB 2E
03:00000000000000DC 2E
03:00000000000000DD 2E
03:00000000000000DE 2E
03:00000000000000DF 2E
03:00000000000000E0 2E              	   344: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000E1 2E
03:00000000000000E2 2E
03:00000000000000E3 2E
03:00000000000000E4 2E
03:00000000000000E5 2E
03:00000000000000E6 2E
03:00000000000000E7 2E
03:00000000000000E8 2E              	   345: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000E9 2E
03:00000000000000EA 2E
03:00000000000000EB 2E
03:00000000000000EC 2E
03:00000000000000ED 2E
03:00000000000000EE 2E
03:00000000000000EF 2E
03:00000000000000F0 2E              	   346: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000F1 2E
03:00000000000000F2 2E
03:00000000000000F3 2E
03:00000000000000F4 2E
03:00000000000000F5 2E
03:00000000000000F6 2E
03:00000000000000F7 2E
03:00000000000000F8 2E              	   347: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000000F9 2E
03:00000000000000FA 2E
03:00000000000000FB 2E
03:00000000000000FC 2E
03:00000000000000FD 2E
03:00000000000000FE 2E
03:00000000000000FF 2E
03:0000000000000100 2E              	   348: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000101 2E
03:0000000000000102 2E
03:0000000000000103 2E
03:0000000000000104 2E
03:0000000000000105 2E
03:0000000000000106 2E
03:0000000000000107 2E
03:0000000000000108 2E              	   349: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000109 2E
03:000000000000010A 2E
03:000000000000010B 2E
03:000000000000010C 2E
03:000000000000010D 2E
03:000000000000010E 2E
03:000000000000010F 2E
03:0000000000000110 2E              	   350: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000111 2E
03:0000000000000112 2E
03:0000000000000113 2E
03:0000000000000114 2E
03:0000000000000115 2E
03:0000000000000116 2E
03:0000000000000117 2E
03:0000000000000118 2E              	   351: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000119 2E
03:000000000000011A 2E
03:000000000000011B 2E
03:000000000000011C 2E
03:000000000000011D 2E
03:000000000000011E 2E
03:000000000000011F 2E
03:0000000000000120 2E              	   352: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000121 2E
03:0000000000000122 2E
03:0000000000000123 2E
03:0000000000000124 2E
03:0000000000000125 2E
03:0000000000000126 2E
03:0000000000000127 2E
03:0000000000000128 2E              	   353: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000129 2E
03:000000000000012A 2E
03:000000000000012B 2E
03:000000000000012C 2E
03:000000000000012D 2E
03:000000000000012E 2E
03:000000000000012F 2E
03:0000000000000130 2E              	   354: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000131 2E
03:0000000000000132 2E
03:0000000000000133 2E
03:0000000000000134 2E
03:0000000000000135 2E
03:0000000000000136 2E
03:0000000000000137 2E
03:0000000000000138 2E              	   355: 	.byte	0x2e,0x2e,0xfa,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000139 2E
03:000000000000013A FA
03:000000000000013B 2E
03:000000000000013C 2E
03:000000000000013D 2E
03:000000000000013E 2E
03:000000000000013F 2E
                                    	   356: 
                                    	   357: _shiftedScanCodes:
03:0000000000000140 2E              	   358: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000141 2E
03:0000000000000142 2E
03:0000000000000143 2E
03:0000000000000144 2E
03:0000000000000145 2E
03:0000000000000146 2E
03:0000000000000147 2E
03:0000000000000148 2E              	   359: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
03:0000000000000149 2E
03:000000000000014A 2E
03:000000000000014B 2E
03:000000000000014C 2E
03:000000000000014D 09
03:000000000000014E 7E
03:000000000000014F 2E
03:0000000000000150 2E              	   360: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x51,0x21,0x2e
03:0000000000000151 2E
03:0000000000000152 2E
03:0000000000000153 2E
03:0000000000000154 2E
03:0000000000000155 51
03:0000000000000156 21
03:0000000000000157 2E
03:0000000000000158 2E              	   361: 	.byte	0x2e,0x2e,0x5a,0x53,0x41,0x57,0x40,0x2e
03:0000000000000159 2E
03:000000000000015A 5A
03:000000000000015B 53
03:000000000000015C 41
03:000000000000015D 57
03:000000000000015E 40
03:000000000000015F 2E
03:0000000000000160 2E              	   362: 	.byte	0x2e,0x43,0x58,0x44,0x45,0x24,0x23,0x2e
03:0000000000000161 43
03:0000000000000162 58
03:0000000000000163 44
03:0000000000000164 45
03:0000000000000165 24
03:0000000000000166 23
03:0000000000000167 2E
03:0000000000000168 2E              	   363: 	.byte	0x2e,0x20,0x56,0x46,0x54,0x52,0x25,0x2e
03:0000000000000169 20
03:000000000000016A 56
03:000000000000016B 46
03:000000000000016C 54
03:000000000000016D 52
03:000000000000016E 25
03:000000000000016F 2E
03:0000000000000170 2E              	   364: 	.byte	0x2e,0x4e,0x42,0x48,0x47,0x59,0x5e,0x2e
03:0000000000000171 4E
03:0000000000000172 42
03:0000000000000173 48
03:0000000000000174 47
03:0000000000000175 59
03:0000000000000176 5E
03:0000000000000177 2E
03:0000000000000178 2E              	   365: 	.byte	0x2e,0x2e,0x4d,0x4a,0x55,0x26,0x2a,0x2e
03:0000000000000179 2E
03:000000000000017A 4D
03:000000000000017B 4A
03:000000000000017C 55
03:000000000000017D 26
03:000000000000017E 2A
03:000000000000017F 2E
03:0000000000000180 2E              	   366: 	.byte	0x2e,0x3c,0x4b,0x49,0x4f,0x29,0x28,0x2e
03:0000000000000181 3C
03:0000000000000182 4B
03:0000000000000183 49
03:0000000000000184 4F
03:0000000000000185 29
03:0000000000000186 28
03:0000000000000187 2E
03:0000000000000188 2E              	   367: 	.byte	0x2e,0x3e,0x3f,0x4c,0x3a,0x50,0x5f,0x2e
03:0000000000000189 3E
03:000000000000018A 3F
03:000000000000018B 4C
03:000000000000018C 3A
03:000000000000018D 50
03:000000000000018E 5F
03:000000000000018F 2E
03:0000000000000190 2E              	   368: 	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
03:0000000000000191 2E
03:0000000000000192 22
03:0000000000000193 2E
03:0000000000000194 7B
03:0000000000000195 2B
03:0000000000000196 2E
03:0000000000000197 2E
03:0000000000000198 2E              	   369: 	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
03:0000000000000199 2E
03:000000000000019A 0D
03:000000000000019B 7D
03:000000000000019C 2E
03:000000000000019D 7C
03:000000000000019E 2E
03:000000000000019F 2E
03:00000000000001A0 2E              	   370: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:00000000000001A1 2E
03:00000000000001A2 2E
03:00000000000001A3 2E
03:00000000000001A4 2E
03:00000000000001A5 2E
03:00000000000001A6 08
03:00000000000001A7 2E
03:00000000000001A8 2E              	   371: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001A9 2E
03:00000000000001AA 2E
03:00000000000001AB 2E
03:00000000000001AC 2E
03:00000000000001AD 2E
03:00000000000001AE 2E
03:00000000000001AF 2E
03:00000000000001B0 2E              	   372: 	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
03:00000000000001B1 7F
03:00000000000001B2 2E
03:00000000000001B3 2E
03:00000000000001B4 2E
03:00000000000001B5 2E
03:00000000000001B6 1B
03:00000000000001B7 2E
03:00000000000001B8 2E              	   373: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001B9 2E
03:00000000000001BA 2E
03:00000000000001BB 2E
03:00000000000001BC 2E
03:00000000000001BD 2E
03:00000000000001BE 2E
03:00000000000001BF 2E
                                    	   374: 
03:00000000000001C0 2E              	   375: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001C1 2E
03:00000000000001C2 2E
03:00000000000001C3 2E
03:00000000000001C4 2E
03:00000000000001C5 2E
03:00000000000001C6 2E
03:00000000000001C7 2E
03:00000000000001C8 2E              	   376: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001C9 2E
03:00000000000001CA 2E
03:00000000000001CB 2E
03:00000000000001CC 2E
03:00000000000001CD 2E
03:00000000000001CE 2E
03:00000000000001CF 2E
03:00000000000001D0 2E              	   377: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001D1 2E
03:00000000000001D2 2E
03:00000000000001D3 2E
03:00000000000001D4 2E
03:00000000000001D5 2E
03:00000000000001D6 2E
03:00000000000001D7 2E
03:00000000000001D8 2E              	   378: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001D9 2E
03:00000000000001DA 2E
03:00000000000001DB 2E
03:00000000000001DC 2E
03:00000000000001DD 2E
03:00000000000001DE 2E
03:00000000000001DF 2E
03:00000000000001E0 2E              	   379: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001E1 2E
03:00000000000001E2 2E
03:00000000000001E3 2E
03:00000000000001E4 2E
03:00000000000001E5 2E
03:00000000000001E6 2E
03:00000000000001E7 2E
03:00000000000001E8 2E              	   380: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001E9 2E
03:00000000000001EA 2E
03:00000000000001EB 2E
03:00000000000001EC 2E
03:00000000000001ED 2E
03:00000000000001EE 2E
03:00000000000001EF 2E
03:00000000000001F0 2E              	   381: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001F1 2E
03:00000000000001F2 2E
03:00000000000001F3 2E
03:00000000000001F4 2E
03:00000000000001F5 2E
03:00000000000001F6 2E
03:00000000000001F7 2E
03:00000000000001F8 2E              	   382: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000001F9 2E
03:00000000000001FA 2E
03:00000000000001FB 2E
03:00000000000001FC 2E
03:00000000000001FD 2E
03:00000000000001FE 2E
03:00000000000001FF 2E
03:0000000000000200 2E              	   383: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000201 2E
03:0000000000000202 2E
03:0000000000000203 2E
03:0000000000000204 2E
03:0000000000000205 2E
03:0000000000000206 2E
03:0000000000000207 2E
03:0000000000000208 2E              	   384: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000209 2E
03:000000000000020A 2E
03:000000000000020B 2E
03:000000000000020C 2E
03:000000000000020D 2E
03:000000000000020E 2E
03:000000000000020F 2E
03:0000000000000210 2E              	   385: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000211 2E
03:0000000000000212 2E
03:0000000000000213 2E
03:0000000000000214 2E
03:0000000000000215 2E
03:0000000000000216 2E
03:0000000000000217 2E
03:0000000000000218 2E              	   386: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000219 2E
03:000000000000021A 2E
03:000000000000021B 2E
03:000000000000021C 2E
03:000000000000021D 2E
03:000000000000021E 2E
03:000000000000021F 2E
03:0000000000000220 2E              	   387: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000221 2E
03:0000000000000222 2E
03:0000000000000223 2E
03:0000000000000224 2E
03:0000000000000225 2E
03:0000000000000226 2E
03:0000000000000227 2E
03:0000000000000228 2E              	   388: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000229 2E
03:000000000000022A 2E
03:000000000000022B 2E
03:000000000000022C 2E
03:000000000000022D 2E
03:000000000000022E 2E
03:000000000000022F 2E
03:0000000000000230 2E              	   389: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000231 2E
03:0000000000000232 2E
03:0000000000000233 2E
03:0000000000000234 2E
03:0000000000000235 2E
03:0000000000000236 2E
03:0000000000000237 2E
03:0000000000000238 2E              	   390: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000239 2E
03:000000000000023A 2E
03:000000000000023B 2E
03:000000000000023C 2E
03:000000000000023D 2E
03:000000000000023E 2E
03:000000000000023F 2E
                                    	   391: 
                                    	   392: # control
                                    	   393: _keybdControlCodes:
03:0000000000000240 2E              	   394: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000241 2E
03:0000000000000242 2E
03:0000000000000243 2E
03:0000000000000244 2E
03:0000000000000245 2E
03:0000000000000246 2E
03:0000000000000247 2E
03:0000000000000248 2E              	   395: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x09,0x7e,0x2e
03:0000000000000249 2E
03:000000000000024A 2E
03:000000000000024B 2E
03:000000000000024C 2E
03:000000000000024D 09
03:000000000000024E 7E
03:000000000000024F 2E
03:0000000000000250 2E              	   396: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x11,0x21,0x2e
03:0000000000000251 2E
03:0000000000000252 2E
03:0000000000000253 2E
03:0000000000000254 2E
03:0000000000000255 11
03:0000000000000256 21
03:0000000000000257 2E
03:0000000000000258 2E              	   397: 	.byte	0x2e,0x2e,0x1a,0x13,0x01,0x17,0x40,0x2e
03:0000000000000259 2E
03:000000000000025A 1A
03:000000000000025B 13
03:000000000000025C 01
03:000000000000025D 17
03:000000000000025E 40
03:000000000000025F 2E
03:0000000000000260 2E              	   398: 	.byte	0x2e,0x03,0x18,0x04,0x05,0x24,0x23,0x2e
03:0000000000000261 03
03:0000000000000262 18
03:0000000000000263 04
03:0000000000000264 05
03:0000000000000265 24
03:0000000000000266 23
03:0000000000000267 2E
03:0000000000000268 2E              	   399: 	.byte	0x2e,0x20,0x16,0x06,0x14,0x12,0x25,0x2e
03:0000000000000269 20
03:000000000000026A 16
03:000000000000026B 06
03:000000000000026C 14
03:000000000000026D 12
03:000000000000026E 25
03:000000000000026F 2E
03:0000000000000270 2E              	   400: 	.byte	0x2e,0x0e,0x02,0x08,0x07,0x19,0x5e,0x2e
03:0000000000000271 0E
03:0000000000000272 02
03:0000000000000273 08
03:0000000000000274 07
03:0000000000000275 19
03:0000000000000276 5E
03:0000000000000277 2E
03:0000000000000278 2E              	   401: 	.byte	0x2e,0x2e,0x0d,0x0a,0x15,0x26,0x2a,0x2e
03:0000000000000279 2E
03:000000000000027A 0D
03:000000000000027B 0A
03:000000000000027C 15
03:000000000000027D 26
03:000000000000027E 2A
03:000000000000027F 2E
03:0000000000000280 2E              	   402: 	.byte	0x2e,0x3c,0x0b,0x09,0x0f,0x29,0x28,0x2e
03:0000000000000281 3C
03:0000000000000282 0B
03:0000000000000283 09
03:0000000000000284 0F
03:0000000000000285 29
03:0000000000000286 28
03:0000000000000287 2E
03:0000000000000288 2E              	   403: 	.byte	0x2e,0x3e,0x3f,0x0c,0x3a,0x10,0x5f,0x2e
03:0000000000000289 3E
03:000000000000028A 3F
03:000000000000028B 0C
03:000000000000028C 3A
03:000000000000028D 10
03:000000000000028E 5F
03:000000000000028F 2E
03:0000000000000290 2E              	   404: 	.byte	0x2e,0x2e,0x22,0x2e,0x7b,0x2b,0x2e,0x2e
03:0000000000000291 2E
03:0000000000000292 22
03:0000000000000293 2E
03:0000000000000294 7B
03:0000000000000295 2B
03:0000000000000296 2E
03:0000000000000297 2E
03:0000000000000298 2E              	   405: 	.byte	0x2e,0x2e,0x0d,0x7d,0x2e,0x7c,0x2e,0x2e
03:0000000000000299 2E
03:000000000000029A 0D
03:000000000000029B 7D
03:000000000000029C 2E
03:000000000000029D 7C
03:000000000000029E 2E
03:000000000000029F 2E
03:00000000000002A0 2E              	   406: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x08,0x2e
03:00000000000002A1 2E
03:00000000000002A2 2E
03:00000000000002A3 2E
03:00000000000002A4 2E
03:00000000000002A5 2E
03:00000000000002A6 08
03:00000000000002A7 2E
03:00000000000002A8 2E              	   407: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002A9 2E
03:00000000000002AA 2E
03:00000000000002AB 2E
03:00000000000002AC 2E
03:00000000000002AD 2E
03:00000000000002AE 2E
03:00000000000002AF 2E
03:00000000000002B0 2E              	   408: 	.byte	0x2e,0x7f,0x2e,0x2e,0x2e,0x2e,0x1b,0x2e
03:00000000000002B1 7F
03:00000000000002B2 2E
03:00000000000002B3 2E
03:00000000000002B4 2E
03:00000000000002B5 2E
03:00000000000002B6 1B
03:00000000000002B7 2E
03:00000000000002B8 2E              	   409: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002B9 2E
03:00000000000002BA 2E
03:00000000000002BB 2E
03:00000000000002BC 2E
03:00000000000002BD 2E
03:00000000000002BE 2E
03:00000000000002BF 2E
                                    	   410: 
                                    	   411: _keybdExtendedCodes:
03:00000000000002C0 2E              	   412: 	.byte	0x2e,0x2e,0x2e,0x2e,0xa3,0xa1,0xa2,0x2e
03:00000000000002C1 2E
03:00000000000002C2 2E
03:00000000000002C3 2E
03:00000000000002C4 A3
03:00000000000002C5 A1
03:00000000000002C6 A2
03:00000000000002C7 2E
03:00000000000002C8 2E              	   413: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002C9 2E
03:00000000000002CA 2E
03:00000000000002CB 2E
03:00000000000002CC 2E
03:00000000000002CD 2E
03:00000000000002CE 2E
03:00000000000002CF 2E
03:00000000000002D0 2E              	   414: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002D1 2E
03:00000000000002D2 2E
03:00000000000002D3 2E
03:00000000000002D4 2E
03:00000000000002D5 2E
03:00000000000002D6 2E
03:00000000000002D7 2E
03:00000000000002D8 2E              	   415: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002D9 2E
03:00000000000002DA 2E
03:00000000000002DB 2E
03:00000000000002DC 2E
03:00000000000002DD 2E
03:00000000000002DE 2E
03:00000000000002DF 2E
03:00000000000002E0 2E              	   416: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002E1 2E
03:00000000000002E2 2E
03:00000000000002E3 2E
03:00000000000002E4 2E
03:00000000000002E5 2E
03:00000000000002E6 2E
03:00000000000002E7 2E
03:00000000000002E8 2E              	   417: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002E9 2E
03:00000000000002EA 2E
03:00000000000002EB 2E
03:00000000000002EC 2E
03:00000000000002ED 2E
03:00000000000002EE 2E
03:00000000000002EF 2E
03:00000000000002F0 2E              	   418: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002F1 2E
03:00000000000002F2 2E
03:00000000000002F3 2E
03:00000000000002F4 2E
03:00000000000002F5 2E
03:00000000000002F6 2E
03:00000000000002F7 2E
03:00000000000002F8 2E              	   419: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:00000000000002F9 2E
03:00000000000002FA 2E
03:00000000000002FB 2E
03:00000000000002FC 2E
03:00000000000002FD 2E
03:00000000000002FE 2E
03:00000000000002FF 2E
03:0000000000000300 2E              	   420: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000301 2E
03:0000000000000302 2E
03:0000000000000303 2E
03:0000000000000304 2E
03:0000000000000305 2E
03:0000000000000306 2E
03:0000000000000307 2E
03:0000000000000308 2E              	   421: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000309 2E
03:000000000000030A 2E
03:000000000000030B 2E
03:000000000000030C 2E
03:000000000000030D 2E
03:000000000000030E 2E
03:000000000000030F 2E
03:0000000000000310 2E              	   422: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000311 2E
03:0000000000000312 2E
03:0000000000000313 2E
03:0000000000000314 2E
03:0000000000000315 2E
03:0000000000000316 2E
03:0000000000000317 2E
03:0000000000000318 2E              	   423: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000319 2E
03:000000000000031A 2E
03:000000000000031B 2E
03:000000000000031C 2E
03:000000000000031D 2E
03:000000000000031E 2E
03:000000000000031F 2E
03:0000000000000320 2E              	   424: 	.byte	0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e,0x2e
03:0000000000000321 2E
03:0000000000000322 2E
03:0000000000000323 2E
03:0000000000000324 2E
03:0000000000000325 2E
03:0000000000000326 2E
03:0000000000000327 2E
03:0000000000000328 2E              	   425: 	.byte	0x2e,0x95,0x2e,0x93,0x94,0x2e,0x2e,0x2e
03:0000000000000329 95
03:000000000000032A 2E
03:000000000000032B 93
03:000000000000032C 94
03:000000000000032D 2E
03:000000000000032E 2E
03:000000000000032F 2E
03:0000000000000330 98              	   426: 	.byte	0x98,0x99,0x92,0x2e,0x91,0x90,0x2e,0x2e
03:0000000000000331 99
03:0000000000000332 92
03:0000000000000333 2E
03:0000000000000334 91
03:0000000000000335 90
03:0000000000000336 2E
03:0000000000000337 2E
03:0000000000000338 2E              	   427: 	.byte	0x2e,0x2e,0x97,0x2e,0x2e,0x96,0x2e,0x2e
03:0000000000000339 2E
03:000000000000033A 97
03:000000000000033B 2E
03:000000000000033C 2E
03:000000000000033D 96
03:000000000000033E 2E
03:000000000000033F 2E
                                    	   428: 
                                    	   429: 
                                    	   430: 

Source: "boot.asm"
                                    	   583: 	.include "Monitor.asm"

Source: "Monitor.asm"
                                    	     1: 	.set CmdBuf,0xFFFC0480
                                    	     2: 	.set CmdBufEnd,0xFFFC0500
                                    	     3: 	.text
                                    	     4: #==============================================================================
                                    	     5: #==============================================================================
                                    	     6: # Monitor
                                    	     7: #
                                    	     8: # Register Usage
                                    	     9: #		t0 = text pointer
                                    	    10: #==============================================================================
                                    	    11: #==============================================================================
                                    	    12: 
                                    	    13: StartMon:
                                    	    14: Monitor:
02:00000000000017B7 FFFFFFFFFFFF3700	    15: 	ldi sp,0xFFFCFFF0	# reset stack
02:00000000000017BF 00841F80FFE73CF0
02:00000000000017C7 FFFCFF
02:00000000000017CA 041E0000F83C0000	    16: 	ldi gp,0xFFFF0000	# and global pointer
02:00000000000017D2 FFFF
02:00000000000017D4 50001021E03C2204	    17: 	stb r0,_KeybdEcho	# turn off keyboard echo
02:00000000000017DC FCFF
                                    	    18: PromptLn:
02:00000000000017DE 201C83FFFF      	    19: 	bsr	CRLF
02:00000000000017E3 0401200100      	    20: 	ldi a1,'$'
02:00000000000017E8 201C5DFFFF      	    21: 	bsr	DisplayChar
                                    	    22: 
                                    	    23: # Get characters until a CR is keyed
                                    	    24: 
                                    	    25: Prompt3:
02:00000000000017ED 203CD8FFFF      	    26: 	bsr	GetKey
02:00000000000017F2 28420000FD3C0D00	    27: 	beq a1,CR,Prompt1
02:00000000000017FA 0000
02:00000000000017FC FF3C0000201C5BFF	    28: 	bsr	DisplayChar
02:0000000000001804 FF
02:0000000000001805 2020FFFFFF      	    29: 	bra	Prompt3
                                    	    30: 
                                    	    31: # Process the screen line that the CR was keyed on
                                    	    32: 
                                    	    33: Prompt1:
02:000000000000180A 50000820E03C0104	    34: 	stb r0,CursorCol		# go back to the start of the line
02:0000000000001812 FCFF
02:0000000000001814 205C56FFFF      	    35: 	bsr	CalcScreenLoc		# a0 = screen memory location
02:0000000000001819 0F22000000      	    36: 	mov t0,a0
02:000000000000181E 40810000003C0000	    37: 	ldb a1,[t0]
02:0000000000001826 0000
02:0000000000001828 0482080000      	    38: 	add t0,t0,1
02:000000000000182D A84000F8FC3C2400	    39: 	bne a1,'$',Prompt2	# skip over '$' prompt character
02:0000000000001835 0000
02:0000000000001837 FFFFFFFFFFFF3700	    40: 	ldb a1,[t0]
02:000000000000183F 0040810000003C00
02:0000000000001847 000000
02:000000000000184A 0482080000      	    41: 	add t0,t0,1
                                    	    42: 	
                                    	    43: # Dispatch based on command character
                                    	    44: 
                                    	    45: Prompt2:
02:000000000000184F A84000FAFC3C7800	    46: 	bne a1,'x',.0001
02:0000000000001857 0000
02:0000000000001859 40810000003C0000	    47: 	ldb a1,[t0]
02:0000000000001861 0000
02:0000000000001863 0482080000      	    48: 	add t0,t0,1
02:0000000000001868 A84000F0FC3C7200	    49: 	bne a1,'r',.0002		# 'r' - receive
02:0000000000001870 0000
02:0000000000001872 20BC240000      	    50: 	bsr	GetHexNumber				# Get the transfer address
02:0000000000001877 282A00EAFC      	    51: 	beq a0,r0,Monitor		# Make sure we got a value
02:000000000000187C FF3C00008F400000	    52: 	mov a0,a1
02:0000000000001884 00
02:0000000000001885 205CB7FFFF      	    53: 	bsr xm_ReceiveStart
02:000000000000188A 2060F9FFFF      	    54: 	bra Monitor
                                    	    55: .0002:
02:000000000000188F A85000E0FC3C7300	    56: 	bne a1,'s',Monitor	# 's' - send
02:0000000000001897 0000
02:0000000000001899 201C2B0000      	    57: 	bsr GetRange
02:000000000000189E 20FCAEFFFF      	    58: 	bsr xm_SendStart
02:00000000000018A3 2060F9FFFF      	    59: 	bra Monitor
                                    	    60: .0001:
02:00000000000018A8 28520004FD3C3A00	    61: 	beq a1,':',EditMem
02:00000000000018B0 0000
02:00000000000018B2 28420008FD3C6400	    62: 	beq a1,'d',DumpMem
02:00000000000018BA 0000
02:00000000000018BC FF3C0000285A00F2	    63: 	beq a1,'f',FillMem
02:00000000000018C4 FC3C66000000
02:00000000000018CA 28420012FD3C6C00	    64: 	beq a1,'l',LoadS19
02:00000000000018D2 0000
02:00000000000018D4 285A0004FD3C6A00	    65: 	beq a1,'j',ExecuteCode
02:00000000000018DC 0000
02:00000000000018DE 284A00E2FC3C3F00	    66: 	beq a1,'?',DisplayHelp
02:00000000000018E6 0000
02:00000000000018E8 285200E0FC3C6300	    67: 	beq a1,'c',TestCLS
02:00000000000018F0 0000
02:00000000000018F2 2060F7FFFF      	    68: 	bra Monitor
                                    	    69: 
                                    	    70: TestCLS:
02:00000000000018F7 FFFFFFFFFFFF3700	    71: 	ldb a1,[t0]
02:00000000000018FF 0040810000003C00
02:0000000000001907 000000
02:000000000000190A 0482080000      	    72: 	add t0,t0,1
02:000000000000190F A84000D4FC3C6C00	    73: 	bne a1,'l',Monitor
02:0000000000001917 0000
02:0000000000001919 40810000003C0000	    74: 	ldb a1,[t0]
02:0000000000001921 0000
02:0000000000001923 0482080000      	    75: 	add t0,t0,1
02:0000000000001928 A84000D4FC3C7300	    76: 	bne a1,'s',Monitor
02:0000000000001930 0000
02:0000000000001932 207C4CFFFF      	    77: 	bsr ClearScreen
02:0000000000001937 2060F5FFFF      	    78: 	bra Monitor
                                    	    79: 	
                                    	    80: DisplayHelp:
02:000000000000193C FF3C0000CA80071A	    81: 	lda	a0,HelpMsg[gp]
02:0000000000001944 003C40030000
02:000000000000194A 207C75FFFF      	    82: 	bsr	DisplayString
02:000000000000194F 2060F3FFFF      	    83: 	bra	Monitor
                                    	    84: 
                                    	    85: 	.rodata
                                    	    86: HelpMsg:
03:0000000000000340 3F203D2044697370	    87: 	.byte	"? = Display help",CR,LF
03:0000000000000348 6C61792068656C70
03:0000000000000350 0D
03:0000000000000351 0A
03:0000000000000352 434C53203D20636C	    88: 	.byte	"CLS = clear screen",CR,LF
03:000000000000035A 6561722073637265
03:0000000000000362 656E
03:0000000000000364 0D
03:0000000000000365 0A
03:0000000000000366 3A203D2045646974	    89: 	.byte	": = Edit memory bytes",CR,LF
03:000000000000036E 206D656D6F727920
03:0000000000000376 6279746573
03:000000000000037B 0D
03:000000000000037C 0A
03:000000000000037D 46203D2046696C6C	    90: 	.byte	"F = Fill memory",CR,LF
03:0000000000000385 206D656D6F7279
03:000000000000038C 0D
03:000000000000038D 0A
03:000000000000038E 4C203D204C6F6164	    91: 	.byte	"L = Load S19 file",CR,LF
03:0000000000000396 205331392066696C
03:000000000000039E 65
03:000000000000039F 0D
03:00000000000003A0 0A
03:00000000000003A1 44203D2044756D70	    92: 	.byte	"D = Dump memory",CR,LF
03:00000000000003A9 206D656D6F7279
03:00000000000003B0 0D
03:00000000000003B1 0A
03:00000000000003B2 42203D2073746172	    93: 	.byte	"B = start tiny basic",CR,LF
03:00000000000003BA 742074696E792062
03:00000000000003C2 61736963
03:00000000000003C6 0D
03:00000000000003C7 0A
03:00000000000003C8 4A203D204A756D70	    94: 	.byte	"J = Jump to code",CR,LF,0
03:00000000000003D0 20746F20636F6465
03:00000000000003D8 0D
03:00000000000003D9 0A
03:00000000000003DA 00
                                    	    95: 
                                    	    96: 	.text
                                    	    97: #------------------------------------------------------------------------------
                                    	    98: # This routine borrowed from Gordo's Tiny Basic interpreter.
                                    	    99: # Used to fetch a command line. (Not currently used).
                                    	   100: #
                                    	   101: # d0.b	- command prompt
                                    	   102: #------------------------------------------------------------------------------
                                    	   103: 
                                    	   104: GetCmdLine:
02:0000000000001954 B640288001      	   105: 	push a0,a1,t1
02:0000000000001959 201C51FFFF      	   106: 	bsr	DisplayChar		; display prompt
02:000000000000195E 0401000100      	   107: 	ldi a1,' '
02:0000000000001963 201C51FFFF      	   108: 	bsr	DisplayChar
02:0000000000001968 CA000024E03C8004	   109: 	lda	a0,CmdBuf
02:0000000000001970 FCFF
                                    	   110: .0001:
02:0000000000001972 203CCCFFFF      	   111: 	bsr	GetKey
02:0000000000001977 FFFFFFFFFFFF3700	   112: 	beq a1,CTRLH,.0003
02:000000000000197F 00284200D2FC3C08
02:0000000000001987 000000
02:000000000000198A 285A00D0FC3C1800	   113: 	beq a1,CTRLX,.0004
02:0000000000001992 0000
02:0000000000001994 284A00C8FC3C0D00	   114: 	beq a1,CR,.0002
02:000000000000199C 0000
02:000000000000199E 295900CCFC3C2000	   115: 	blt a1,' ',.0001
02:00000000000019A6 0000
                                    	   116: .0002:
02:00000000000019A8 50210000003C0000	   117: 	stb a1,[a0]
02:00000000000019B0 0000
02:00000000000019B2 8420080000      	   118: 	add a0,a0,1
02:00000000000019B7 201C4DFFFF      	   119: 	bsr	DisplayChar
02:00000000000019BC FF3C0000285A00CA	   120: 	beq a1,CR,.0007
02:00000000000019C4 FC3C0D000000
02:00000000000019CA 292100C4FC3CFF04	   121: 	blt a0,CmdBufEnd-1,.0001
02:00000000000019D2 FCFF
                                    	   122: .0003:
02:00000000000019D4 201C4DFFFF      	   123: 	bsr	DisplayChar
02:00000000000019D9 0401000100      	   124: 	ldi a1, ' '
02:00000000000019DE 201C4DFFFF      	   125: 	bsr	DisplayChar
02:00000000000019E3 A92100C4FC3C8004	   126: 	ble a0,CmdBuf,.0001
02:00000000000019EB FCFF
02:00000000000019ED 0401400000      	   127: 	ldi a1,CTRLH
02:00000000000019F2 201C4BFFFF      	   128: 	bsr	DisplayChar
02:00000000000019F7 8420F8FFFF      	   129: 	sub a0,a0,1
02:00000000000019FC FF3C00002040FBFF	   130: 	bra .0001
02:0000000000001A04 FF
                                    	   131: .0004:
02:0000000000001A05 282A00BAFC3C8004	   132: 	beq a0,CmdBuf,.0001		# if nothing in buffer
02:0000000000001A0D FCFF
02:0000000000001A0F 8422F8FFFF      	   133: 	sub t1,a0,1
                                    	   134: .0005:
02:0000000000001A14 0401400000      	   135: 	ldi a1,CTRLH
02:0000000000001A19 201C4BFFFF      	   136: 	bsr	DisplayChar
02:0000000000001A1E 0401000100      	   137: 	ldi a1, ' '
02:0000000000001A23 201C4BFFFF      	   138: 	bsr	DisplayChar
02:0000000000001A28 0401400000      	   139: 	ldi a1,CTRLH
02:0000000000001A2D 201C49FFFF      	   140: 	bsr	DisplayChar
02:0000000000001A32 84A2F8FFFF      	   141: 	sub t1,t1,1
02:0000000000001A37 29B200B4FC      	   142: 	bge t1,r0,.0005
                                    	   143: .0006:
02:0000000000001A3C FF3C0000CA000024	   144: 	lda a0,CmdBuf
02:0000000000001A44 E03C8004FCFF
02:0000000000001A4A 2040F9FFFF      	   145: 	bra	.0001
                                    	   146: .0007:
02:0000000000001A4F 0401500000      	   147: 	ldi a1,LF
02:0000000000001A54 201C49FFFF      	   148: 	bsr	DisplayChar
02:0000000000001A59 B740288001      	   149: 	pop a0,a1,t1
02:0000000000001A5E 231C000000      	   150: 	ret
                                    	   151: 
                                    	   152: 		
                                    	   153: #------------------------------------------------------------------------------
                                    	   154: # Fill memory
                                    	   155: # FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                                    	   156: # FW = fill wydes
                                    	   157: # FT = fill tetra
                                    	   158: # FO = fill octas
                                    	   159: # F = fill bytes
                                    	   160: #------------------------------------------------------------------------------
                                    	   161: 
                                    	   162: FillMem:
02:0000000000001A63 C0820000003C0000	   163: 	ldb t1,[t0]
02:0000000000001A6B 0000
02:0000000000001A6D 0482080000      	   164: 	add t0,t0,1
02:0000000000001A72 0FA4000000      	   165: 	mov t4,t1						# t4 = fill size
                                    	   166: 		#bsr		ScreenToAscii
02:0000000000001A77 20FC060000      	   167: 	bsr	ignBlanks
02:0000000000001A7C FF3C000020BC1400	   168: 	bsr	GetHexNumber
02:0000000000001A84 00
02:0000000000001A85 28320098FC      	   169: 	beq a0,r0,Monitor
02:0000000000001A8A 8F42000000      	   170: 	mov t1,a1						# t1 = start
02:0000000000001A8F 20FC060000      	   171: 	bsr	ignBlanks
02:0000000000001A94 20BC140000      	   172: 	bsr	GetHexNumber
02:0000000000001A99 28320090FC      	   173: 	beq a0,r0,Monitor
02:0000000000001A9E 8F43000000      	   174: 	mov t3,a1						# t3 = count	
02:0000000000001AA3 20FC060000      	   175: 	bsr	ignBlanks
02:0000000000001AA8 20BC120000      	   176: 	bsr	GetHexNumber		# fill value
02:0000000000001AAD 280A01A8FC3C4F00	   177: 	beq t4,'O',fmemO
02:0000000000001AB5 0000
02:0000000000001AB7 FFFFFFFFFFFF3700	   178: 	beq t4,'T',fmemT
02:0000000000001ABF 00281A01A8FC3C54
02:0000000000001AC7 000000
02:0000000000001ACA 280201AAFC3C5700	   179: 	beq t4,'W',fmemW
02:0000000000001AD2 0000
02:0000000000001AD4 281A01A0FC3C4200	   180: 	beq t4,'B',fmemB
02:0000000000001ADC 0000
02:0000000000001ADE 2020020000      	   181: 	bra fmemB
                                    	   182: fmemO:
02:0000000000001AE3 53A10000003C0000	   183: 	sto a1,[t1]
02:0000000000001AEB 0000
02:0000000000001AED 84A2400000      	   184: 	add t1,t1,8
02:0000000000001AF2 84E3F8FFFF      	   185: 	sub t3,t3,1
02:0000000000001AF7 A8FA00A4FC      	   186: 	bgtu t3,r0,fmemO
02:0000000000001AFC FF3C00002060E5FF	   187: 	bra	Monitor
02:0000000000001B04 FF
                                    	   188: fmemT:
02:0000000000001B05 52A10000003C0000	   189: 	stt a1,[t1]
02:0000000000001B0D 0000
02:0000000000001B0F 84A2200000      	   190: 	add t1,t1,4
02:0000000000001B14 84E3F8FFFF      	   191: 	sub t3,t3,1
02:0000000000001B19 A8EA009CFC      	   192: 	bgtu t3,r0,fmemT
02:0000000000001B1E 2060E5FFFF      	   193: 	bra	Monitor
                                    	   194: fmemW:
02:0000000000001B23 51A10000003C0000	   195: 	stw a1,[t1]
02:0000000000001B2B 0000
02:0000000000001B2D 84A2100000      	   196: 	add t1,t1,2
02:0000000000001B32 84E3F8FFFF      	   197: 	sub t3,t3,1
02:0000000000001B37 A8FA009CFC      	   198: 	bgtu t3,r0,fmemW
02:0000000000001B3C FF3C00002060E3FF	   199: 	bra	Monitor
02:0000000000001B44 FF
                                    	   200: fmemB:
02:0000000000001B45 50A10000003C0000	   201: 	stb a1,[t1]
02:0000000000001B4D 0000
02:0000000000001B4F 84A2080000      	   202: 	add t1,t1,1
02:0000000000001B54 84E3F8FFFF      	   203: 	sub t3,t3,1
02:0000000000001B59 A8EA0094FC      	   204: 	bgtu t3,r0,fmemB
02:0000000000001B5E 2060E3FFFF      	   205: 	bra	Monitor
                                    	   206: 
                                    	   207: #------------------------------------------------------------------------------
                                    	   208: # Ignore blank spaces in input
                                    	   209: #
                                    	   210: # Modifies:
                                    	   211: #		a0	- text pointer
                                    	   212: #------------------------------------------------------------------------------
                                    	   213: 
                                    	   214: ignBlanks:
02:0000000000001B63 3601008000      	   215: 	push a1
                                    	   216: .0001:
02:0000000000001B68 40810000003C0000	   217: 	ldb a1,[t0]
02:0000000000001B70 0000
02:0000000000001B72 0482080000      	   218: 	add t0,t0,1
02:0000000000001B77 FFFFFFFFFFFF3700	   219: 	beq a1,' ',.0001
02:0000000000001B7F 00285A0094FC3C20
02:0000000000001B87 000000
02:0000000000001B8A 0482F8FFFF      	   220: 	sub t0,t0,1
02:0000000000001B8F 3701008000      	   221: 	pop a1
02:0000000000001B94 231C000000      	   222: 	ret
                                    	   223: 
                                    	   224: #------------------------------------------------------------------------------
                                    	   225: # Edit memory byte.
                                    	   226: #------------------------------------------------------------------------------
                                    	   227: 
                                    	   228: EditMem:
02:0000000000001B99 20FCFEFFFF      	   229: 	bsr	ignBlanks
02:0000000000001B9E 20BC0A0000      	   230: 	bsr	GetHexNumber
02:0000000000001BA3 8F41000000      	   231: 	mov a2,a1
                                    	   232: edtmem1:
02:0000000000001BA8 20FCFCFFFF      	   233: 	bsr	ignBlanks
02:0000000000001BAD 20BC0A0000      	   234: 	bsr	GetHexNumber
02:0000000000001BB2 28320068FC      	   235: 	beq a0,r0,Monitor
02:0000000000001BB7 FFFFFFFFFFFF3700	   236: 	stb a1,[a2]
02:0000000000001BBF 0050610000003C00
02:0000000000001BC7 000000
02:0000000000001BCA 8461080000      	   237: 	add a2,a2,1
02:0000000000001BCF 20FCFCFFFF      	   238: 	bsr	ignBlanks
02:0000000000001BD4 20BC0A0000      	   239: 	bsr	GetHexNumber
02:0000000000001BD9 283A0064FC      	   240: 	beq a0,r0,Monitor
02:0000000000001BDE 50610000003C0000	   241: 	stb a1,[a2]
02:0000000000001BE6 0000
02:0000000000001BE8 8461080000      	   242: 	add a2,a2,1
02:0000000000001BED 20FCFAFFFF      	   243: 	bsr	ignBlanks
02:0000000000001BF2 20BC080000      	   244: 	bsr	GetHexNumber
02:0000000000001BF7 283A0064FC      	   245: 	beq a0,r0,Monitor
02:0000000000001BFC FF3C000050610000	   246: 	stb a1,[a2]
02:0000000000001C04 003C00000000
02:0000000000001C0A 8461080000      	   247: 	add a2,a2,1
02:0000000000001C0F 20FCFAFFFF      	   248: 	bsr	ignBlanks
02:0000000000001C14 20BC080000      	   249: 	bsr	GetHexNumber
02:0000000000001C19 2822005CFC      	   250: 	beq a0,r0,Monitor
02:0000000000001C1E 50610000003C0000	   251: 	stb a1,[a2]
02:0000000000001C26 0000
02:0000000000001C28 8461080000      	   252: 	add a2,a2,1
02:0000000000001C2D 20FCF8FFFF      	   253: 	bsr	ignBlanks
02:0000000000001C32 20BC060000      	   254: 	bsr	GetHexNumber
02:0000000000001C37 28220054FC      	   255: 	beq a0,r0,Monitor
02:0000000000001C3C FF3C000050610000	   256: 	stb a1,[a2]
02:0000000000001C44 003C00000000
02:0000000000001C4A 8461080000      	   257: 	add a2,a2,1
02:0000000000001C4F 20FCF8FFFF      	   258: 	bsr	ignBlanks
02:0000000000001C54 20BC060000      	   259: 	bsr	GetHexNumber
02:0000000000001C59 282A0052FC      	   260: 	beq a0,r0,Monitor
02:0000000000001C5E 50610000003C0000	   261: 	stb a1,[a2]
02:0000000000001C66 0000
02:0000000000001C68 8461080000      	   262: 	add a2,a2,1
02:0000000000001C6D 20FCF6FFFF      	   263: 	bsr	ignBlanks
02:0000000000001C72 20BC040000      	   264: 	bsr	GetHexNumber
02:0000000000001C77 282A004AFC      	   265: 	beq a0,r0,Monitor
02:0000000000001C7C FF3C000050610000	   266: 	stb a1,[a2]
02:0000000000001C84 003C00000000
02:0000000000001C8A 8461080000      	   267: 	add a2,a2,1
02:0000000000001C8F 20FCF6FFFF      	   268: 	bsr	ignBlanks
02:0000000000001C94 20BC040000      	   269: 	bsr	GetHexNumber
02:0000000000001C99 28320040FC      	   270: 	beq a0,r0,Monitor
02:0000000000001C9E 50610000003C0000	   271: 	stb a1,[a2]
02:0000000000001CA6 0000
02:0000000000001CA8 8461080000      	   272: 	add a2,a2,1
02:0000000000001CAD 2060D9FFFF      	   273: 	bra	Monitor
                                    	   274: 
                                    	   275: #------------------------------------------------------------------------------
                                    	   276: # Execute code at the specified address.
                                    	   277: #------------------------------------------------------------------------------
                                    	   278: 
                                    	   279: ExecuteCode:
02:0000000000001CB2 20FCF4FFFF      	   280: 	bsr	ignBlanks
02:0000000000001CB7 20BC020000      	   281: 	bsr	GetHexNumber
02:0000000000001CBC FF3C0000283A003C	   282: 	beq a0,r0,Monitor
02:0000000000001CC4 FC
02:0000000000001CC5 2440000000      	   283: 	jsr	[a1]
02:0000000000001CCA 2060D7FFFF      	   284: 	bra Monitor
                                    	   285: 
                                    	   286: #------------------------------------------------------------------------------
                                    	   287: # Do a memory dump of the requested location.
                                    	   288: #------------------------------------------------------------------------------
                                    	   289: 
                                    	   290: DumpMem:
02:0000000000001CCF 20FCF4FFFF      	   291: 	bsr	ignBlanks
02:0000000000001CD4 20BC020000      	   292: 	bsr	GetHexNumber
02:0000000000001CD9 283A003CFC      	   293: 	beq a0,r0,Monitor		# was there a number ? Digits > 0?
02:0000000000001CDE 8F41000000      	   294: 	mov a2,a1						# save off start of range
02:0000000000001CE3 20FCF4FFFF      	   295: 	bsr	ignBlanks
02:0000000000001CE8 20BC000000      	   296: 	bsr	GetHexNumber
02:0000000000001CED A8300060FC      	   297: 	bne a0,r0,DumpMem1	# was there a number ? Digits > 0?
02:0000000000001CF2 0474000200      	   298: 	add a3,a2,64				# no end specified, just dump 64 bytes
                                    	   299: DumpMem1:
02:0000000000001CF7 8F60000000      	   300: 	mov a0,a2
02:0000000000001CFC FF3C00000F010500	   301: 	mov a1,a3
02:0000000000001D04 00
02:0000000000001D05 201C59FFFF      	   302: 	bsr	CRLF
                                    	   303: .0001:
02:0000000000001D0A A8221034FC      	   304: 	bgtu a0,a1,Monitor
02:0000000000001D0F 20DC080000      	   305: 	bsr	DisplayMem
02:0000000000001D14 2040FEFFFF      	   306: 	bra	.0001
                                    	   307: 
                                    	   308: 
                                    	   309: #------------------------------------------------------------------------------
                                    	   310: # Get a hexidecimal number. Maximum of eight digits.
                                    	   311: #
                                    	   312: # Returns:
                                    	   313: #		a0 = number of digits
                                    	   314: #		a1 = value of number
                                    	   315: #------------------------------------------------------------------------------
                                    	   316: 
                                    	   317: GetHexNumber:
02:0000000000001D19 36A3000001      	   318: 	push t2,t1
02:0000000000001D1E 0403000000      	   319: 	ldi t2,0
02:0000000000001D23 8402000000      	   320: 	ldi t1,0							# number of digits
                                    	   321: .0002:
02:0000000000001D28 40810000003C0000	   322: 	ldb a1,[t0]
02:0000000000001D30 0000
02:0000000000001D32 0482080000      	   323: 	add t0,t0,1
02:0000000000001D37 20FC060000      	   324: 	bsr	AsciiToHexNybble
02:0000000000001D3C FF3C0000284A0058	   325: 	beq a1,0xff,.0001
02:0000000000001D44 FC3CFF000000
02:0000000000001D4A 58C3200000      	   326: 	asl t2,t2,4
02:0000000000001D4F 0841780000      	   327: 	and a1,a1,0xf
02:0000000000001D54 02C3100400      	   328: 	or t2,t2,a1
02:0000000000001D59 84A2080000      	   329: 	add t1,t1,1
02:0000000000001D5E 29B90054FC3C1000	   330: 	blt t1,16,.0002
02:0000000000001D66 0000
                                    	   331: .0001:
02:0000000000001D68 0FC1000000      	   332: 	mov a1,t2
02:0000000000001D6D 8FA0000000      	   333: 	mov a0,t1
02:0000000000001D72 37A3000001      	   334: 	pop t2,t1
02:0000000000001D77 231C000000      	   335: 	ret
                                    	   336: 
                                    	   337: #------------------------------------------------------------------------------
                                    	   338: # Get a decimal number. Maximum of 20 digits.
                                    	   339: #
                                    	   340: # Returns:
                                    	   341: #		a0 = number of digits
                                    	   342: #		a1 = value of number
                                    	   343: #------------------------------------------------------------------------------
                                    	   344: 
                                    	   345: GetDecNumber:
02:0000000000001D7C FF3C000036A30000	   346: 	push t2,t1
02:0000000000001D84 01
02:0000000000001D85 0403000000      	   347: 	ldi t2,0
02:0000000000001D8A 8402000000      	   348: 	ldi t1,0							# number of digits
                                    	   349: .0002:
02:0000000000001D8F 40810000003C0000	   350: 	ldb a1,[t0]
02:0000000000001D97 0000
02:0000000000001D99 0482080000      	   351: 	add t0,t0,1
02:0000000000001D9E 29410048FC3C3000	   352: 	blt a1,'0',.0001
02:0000000000001DA6 0000
02:0000000000001DA8 A9420048FC3C3900	   353: 	bgt a1,'9',.0001
02:0000000000001DB0 0000
02:0000000000001DB2 044180FEFF      	   354: 	sub a1,a1,'0'
02:0000000000001DB7 06C3500000      	   355: 	mul t2,t2,10
02:0000000000001DBC FF3C000002C31010	   356: 	add t2,t2,a1
02:0000000000001DC4 00
02:0000000000001DC5 84A2080000      	   357: 	add t1,t1,1
02:0000000000001DCA 29B10044FC3C1800	   358: 	blt t1,24,.0002
02:0000000000001DD2 0000
                                    	   359: .0001:
02:0000000000001DD4 0FC1000000      	   360: 	mov a1,t2
02:0000000000001DD9 8FA0000000      	   361: 	mov a0,t1
02:0000000000001DDE 37A3000001      	   362: 	pop t2,t1
02:0000000000001DE3 231C000000      	   363: 	ret
                                    	   364: 
                                    	   365: #------------------------------------------------------------------------------
                                    	   366: # Returns:
                                    	   367: #		a0 = start of range
                                    	   368: #		a1 = end of range
                                    	   369: #------------------------------------------------------------------------------
                                    	   370: 
                                    	   371: GetRange:
02:0000000000001DE8 B61C008000      	   372: 	push lr1
02:0000000000001DED 20FCEAFFFF      	   373: 	bsr ignBlanks
02:0000000000001DF2 20BCF8FFFF      	   374: 	bsr GetHexNumber
02:0000000000001DF7 3601008000      	   375: 	push a1
02:0000000000001DFC FF3C000020FCEAFF	   376: 	bsr ignBlanks
02:0000000000001E04 FF
02:0000000000001E05 20BCF8FFFF      	   377: 	bsr GetHexNumber
02:0000000000001E0A B700008000      	   378: 	pop a0
02:0000000000001E0F B71C008000      	   379: 	pop lr1
02:0000000000001E14 231C000000      	   380: 	ret
                                    	   381: 
                                    	   382: LoadS19:
02:0000000000001E19 231C000000      	   383: 	ret
                                    	   384: 
                                    	   385: DisplayMem:
02:0000000000001E1E 231C000000      	   386: 	ret
                                    	   387: 
                                    	   388: AsciiToHexNybble:
02:0000000000001E23 231C000000      	   389: 	ret
                                    	   390: 
                                    	   391: 	.global GetRange
                                    	   392: 

Source: "boot.asm"
                                    	   584: #	.include "ramtest.asm"
                                    	   585: 
                                    	   586: 	.balign	0x100,0xff
                                    	   587: 	
                                    	   588: 	.rodata
                                    	   589: msgStart:
03:00000000000003DB 54686F7232303234	   590: 	.byte "Thor2024 System Starting.",0
03:00000000000003E3 2053797374656D20
03:00000000000003EB 5374617274696E67
03:00000000000003F3 2E
03:00000000000003F4 00
                                    	   591: 
03:00000000000003F5 00              	   592: 	.org 0xffe0
03:00000000000003F6 *
                                    	   593: 	# initial machine stack pointer
03:000000000000FFE0 F0FFFCFFFFFFFFFF	   594: 	.8byte	0xFFFFFFFFFFFCFFF0
03:000000000000FFE8 FFFFFFFFFFFFFFFF	   595: 	.8byte	0xFFFFFFFFFFFFFFFF
                                    	   596: 	# initial program counter
03:000000000000FFF0 0000FDFFFFFFFFFF	   597: 	.8byte	0xFFFFFFFFFFFD0000
03:000000000000FFF8 FFFFFFFFFFFFFFFF	   598: 	.8byte	0xFFFFFFFFFFFFFFFF
                                    	   599: 
                                    	   600: 	.global Delay3s
                                    	   601: 	.global Delay
                                    	   602: 


Symbols by name:
.clrpgtbl                       02:000000000000001E
.sgc2                           02:0000000000000A8F
.sgcNoChars                     02:0000000000000ADE
.spcNoChars                     02:0000000000000B28
.srcXit                         02:0000000000000A05
.st2                            02:00000000000001E8
ACIA_CMD                         S:00000000FED00008
ACIA_CTRL                        S:00000000FED0000C
ACIA_RX                          S:00000000FED00000
ACIA_STAT                        S:00000000FED00004
ACIA_TX                          S:00000000FED00000
ACK                              S:0000000000000006
AsciiToHexNybble                02:0000000000001E23
B0003                           02:0000000000001363
B0013                           02:0000000000001423
BlankLastLine                   02:000000000000075E
CAN                              S:0000000000000018
CR                               S:000000000000000D
CRLF                            02:0000000000000828
CTRLH                            S:0000000000000008
CTRLX                            S:0000000000000018
CalcScreenLoc                   02:000000000000030A
CheckForKey                     02:00000000000012E8
ClearScreen                     02:00000000000002CF
CmdBuf                           S:00000000FFFC0480
CmdBufEnd                        S:00000000FFFC0500
CursorCol                        S:00000000FFFC0401
CursorRow                        S:00000000FFFC0400
Delay                           02:00000000000002AD EXP
Delay3s                         02:00000000000002A3 EXP
DisplayByte                     02:000000000000087C
DisplayChar                     02:0000000000000368
DisplayHelp                     02:000000000000193C
DisplayMem                      02:0000000000001E1E
DisplayNybble                   02:000000000000084F
DisplayOcta                     02:00000000000008ED
DisplayString                   02:00000000000007F7
DisplayTetra                    02:00000000000008CA
DisplayWyde                     02:00000000000008A3
DumpMem                         02:0000000000001CCF
DumpMem1                        02:0000000000001CF7
EOT                              S:0000000000000004
ETB                              S:0000000000000017
EditMem                         02:0000000000001B99
ExcHandler                      02:0000000000000920
ExecuteCode                     02:0000000000001CB2
FillMem                         02:0000000000001A63
GetCmdLine                      02:0000000000001954
GetDecNumber                    02:0000000000001D7C
GetHexNumber                    02:0000000000001D19
GetKey                          02:0000000000001305
GetNumber                       02:0000000000000914
GetRange                        02:0000000000001DE8 EXP
HelpMsg                         03:0000000000000340
HomeCursor                      02:00000000000007B7
IncCursorPos                    02:000000000000062D
IncCursorPos1                   02:00000000000006DE
IncCursorRow                    02:0000000000000677
InitSerial                      02:0000000000000925
KEYBD                            S:00000000FEDC0000
KeybdGetChar                    02:000000000000135E
KeybdGetCharNoWait              02:000000000000133C
KeybdGetCharWait                02:000000000000134F
KeybdLEDs                        S:00000000FFFC0424
KeybdRecvByte                   02:000000000000125E
KeybdSendByte                   02:000000000000178A
KeybdSetLEDStatus               02:00000000000016D4
KeybdWaitFlag                    S:00000000FFFC0423
KeybdWaitTx                     02:00000000000012A3
LF                               S:000000000000000A
LoadS19                         02:0000000000001E19
Monitor                         02:00000000000017B7
NAK                              S:0000000000000015
PTBR                             S:00000000FFF4FF20
Prompt1                         02:000000000000180A
Prompt2                         02:000000000000184F
Prompt3                         02:00000000000017ED
PromptLn                        02:00000000000017DE
SC_ALT                           S:0000000000000011
SC_CAPSLOCK                      S:0000000000000058
SC_CTRL                          S:0000000000000014
SC_EXTEND                        S:00000000000000E0
SC_KEYUP                         S:00000000000000F0
SC_LSHIFT                        S:0000000000000012
SC_NUMLOCK                       S:0000000000000077
SC_RSHIFT                        S:0000000000000059
SC_SCROLLLOCK                    S:000000000000007E
SC_TAB                           S:000000000000000D
SOH                              S:0000000000000001
ScrollUp                        02:00000000000006E8
SerHeadRcv                       S:00000000FFFC0004
SerHeadXmit                      S:00000000FFFC000C
SerRcvBuf                        S:00000000FFFC1000
SerRcvXoff                       S:00000000FFFC0011
SerRcvXon                        S:00000000FFFC0010
SerTailRcv                       S:00000000FFFC0000
SerTailXmit                      S:00000000FFFC0008
SerialGetBufDirect              02:0000000000000D3C
SerialGetChar                   02:0000000000000A0A
SerialIRQ                       02:0000000000000B9E
SerialInit                      02:0000000000000925 EXP
SerialPeekChar                  02:0000000000000AF2
SerialPeekCharDirect            02:0000000000000B32
SerialPutBuf                    02:0000000000000CC5 EXP
SerialPutChar                   02:0000000000000B68
SerialPutString                 02:0000000000000C5E EXP
SerialRcvCount                  02:00000000000009B2
SerialTest                      02:0000000000000D2D EXP
StartMon                        02:00000000000017B7
SyncCursor                      02:00000000000007DE
TestCLS                         02:00000000000018F7
TextAttr                         S:00000000FFFC0410
TextCols                         S:00000000FFFC0403
TextCurpos                       S:00000000FFFC0404
TextRows                         S:00000000FFFC0402
TextScr                          S:00000000FFFC0408
Wait10ms                        02:0000000000001799
XOFF                             S:0000000000000013
XON                              S:0000000000000011
_KeyState1                       S:00000000FFFC0420
_KeyState2                       S:00000000FFFC0421
_KeybdEcho                       S:00000000FFFC0422
_KeybdGetScancode               02:000000000000123C
_KeybdGetStatus                 02:000000000000122D
_KeybdInit                      02:0000000000001214
_keybdControlCodes              03:0000000000000240
_keybdExtendedCodes             03:00000000000002C0
_shiftedScanCodes               03:0000000000000140
_unshiftedScanCodes             03:0000000000000040
ary                              S:00000000FFFC0000
doAlt                           02:000000000000157C
doBackspace                     02:0000000000000559
doCapsLock                      02:000000000000168A
doCtrl                          02:000000000000151E
doCtrlX                         02:00000000000005E8
doDelete                        02:000000000000058A
doExtend                        02:00000000000014F7
doKeyup                         02:00000000000014E3
doNumLock                       02:0000000000001663
doRet                           02:00000000000002CA
doScrollLock                    02:00000000000016AD
doShift                         02:000000000000160A
doTab                           02:00000000000015DE
edtmem1                         02:0000000000001BA8
floop                           02:000000000000024A
fmemB                           02:0000000000001B45
fmemO                           02:0000000000001AE3
fmemT                           02:0000000000001B05
fmemW                           02:0000000000001B23
ignBlanks                       02:0000000000001B63
leds                             S:00000000FEDFFF00
msgStart                        03:00000000000003DB
msgXmNoTransmitter              03:000000000000001B
msgXmTimeout                    03:0000000000000007
nmeSerial                       03:0000000000000000
pgtbl                            S:00000000FFF80000
rand                             S:00000000FEE1FD00
stall                           02:000000000000029E
start                           02:0000000000000000
txtscreen                        S:00000000FEC00000
xm_EOT                          02:000000000000110F
xm_ReceiveStart                 02:0000000000000F72
xm_SOH                          02:000000000000100F
xm_SendStart                    02:0000000000000E63
xm_calc_checksum                02:000000000000115E
xm_calc_crc                     02:00000000000011A8
xm_checksum                      S:00000000FFFC0030
xm_crc                           S:00000000FFFC0058
xm_crc1                         02:00000000000011B7
xm_crc3                         02:00000000000011DE
xm_crc4                         02:00000000000011CF
xm_cs1                          02:000000000000116D
xm_gb1                          02:0000000000000F3C
xm_gb2                          02:0000000000000F63
xm_getbyte                      02:0000000000000F37
xm_noTransmitter                02:0000000000001145
xm_rcv1                         02:0000000000000FCA
xm_rcv2                         02:000000000000104A
xm_rcv3                         02:00000000000010C5
xm_rcv4                         02:0000000000000FBC
xm_rcv5                         02:0000000000000FB2
xm_rcv_chksum                   02:00000000000010B2
xm_rcv_nak                      02:0000000000000FFC
xm_rcv_to1                      02:00000000000010F2
xm_rcv_to2                      02:00000000000010F2
xm_receive                      02:0000000000000FAD
xm_retry1                       02:0000000000001123
xm_send                         02:0000000000000E77
xm_send2                        02:0000000000000EE8
xm_send3                        02:0000000000000EED
xm_send4                        02:0000000000000E99
xm_send5                        02:0000000000000E94
xm_timer                         S:00000000FFFC0020

Symbols by value:
00000000FEC00000 txtscreen
00000000FED00000 ACIA_TX
00000000FED00000 ACIA_RX
00000000FED00004 ACIA_STAT
00000000FED00008 ACIA_CMD
00000000FED0000C ACIA_CTRL
00000000FEDC0000 KEYBD
00000000FEDFFF00 leds
00000000FEE1FD00 rand
00000000FFF4FF20 PTBR
00000000FFF80000 pgtbl
00000000FFFC0000 SerTailRcv
00000000FFFC0000 ary
00000000FFFC0004 SerHeadRcv
00000000FFFC0008 SerTailXmit
00000000FFFC000C SerHeadXmit
00000000FFFC0010 SerRcvXon
00000000FFFC0011 SerRcvXoff
00000000FFFC0020 xm_timer
00000000FFFC0030 xm_checksum
00000000FFFC0058 xm_crc
00000000FFFC0400 CursorRow
00000000FFFC0401 CursorCol
00000000FFFC0402 TextRows
00000000FFFC0403 TextCols
00000000FFFC0404 TextCurpos
00000000FFFC0408 TextScr
00000000FFFC0410 TextAttr
00000000FFFC0420 _KeyState1
00000000FFFC0421 _KeyState2
00000000FFFC0422 _KeybdEcho
00000000FFFC0423 KeybdWaitFlag
00000000FFFC0424 KeybdLEDs
00000000FFFC0480 CmdBuf
00000000FFFC0500 CmdBufEnd
00000000FFFC1000 SerRcvBuf
0000000000000000 nmeSerial
0000000000000000 start
0000000000000001 SOH
0000000000000004 EOT
0000000000000006 ACK
0000000000000007 msgXmTimeout
0000000000000008 CTRLH
000000000000000A LF
000000000000000D CR
000000000000000D SC_TAB
0000000000000011 XON
0000000000000011 SC_ALT
0000000000000012 SC_LSHIFT
0000000000000013 XOFF
0000000000000014 SC_CTRL
0000000000000015 NAK
0000000000000017 ETB
0000000000000018 CAN
0000000000000018 CTRLX
000000000000001B msgXmNoTransmitter
000000000000001E .clrpgtbl
0000000000000040 _unshiftedScanCodes
0000000000000058 SC_CAPSLOCK
0000000000000059 SC_RSHIFT
0000000000000077 SC_NUMLOCK
000000000000007E SC_SCROLLLOCK
00000000000000E0 SC_EXTEND
00000000000000F0 SC_KEYUP
0000000000000140 _shiftedScanCodes
00000000000001E8 .st2
0000000000000240 _keybdControlCodes
000000000000024A floop
000000000000029E stall
00000000000002A3 Delay3s
00000000000002AD Delay
00000000000002C0 _keybdExtendedCodes
00000000000002CA doRet
00000000000002CF ClearScreen
000000000000030A CalcScreenLoc
0000000000000340 HelpMsg
0000000000000368 DisplayChar
00000000000003DB msgStart
0000000000000559 doBackspace
000000000000058A doDelete
00000000000005E8 doCtrlX
000000000000062D IncCursorPos
0000000000000677 IncCursorRow
00000000000006DE IncCursorPos1
00000000000006E8 ScrollUp
000000000000075E BlankLastLine
00000000000007B7 HomeCursor
00000000000007DE SyncCursor
00000000000007F7 DisplayString
0000000000000828 CRLF
000000000000084F DisplayNybble
000000000000087C DisplayByte
00000000000008A3 DisplayWyde
00000000000008CA DisplayTetra
00000000000008ED DisplayOcta
0000000000000914 GetNumber
0000000000000920 ExcHandler
0000000000000925 SerialInit
0000000000000925 InitSerial
00000000000009B2 SerialRcvCount
0000000000000A05 .srcXit
0000000000000A0A SerialGetChar
0000000000000A8F .sgc2
0000000000000ADE .sgcNoChars
0000000000000AF2 SerialPeekChar
0000000000000B28 .spcNoChars
0000000000000B32 SerialPeekCharDirect
0000000000000B68 SerialPutChar
0000000000000B9E SerialIRQ
0000000000000C5E SerialPutString
0000000000000CC5 SerialPutBuf
0000000000000D2D SerialTest
0000000000000D3C SerialGetBufDirect
0000000000000E63 xm_SendStart
0000000000000E77 xm_send
0000000000000E94 xm_send5
0000000000000E99 xm_send4
0000000000000EE8 xm_send2
0000000000000EED xm_send3
0000000000000F37 xm_getbyte
0000000000000F3C xm_gb1
0000000000000F63 xm_gb2
0000000000000F72 xm_ReceiveStart
0000000000000FAD xm_receive
0000000000000FB2 xm_rcv5
0000000000000FBC xm_rcv4
0000000000000FCA xm_rcv1
0000000000000FFC xm_rcv_nak
000000000000100F xm_SOH
000000000000104A xm_rcv2
00000000000010B2 xm_rcv_chksum
00000000000010C5 xm_rcv3
00000000000010F2 xm_rcv_to1
00000000000010F2 xm_rcv_to2
000000000000110F xm_EOT
0000000000001123 xm_retry1
0000000000001145 xm_noTransmitter
000000000000115E xm_calc_checksum
000000000000116D xm_cs1
00000000000011A8 xm_calc_crc
00000000000011B7 xm_crc1
00000000000011CF xm_crc4
00000000000011DE xm_crc3
0000000000001214 _KeybdInit
000000000000122D _KeybdGetStatus
000000000000123C _KeybdGetScancode
000000000000125E KeybdRecvByte
00000000000012A3 KeybdWaitTx
00000000000012E8 CheckForKey
0000000000001305 GetKey
000000000000133C KeybdGetCharNoWait
000000000000134F KeybdGetCharWait
000000000000135E KeybdGetChar
0000000000001363 B0003
0000000000001423 B0013
00000000000014E3 doKeyup
00000000000014F7 doExtend
000000000000151E doCtrl
000000000000157C doAlt
00000000000015DE doTab
000000000000160A doShift
0000000000001663 doNumLock
000000000000168A doCapsLock
00000000000016AD doScrollLock
00000000000016D4 KeybdSetLEDStatus
000000000000178A KeybdSendByte
0000000000001799 Wait10ms
00000000000017B7 StartMon
00000000000017B7 Monitor
00000000000017DE PromptLn
00000000000017ED Prompt3
000000000000180A Prompt1
000000000000184F Prompt2
00000000000018F7 TestCLS
000000000000193C DisplayHelp
0000000000001954 GetCmdLine
0000000000001A63 FillMem
0000000000001AE3 fmemO
0000000000001B05 fmemT
0000000000001B23 fmemW
0000000000001B45 fmemB
0000000000001B63 ignBlanks
0000000000001B99 EditMem
0000000000001BA8 edtmem1
0000000000001CB2 ExecuteCode
0000000000001CCF DumpMem
0000000000001CF7 DumpMem1
0000000000001D19 GetHexNumber
0000000000001D7C GetDecNumber
0000000000001DE8 GetRange
0000000000001E19 LoadS19
0000000000001E1E DisplayMem
0000000000001E23 AsciiToHexNybble
