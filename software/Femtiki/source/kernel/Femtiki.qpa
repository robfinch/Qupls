# ============================================================================
#        __
#   \\__/ o\    (C) 2020-2025  Robert Finch, Waterloo
#    \  __ /    All rights reserved.
#     \/_//     robfinch<remove>@finitron.ca
#       ||
#  
#
# BSD 3-Clause License
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ============================================================================

include "d:\cores2022\rf6809\software\fmtk\config.a09"
include "d:\cores2022\rf6809\software\fmtk\const.a09"
include "..\..\inc\types.qpa"
;OPT include "d:\cores2022\rf6809\software\boot\io_equates.a09"
include "d:\cores2022\rf6809\software\fmtk\source\kernel\Femtiki_vars.a09"

IRQFlag			EQU		$FFC012

#------------------------------------------------------------------------------
# Operating system call dispatcher.
# On entry, the task state has been saved including the system stack pointer,
# in the task control block.
#------------------------------------------------------------------------------
	org		0xFFFFF9000
OSCall:
	push cr0
	cmpa cr0,a0,OSCallTableLimit	# check if we have a valid function number
	bgt cr0,OSCallBadFunc
	pop cr0
	csrrw r0,SCRATCH,a0
	push 0xfffe,0							# save registers
	push 0xffff,2
	# save status reg, FP status reg
	csrrd a0,FPSR
	push a0
	csrrd a0,SR
	push a0
	push 7,8							# save SPs
	push 0x1ffff,9				# save CRs,BRs and LC
	# save the pebbles (base and limit)
	csrrd r8,PBL0
	csrrd r9,PBL1
	csrrd r10,PBL2
	csrrd r11,PBL3
	csrrd r12,PBL4
	csrrd r13,PBL5
	csrrd r14,PBL6
	csrrd r15,PBL7
	push 0xff,1
	csrrd a0,SCRATCH					# get back a0
	push br1									# save link register
	sll a0,a0,2								# convert unit index into word index
	load. a0,OSCallTable[a0]	# fetch vector
	beq cr0,OSCallBadFunc2		# nullptr?
	move br1,a0
	store a0,OSActive					# make this non-zero
	# spinlock on OS function
	csrrd a0,SCRATCH
.0001:
	amoswap. a0,a0,OSSEMA
	csrrd a0,SCRATCH
	beq cr0,.0001
	# call the OS function (eg written in C)
	# we carefully did not modify any registers, so the arguments in registers
	# should still be correct.
	blrl br1									
  # Stuff the error response return value into the right stack position so
  # they it is popped into the a0 register for return
  store a0,488[sp]					# a0 should be here
	# fall through to exit

#------------------------------------------------------------------------------
# Operating system exit point.
# Pops all the registers off the stack that were saved by the call.
#
# Parameters:
#		none
# Returns:
#		a0 = error code
#		a1 = value
#------------------------------------------------------------------------------

OSExit:
	store r0,OSSEMA				# unlock the system semaphore
OSExit2:
	pop br1
	# restore pebbles
	pop 0xff,1
	csrrw r0,PBL0,r8
	csrrw r0,PBL0,r9
	csrrw r0,PBL0,r10
	csrrw r0,PBL0,r11
	csrrw r0,PBL0,r12
	csrrw r0,PBL0,r13
	csrrw r0,PBL0,r14
	csrrw r0,PBL0,r15
	pop 0x1ffff,9					# get CRs,BRs and LC
	pop 7,8								# get SPs
	# restore status reg and FP status reg
	pop a0
	csrrw r0,SR,a0
	pop a0
	csrrw r0,FPSR,a0
	# restore GPRs
	pop 0xffff,2
	pop 0xfffe,0
	rfi
	
#------------------------------------------------------------------------------
# Here a bad function call number was given as the argument.
#------------------------------------------------------------------------------

OSCallBadFunc:
	pop cr0
  loadi	a0,E_Func
  blr

#------------------------------------------------------------------------------
# Here the OS function was not implemented yet.
# Stuff the error response into the right stack positions so it is popped into
# the a0 register for return.
#------------------------------------------------------------------------------

OSCallBadFunc2:
  loadi	a0,E_Func
FMTK_RetErr:
  store a0,488[sp]				# a0 should be here
  b OSExit2

#------------------------------------------------------------------------------
# Some useful OS return points.
#------------------------------------------------------------------------------

# Exit OS and return value in a1 with OK status
FMTK_RetOKD:
	push br1
	bl GetRunningTCBPtr
	pop br1
	store a1,TCBa1[a0]
	loadi a1,E_OK
	store a1,TCBa0[a0]
	b	OSExit

# Exit OS and return an OKAY status
FMTK_RetOK:
	push br1
	bl GetRunningTCBPtr
	pop br1
	loadi a1,E_OK
	store a1,TCBa0[a0]
	b	OSExit

#------------------------------------------------------------------------------
# Got the AppID, now get the mid
#
# Parameters:
#		B = app id
#------------------------------------------------------------------------------

GetAppMid:
	push br1
	bl ACBHandleToPointer
	pop br1
	load a0,ACBMid[a0]
	blr

;OSCallTbl2:
;  .4byte    SchedulerIRQ
;  .4byte    IStartTask
;  .4byte    ISendMsg
;  .4byte    ISleep

OSCallTable:
	.4byte	FMTK_Initialize					; 0
	.4byte	FMTK_StartTask					; 1
	.4byte	FMTK_ExitTask
	.4byte	FMTK_KillTask
;	.4byte		FMTK_SetTaskPriority
	.4byte  OSCallBadFunc
	.4byte	FMTK_Sleep							; 5
	.4byte	FMTK_AllocMbx
	.4byte		FMTK_FreeMbx
;	.4byte		FMTK_PostMsg
	.4byte    OSCallBadFunc
	.4byte		FMTK_SendMsg
	.4byte		FMTK_WaitMsg						; 10
	.4byte		FMTK_PeekMsg
;	.4byte		FMTK_StartApp           ; 12
;	.4byte		FMTK_ExitApp            ; 13
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte		FMTK_GetCurrentTid
;	.4byte		FMTK_TCBFinalizerExit   ; 15
;	.4byte		FMTK_KillApp
;	.4byte		FMTK_RunAsOS            ; 17
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte		FMTK_GetTaskAppId       ; 18
	.4byte		FMTK_SetTaskId          ; 19
;	.4byte		FMTK_HasIOFocus					; 20
;	.4byte		FMTK_SwitchIOFocus			; 21
;	.4byte		FMTK_ReleaseIOFocus			; 22
;	.4byte		FMTK_ForceReleaseIOFocus	; 23
;	.4byte		FMTK_RequestIOFocus			; 24
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
;	.4byte		FMTK_MapOSVars          ; 25
;	.4byte		FMTK_IO									; 26
;	.4byte    FMTK_GetDCBField        ; 27
;	.4byte    FMTK_SetDCBField        ; 28
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    FMTK_GetAppTaskId       ; 29
	.4byte    FMTK_SetTaskAppId       ; 30
	.4byte    OSCallBadFunc
;	.4byte    GetPamBit               ; 32
	.4byte    OSCallBadFunc
;	.4byte    FetchMemoryWord         ; 33
	.4byte    OSCallBadFunc
;	.4byte    Monitor                 ; 34
	.4byte    OSCallBadFunc
	.4byte    GetIRQFlag              ; 35
	.4byte    SetIRQFlag              ; 36
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc
	.4byte    OSCallBadFunc         	 ; 40
	.4byte    OSCallBadFunc           ; 41
	.4byte    OSCallBadFunc           ; 42
	.4byte    OSCallBadFunc
	.4byte    FemtikiTimerIRQ         ; 44
;	.4byte    FMTK_Reschedule         ; 45
	.4byte    OSCallBadFunc
	.4byte    FMTK_GetCurrentMid      ; 46
	.4byte    FMTK_GetRunningTCBPointer	; 47
	.4byte		OSCallBadFunc							 ; 48
	.4byte		DumpTCBs								; 49

NUM_OSFUNC	EQU		(*-OSCallTbl) / 2

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

FMTK_Initialize:
  bl FMTK_Init
  b FMTK_RetOK
 
#------------------------------------------------------------------------------
# Get the task id for the currently running task.
#
# Returns:
#		D = task id
#------------------------------------------------------------------------------

GetCurrentTid:
	load a0,RunningID
	blr

#------------------------------------------------------------------------------
# Get the task id for the currently running task.
#
# Returns:
#		task id at address given in a1
#------------------------------------------------------------------------------

FMTK_GetCurrentTid:
	cmp cr0,a1,0			# check for NULL pointer
	beq cr0,.0001
  # convert virtual address to physical address
  move a0,a1
  move br2,br1
  bl ConvertVirtualToPhysical
  move br1,br2
  # Validate physical address makes sense
  # The address should be somewhere in the app space (lowest 768MB)
  cmpa cr0,a0,0x30000000
  bge .0001
	load a1,RunningID
	store a1,[a0]
	b	FMTK_RetOK
.0001:
	loadi a0,E_Arg
	b FMTK_RetErr

# Parameters:
# 	a0 = virtual address
# Returns:
#		a0 = physical address

# The virtual address is offset by the base register into the MMU mapping table
ConvertVirtualToPhysical:
	push a1,a2
	srl a1,a0,29					# get pebble index
	add a1,a1,PBL0				# compute CSR register number
	csrrd a1,a1						# read the CSR
	# base field is in bits 0 to 13 of CSR
	and a1,a1,0x3fff			# got base MMU entry number
	srl a2,a0,14					# convert virtual address to page number
	sll a1,a1,2						# convert to MMU entry index type
	add a1,a1,a2					# a1 now equal MMU entry index
	load a1,MMUTable[a1]	# get the entry
	and a1,a1,0x3ffff			# a1 = PPN
	sll a1,a1,14					# a1 = address, whew
	# we now have a 32-bit physical address of the page in a1
	and a0,a0,0x3fff			# mask for low order bits of virtual
	add a0,a0,a1					#	add the low order bits to base physical address
	pop a1,a2
	blr

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

GetIRQFlag:
	cmp cr0,a1,0			# check for NULL pointer
	beq cr0,.0001
  # convert virtual address to physical address
  move a0,a1
  move br2,br1
  bl ConvertVirtualToPhysical
  move br1,br2
  # Validate physical address makes sense
  # The address should be somewhere in the app space (lowest 768MB)
  cmpa cr0,a0,0x30000000
  bge .0001
  ldbz a1,IRQFlag		# get the flag
  store a1,[a0]			# store at given address
  b FMTK_RetOK
.0001:
	loadi a0,E_Arg
	b FMTK_RetErr

SetIRQFlag:
  stb a1,IRQFlag
  b FMTK_RetOK

# Accessors
# Parameters:
#	 	D = task id
FMTK_GetTaskAppId:
  move br2,br1
	cmp cr0,a1,0			# check for NULL pointer
	beq cr0,.0001
  # convert virtual address to physical address
  move a0,a1
  bl ConvertVirtualToPhysical
  # Validate physical address makes sense
  # The address should be somewhere in the app space (lowest 768MB)
  cmpa cr0,a0,0x30000000
  bge .0001
  move a3,a0
	ldwz a0,RunningID
	bl TCBHandleToPointer
	ldbz a1,TCBappid[a0]
	store a1,[a3]
	move br1,br2
	b FMTK_RetOK
.0001:
	move br1,br2
	loadi a0,E_Arg
	b FMTK_RetErr

# Parameters:
#		D = task id
#		E = App id
#
FMTK_SetTaskAppId:
	move br2,br1
	bl TCBHandleToPointer
	# compare to zero?
	move br1,br2
	stb a1,TCBappid[a0]
	b FMTK_RetOK

# Parameters
#		a1 = app id
#		a2 = address to store task id at
#		
FMTK_GetAppTaskId:
	move br2,br1
	cmp cr0,a2,0			# check for NULL pointer
	beq cr0,.0001
  # convert virtual address to physical address
  move a0,a2
  bl ConvertVirtualToPhysical
  # Validate physical address makes sense
  # The address should be somewhere in the app space (lowest 768MB)
  cmpa cr0,a0,0x30000000
  bge .0001
  move a3,a0
	ldwz a0,RunningID
	bl TCBHandleToPointer
	move a4,a0
	move a0,a1			# a0 = app id
	bl ACBHandleToPointer
	ldwz a1,ACBTask[a0]
	store a1,[a4]
	move br1,br2
	b FMTK_RetOK
.0001:
	move br1,br2
	loadi a0,E_Arg
	b FMTK_RetErr

# The following only really needed by startup code, otherwise the task id
# is completely managed by the OS.
FMTK_SetTaskId:
  # Should get the id and see if it s currently zero (unset).
  # but this would be more code bloat.
  ldb		2,s
  stb		RunningID
  bra		FMTK_RetOK

FMTK_GetCurrentMid:
	ldb		RunningID
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBappid,x
	clra
	bsr		ACBHandleToPointer
	tfr		d,y
	ldb		ACBmid,y
	clra
	bra		FMTK_RetOKD

; Parameters:
;		B = task id
;
FMTK_GetMid:
	pshs	x
	bsr		TCBHandleToPointer
	tfr		d,x
	ldb		TCBappid,x
	clra
	bsr		ACBHandleToPointer
	tfr		d,x
	ldb		ACBmid,x
	puls	x,pc
	
#------------------------------------------------------------------------------
# Get a pointer to the TCB for the currently running task.
#
# Parameters:
#		none
# Returns:
#		D = pointer to running TCB
#------------------------------------------------------------------------------

GetRunningTCBPtr:
	load a0,RunningID
	# fall through into conversion code

#------------------------------------------------------------------------------
# Convert a TCB handle into a pointer to the corresponding TCB.
# The handle is just the page number for the TCB
#------------------------------------------------------------------------------

TCBHandleToPointer:
	sub a0,a0,1
	sll a0,a0,10
	add a0,a0,tcbs
	blr

FMTK_GetRunningTCBPointer:
	sub sp,sp,8
	move a0,br1
	store a0,[sp]
	bl GetRunningTCBPtr
	popm br1
	store a0,TCBa0[a0]
	b FMTK_RetOKD

#------------------------------------------------------------------------------
# Convert an ACB handle into a pointer to the corresponding ACB.
# Handles vary from 1 to 32.
#------------------------------------------------------------------------------

ACBHandleToPointer:
	sub a0,a0,1
	sll a0,a0,14
	add a0,a0,acbs
	blr

#------------------------------------------------------------------------------
# Convert a TCB pointer into a handle for the TCB.
#------------------------------------------------------------------------------

TCBPointerToHandle:
	sub a0,a0,tcbs
	srl a0,a0,10
	add a0,a0,1
	blr

#				while (TimeoutList > 0 && TimeoutList < NR_TCB) {
#					if (tcbs[TimeoutList].timeout<=0)
#						InsertIntoReadyList(PopTimeoutList());
#					else {
#						tcbs[TimeoutList].timeout = tcbs[TimeoutList].timeout - missed_ticks - 1;
#						missed_ticks = 0;
#						break;
#					}
#				}

DecrementTimeout:
	move br2,br1
.0001:
	ldwz.	a0,TimeoutList				# a0 = handle to timeout list
	beq cr0,.0001
	cmpa cr0,a0,NR_TCB
	bge cr0,.0001
	bl TCBHandleToPointer
	load. a1,TCBTimeout[a0]
	bgt cr0,.0002
	bl PopTimeoutList
	bl InsertIntoReadyQueue
	b .0001
.0002:
	load a2,missed_ticks
	sub a1,a1,a2
	sub a1,a1,1
	store a1,TCBTimeout[a0]
	store r0,missed_ticks
.0001:
	move br1,br2
	blr

SchedulerIRQa:
	move br2,br1
	ldwz a0,RunningID
	bl TCBHandleToPointer
	ldbz a1,TCBPriorty[a0]
	cmpa cr0,a1,63						# highest priority: refuse to task switch or even
	bge cr0,.0001							# decrement timeout
	loadi a1,TS_PREEMPT
	stb a1,TCBStatus[a0]
#	bl DecrementTimeout
	ldbz a1,TCBPriority[a0]
	cmpa cr0,a1,60
	bge cr0,.0002
	bl SelectTaskToRun
	stw a0,RunningID
.0002:
	ldwz a0,RunningID
	bl TCBHandleToPointer
	loadi a1,TS_RUNNING
	stb a1,TCBStatus[a0]
	move br1,br2
	blr
.0001:
	load a0,missed_ticks
	add a0,a0,1
	store a0,missed_ticks
	move br1,br2
	blr
	
SchedulerIRQb:
	move br3,br1
	loadi a0,20
	cmp cr0,a0,0
	beq cr0,.0001
	ldwz a0,RunningID
	bl TCBHandleToPointer
	load a1,TCBEndTick[a0]
	load a2,TCBStartTick[a0]
	sub a1,a1,a2
	load a3,TCBTicks[a0]
	add a3,a3,a1
	store a3,TCBTicks[a0]
	bl SchedulerIRQa
	move br1,br3
	blr
.0001:
	load a0,missed_ticks
	add a0,a0,1
	store a0,missed_ticks
	move br1,br3
	blr

FemtikiTimerIRQ:
	push 0xfe,0									# push a0 to a6
	push cr0
	push 0x7e,9									# push br1 to br6
	ldwz a0,RunningID
	stw a0,PrevRunningID				# Keep track of previous Running TCB
	move a4,a0									
	bl TCBHandleToPointer
	move a1,a0
	bl IGetTick
	store a0,TCBEndTick[a1]
	bl SchedulerIRQb
	ldwz a0,RunningID						# scheduling may have changed this value
	move a5,a0									# save a copy of the id
	xor a4,a0,a4								# a4 = flag if running changed
	bl TCBHandleToPointer
	ldbz. a1,TCBException[a0]
	beq cr0,.0001
	# ToDo: exception processing code
.0001:
	move a1,a0
	bl IGetTick
	store a0,TCBStartTick[a1]
	# Did we stay in the same task?
	cmp cr0,a4,0
	bne cr0,.0002
	# If in same task, just pop registers and return
	pop 0x7e,9								# get back br1 to br6
	pop cr0
	pop 0xfe,0								# get back a0 to a6
	rfi
	# Here a different task was selected, save and restore contexts
	# Going in:
	# 	a4 = old task
	#		a5 = new task
.0002:
	pop 0x7e,9								# get back br1 to br6
	csrrw r0,SCRATCH,a5
	# spinlock on TCB 
.0003:
	amoswap. a5,a5,OSSEMA
	csrrd a5,SCRATCH
	beq cr0,.0003
	pop cr0
	pop 0xfe,0								# get back a0 to a6

# Context switch code	
# Switches from PrevRunningID to RunningID

SwitchTask:
	csrrw r0,SCRATCH,a0		# save a0 in scratch register
	sub sp,sp,8
	move a0,br1
	store a0,[sp]
	ldwz a0,PrevRunningID
	bl TCBHandleToPointer
	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	# Store the destination context
	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	store a1,TCBxA1[a0]		# save a1 in TCB so we can use it
	load a1,[sp]					# restore link register
	move br1,a1
	add sp,sp,8
	csrrd a1,SCRATCH			# save original a0 in task control block
	store a1,TCBxA0[a0]
	# save condition registers
	move a1,cr0
	store a1,TCBxCR0[a0]
	move a1,cr1
	store a1,TCBxCR1[a0]
	move a1,cr2
	store a1,TCBxCR2[a0]
	move a1,cr3
	store a1,TCBxCR3[a0]
	move a1,cr4
	store a1,TCBxCR4[a0]
	move a1,cr5
	store a1,TCBxCR5[a0]
	move a1,cr6
	store a1,TCBxCR6[a0]
	move a1,cr7
	store a1,TCBxCR7[a0]
	# save branch registers
	move a1,br1
	store a1,TCBxBR1[a0]
	move a1,br2
	store a1,TCBxBR2[a0]
	move a1,br3
	store a1,TCBxBR3[a0]
	move a1,br4
	store a1,TCBxBR4[a0]
	move a1,br5
	store a1,TCBxBR5[a0]
	move a1,br6
	store a1,TCBxBR6[a0]
	# save loop counter
	move a1,lc
	store a1,TCBxLC[a0]
	# save pebbles
	csrrd a1,PBL0
	store a1,TCBxPBL0[a0]
	csrrd a1,PBL1
	store a1,TCBxPBL1[a0]
	csrrd a1,PBL2
	store a1,TCBxPBL2[a0]
	csrrd a1,PBL3
	store a1,TCBxPBL3[a0]
	csrrd a1,PBL4
	store a1,TCBxPBL4[a0]
	csrrd a1,PBL5
	store a1,TCBxPBL5[a0]
	csrrd a1,PBL6
	store a1,TCBxPBL6[a0]
	csrrd a1,PBL7
	store a1,TCBxPBL7[a0]
	# save GPRs
	store a2,TCBxA2[a0]
	store a3,TCBxA3[a0]
	store a4,TCBxA4[a0]
	store a5,TCBxA5[a0]
	store a6,TCBxA6[a0]
	store a7,TCBxA7[a0]
	store t0,TCBxT0[a0]
	store t1,TCBxT1[a0]
	store t2,TCBxT2[a0]
	store t3,TCBxT3[a0]
	store t4,TCBxT4[a0]
	store t5,TCBxT5[a0]
	store t6,TCBxT6[a0]
	store t7,TCBxT7[a0]
	store t8,TCBxT8[a0]
	store t9,TCBxT9[a0]
	store s0,TCBxS0[a0]
	store s1,TCBxS1[a0]
	store s2,TCBxS2[a0]
	store s3,TCBxS3[a0]
	store s4,TCBxS4[a0]
	store s5,TCBxS5[a0]
	store s6,TCBxS6[a0]
	store s7,TCBxS7[a0]
	store s8,TCBxS8[a0]
	store s9,TCBxS9[a0]
	store gp,TCBxGP[a0]
	store fp,TCBxFP[a0]
	csrrd a1,SR
	store a1,TCBxSR[a0]
	# check to see if FPRs need to be saved
	csrrd a1,FPSR
	store a1,TCBxFPSR[a0]
	ext. a1,a1,FPStateBegin,FPStateEnd
	beq cr0,.0002
	store f0,TCBxF0[a0]
	store f1,TCBxF1[a0]
	store f2,TCBxF2[a0]
	store f3,TCBxF3[a0]
	store f4,TCBxF4[a0]
	store f5,TCBxF5[a0]
	store f6,TCBxF6[a0]
	store f7,TCBxF7[a0]
	store f8,TCBxF8[a0]
	store f9,TCBxF9[a0]
	store f10,TCBxF10[a0]
	store f11,TCBxF11[a0]
	store f12,TCBxF12[a0]
	store f13,TCBxF13[a0]
	store f14,TCBxF14[a0]
	store f15,TCBxF15[a0]
	store f16,TCBxF16[a0]
	store f17,TCBxF17[a0]
	store f18,TCBxF18[a0]
	store f19,TCBxF19[a0]
	store f20,TCBxF20[a0]
	store f21,TCBxF21[a0]
	store f22,TCBxF22[a0]
	store f23,TCBxF23[a0]
	store f24,TCBxF24[a0]
	store f25,TCBxF25[a0]
	store f26,TCBxF26[a0]
	store f27,TCBxF27[a0]
	store f28,TCBxF28[a0]
	store f29,TCBxF29[a0]
	store f30,TCBxF30[a0]
	store f31,TCBxF31[a0]
.0002:	
	# save stack pointers and branch registers
	movea a1,USP
	store a1,TCBxUSP[a0]
	movea a1,SSP
	store a1,TCBxSSP[a0]
	movea a1,HSP
	store a1,TCBxHSP[a0]
	csrrd a1,EPC0
	store a1,TCBxPC[a0]
	csrrd a1,ESR0
	store a1,TCBxSR[a0]
	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	# Load the destination context
	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	# walk forwards loading registers
	bl GetRunningTCBPtr
	csrrw r0,TCBA,a0			# update running TCB address

	# load condition registers
	load a1,TCBxCR0[a0]
	move cr0,a1
	load a1,TCBxCR1[a0]
	move cr1,a1
	load a1,TCBxCR2[a0]
	move cr2,a1
	load a1,TCBxCR3[a0]
	move cr3,a1
	load a1,TCBxCR4[a0]
	move cr4,a1
	load a1,TCBxCR5[a0]
	move cr5,a1
	load a1,TCBxCR6[a0]
	move cr6,a1
	load a1,TCBxCR7[a0]
	move cr7,a1
	# load branch registers
	load a1,TCBxBR1[a0]
	move br1,a1
	load a1,TCBxBR2[a0]
	move br2,a1
	load a1,TCBxBR3[a0]
	move br3,a1
	load a1,TCBxBR4[a0]
	move br4,a1
	load a1,TCBxBR5[a0]
	move br5,a1
	load a1,TCBxBR6[a0]
	move br6,a1
	# load loop counter
	load a1,TCBxLC[a0]
	move lc,a1
	# load pebbles
	load a1,TCBxPBL0[a0]
	csrrw r0,PBL0,a1
	load a1,TCBxPBL1[a0]
	csrrw r0,PBL1,a1
	load a1,TCBxPBL2[a0]
	csrrw r0,PBL2,a1
	load a1,TCBxPBL3[a0]
	csrrw r0,PBL3,a1
	load a1,TCBxPBL4[a0]
	csrrw r0,PBL4,a1
	load a1,TCBxPBL5[a0]
	csrrw r0,PBL5,a1
	load a1,TCBxPBL6[a0]
	csrrw r0,PBL6,a1
	load a1,TCBxPBL7[a0]
	csrrw r0,PBL7,a1
	load a2,TCBxA2[a0]
	load a3,TCBxA3[a0]
	load a4,TCBxA4[a0]
	load a5,TCBxA5[a0]
	load a6,TCBxA6[a0]
	load a7,TCBxA7[a0]
	load t0,TCBxT0[a0]
	load t1,TCBxT1[a0]
	load t2,TCBxT2[a0]
	load t3,TCBxT3[a0]
	load t4,TCBxT4[a0]
	load t5,TCBxT5[a0]
	load t6,TCBxT6[a0]
	load t7,TCBxT7[a0]
	load t8,TCBxT8[a0]
	load t9,TCBxT9[a0]
	load s0,TCBxS0[a0]
	load s1,TCBxS1[a0]
	load s2,TCBxS2[a0]
	load s3,TCBxS3[a0]
	load s4,TCBxS4[a0]
	load s5,TCBxS5[a0]
	load s6,TCBxS6[a0]
	load s7,TCBxS7[a0]
	load s8,TCBxS8[a0]
	load s9,TCBxS9[a0]
	load gp,TCBxGP[a0]
	load fp,TCBxFP[a0]
	# check to see if FPRs need to be saved
	load a1,TCBxFPSR[a0]
	csrrw r0,FPSR,a1
	ext. a1,a1,FPStateBegin,FPStateEnd
	beq cr0,.0002
	load f0,TCBxF0[a0]
	load f1,TCBxF1[a0]
	load f2,TCBxF2[a0]
	load f3,TCBxF3[a0]
	load f4,TCBxF4[a0]
	load f5,TCBxF5[a0]
	load f6,TCBxF6[a0]
	load f7,TCBxF7[a0]
	load f8,TCBxF8[a0]
	load f9,TCBxF9[a0]
	load f10,TCBxF10[a0]
	load f11,TCBxF11[a0]
	load f12,TCBxF12[a0]
	load f13,TCBxF13[a0]
	load f14,TCBxF14[a0]
	load f15,TCBxF15[a0]
	load f16,TCBxF16[a0]
	load f17,TCBxF17[a0]
	load f18,TCBxF18[a0]
	load f19,TCBxF19[a0]
	load f20,TCBxF20[a0]
	load f21,TCBxF21[a0]
	load f22,TCBxF22[a0]
	load f23,TCBxF23[a0]
	load f24,TCBxF24[a0]
	load f25,TCBxF25[a0]
	load f26,TCBxF26[a0]
	load f27,TCBxF27[a0]
	load f28,TCBxF28[a0]
	load f29,TCBxF29[a0]
	load f30,TCBxF30[a0]
	load f31,TCBxF31[a0]
.0002:	
	# load stack pointers
	load a1,TCBxUSP[a0]
	movea USP,a1
	load a1,TCBxSSP[a0]
	movea SSP,a1
	load a1,TCBxHSP[a0]
	movea HSP,a1
	load a1,TCBxSR[a0]
	csrrw r0,ESR0,a1
	load a1,TCBxPC[a0]
	csrrw r0,EPC0,a1
	load a1,TCBxA1[a0]
	load a0,TCBxA0[a0]
	rfi


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

FMTK_Sleep:
  bsr		ISleep
  bra		FMTK_RetOKD

FMTK_StartTask:
;  bsr  IStartTask
  bra  	FMTK_RetOK

;------------------------------------------------------------------------------
; Exit the current task.
;
; Parameters:
;		none
; Modifies:
;		a1 = task id
;------------------------------------------------------------------------------

FMTK_ExitTask:
	ldb		RunningID
	; fall through to KillTask
	
;------------------------------------------------------------------------------
; Parameters:
;		B = tid of task to kill
;------------------------------------------------------------------------------

FMTK_KillTask:
;  bsr  	IKillTask
	bra		FMTK_RetOK

# ----------------------------------------------------------------------------
# Select a task to run. Relatively easy as task selection is handled by
# hardware. All that needs to be done is to keep popping the hardware queue
# until a valid running task is found.
#
# Modifies:
#		none
# Retuns:
#		B = next task to run
#; ----------------------------------------------------------------------------

SelectTaskToRun:
	push br1
	push 0x6,0				# push a0,a1
	# There should always be at least one task in the ready queue. It should
	# be guarenteed to be popped within 32 tries (the number of attempts for
	# all queues to be tested). The following limit is in case something is
	# broken.
sttr0004:
	loadi a0,128
sttr0001:						# keep popping tasks from the readyQ until a valid one
	add. a0,a0,-1			# is found. If none valid for a long time default to
	beq	cr0,sttr0002	# the OS task
	load. a1,RDYQ
	beq cr0,sttr0001
	# Here we got a valid task id. If the task is still supposed to be
	# running, push it back onto the ready queue. Otherwise go get the
	# next task.
	move a0,a1
	bl TCBHandleToPointer
	ldbz a1,TCBStatus[a0]
	cmp cr0,a1,TS_RUNNING
	bne	cr0,sttr0004
	bl InsertIntoReadyQueue
	add sp,sp,8				# Do not pop a0, it is being returned
	pop 0x4,0
	pop br1
	blr
	# Nothing in queues? There is supposed to be. Add the OS task to the queue.
sttr0002:
	loadi a0,1
	bl InsertIntoReadyQueue
	add sp,sp,8
	pop 0x4,0
	pop br1
	blr

;// ----------------------------------------------------------------------------
;// Sleep for a number of clock ticks.
;// ----------------------------------------------------------------------------
;
;int FMTK_Sleep(int timeout)
;{
;  hTCB ht;
;  int tick1, tick2;
;
;	while (timeout > 0) {
;		tick1 = GetTick();
;    if (LockSysSemaphore(100000)) {
;      ht = GetRunningTCB();
;      RemoveFromReadyList(ht);
;      InsertIntoTimeoutList(ht, timeout);
;      UnlockSysSemaphore();
;			FMTK_Reschedule();
;      break;
;    }
;		else {
;			tick2 = GetTick();
;			timeout -= (tick2-tick1);
;		}
;	}
;  return (E_Ok);
;}

ISleep:
	puls	u
FMTK_Sleep2:
	tst		1,s
	bmi		0001f
	bsr		IGetTick
	pshs	w											; push tick1
	pshs	d
	ldd		#100000								; try a bunch of times to lock semaphore
	bsr		LockSysSemaphore
	beq		FMTK_Sleep1
	leas	4,s										; remove tick1 from stack
	ldb		RunningID							; D = running TID
	clra
	bsr		RemoveFromReadyQueue
	tfr		d,x
	ldd		1,s
	ldw		3,s
	bsr		InsertIntoReadyQueue
	bsr		UnlockSysSemaphore
	swi2
	fcb		OSF_FMTK_Reschedule
0001:
	ldx		#E_Ok
	stx		7,s
	jmp		,u
FMTK_Sleep1:
	bsr		IGetTick							; D,W = tick2
	exg		d,w
	subd	2,s										; subtract: tick2 - tick1
	exg		d,w
	sbcd	,s
	pshs	w											; push dif = tick2 - tick1
	pshs	d
	ldd		9,s										; D,W = timeout
	ldw		11,s
	exg		d,w
	subd	2,s										; D,W = timeout - diff
	exg		d,w
	sbcd	,s
	stw		11,s									; timeout = timeout - tickdif
	std		9,s
	leas	8,s										; get rid of tick1, tick2
	bra		FMTK_Sleep2

;------------------------------------------------------------------------------
; Start a task.
;
; Parameters:
;		B = app id
;		A = priority
;		X = start address
;		Y = start parameter
;		E = affinity
;------------------------------------------------------------------------------

IStartTask:
	lbsr	GetRunningTCBPtr
	tfr		d,x
	lbsr	IAllocTcb
	tstb
	beq		0002f
	pshs	d
	lbsr	TCBHandleToPointer
	tfr		d,y
	lda		TCBxAcca,x
	sta		TCBPriority,y
	lda		TCBxAcce,x
	sta		TCBAffinity,y
	ldb		TCBxAccb,x
	stb		TCBappid,y
	clra
	lbsr	ACBHandleToPointer
	tfr		d,u
	ldb		ACBTaskList,u
	stb		TCBAcbNext,y
	ldd		,s
	stb		ACBTaskList,u
	ldd		TCBxYR,x						; place start parameter in D register
	std		TCBxAcca,y
	swi
	fcb		MF_IncreaseStackSize
	tstd
	beq		0003f
	addd	#PGSZ
	std		TCBxSP,y
	ldd		TCBxXR,x
	clr		TCBxPC,y						; set start address
	std		TCBxPC+1,y
	puls	d
	lbsr	InsertIntoReadyQueue
	ldx		#E_Ok
	rts
0002:
	ldx		#E_NoMoreTCBs	
	rts
0003:
	ldx		#E_NoMem
	leas	2,s
	rts

FMTK_StartTask:
0001:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0001b
	bsr		IStartTask
	lbsr	UnlockSysSemaphore
	lbra	FMTK_RetXD

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FMTK_ExitTask:

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

FMTK_KillTask:
0001:
	ldd		#-1
	lbsr	LockSysSemaphore
	beq		0001b
	lbsr	GetRunningTCBPtr
	tfr		d,x
	ldd		TCBxAcca,x
	lbsr	RemoveFromReadyQueue
	lbsr	RemoveFromTimeoutList
	lbsr	TCBHandleToPointer
	tfr		d,y
	ldd		TCBhMailboxes,y
	lbsr	IFreeMBX
	ldd		TCBhMailboxes+2,y
	lbsr	IFreeMBX
	ldd		TCBhMailboxes+4,y
	lbsr	IFreeMBX
	ldd		TCBhMailboxes+6,y
	lbsr	IFreeMBX
	; Remove from list of tasks ACB has
	ldb		TCBappid,y
	lbsr	ACBHandleToPointer
	tfr		d,u
	lde		ACBTaskList,u
	
	cmpe	TCBxAccb,x
	beq		0002f
	tfr		e,b
	clra
	lbsr	TCBHandleToPointer
	tfr		d,u
	ldf		TCBAcbNext,u
	cmpf	TCBxAccb,x
	beq		0003f
	
	
;------------------------------------------------------------------------------
; Lock the system semaphore.
;
; Parameters:
;		D = number of retry attempts
;	Returns:
;		D = 1 if lock successful, 0 otherwise
;------------------------------------------------------------------------------

LockSysSemaphore:
LockSysSema2:
	decd
	beq		LockSysSema1
	lda		OSSEMA+1
	beq		LockSysSema2
	ldd		#1
	rts
LockSysSema1:
	clrd
	rts

;------------------------------------------------------------------------------
; Unlock system semaphore.
;
; Parameters:
;		none
; Returns:
;		none
;------------------------------------------------------------------------------

UnlockSysSemaphore:
	clr		OSSEMA+1
	rts

;------------------------------------------------------------------------------
; Get the system tick (milliseconds).
;
; Trickery involved in guarenteeing that the tick was read without an
; intervening interrupt updating it.
;
; Parameters:
;		none
; Returns:
;		D,W = tick value
;------------------------------------------------------------------------------

IGetTick:
0001:
	ldd		milliseconds
	ldw		milliseconds+2
	cmpd	milliseconds
	bne		0001b						; this branch should be false almost always
	rts

;------------------------------------------------------------------------------
; Link each message to the next in the free list.
;------------------------------------------------------------------------------

InitFreeMessageList:
	ldd		#1
	std		FreeMSG					; set start of free message list to first message
	ldx		#messages+OBJ_SIZE
	incd
0003:
	std		MSG_LINK,x			; update link
	incd									; increment to next index value
	leax	MSG_SIZE,x			; increment to next message
	cmpx	#messages_end		; done all messages?
	blo		0003b
	rts

;------------------------------------------------------------------------------
; Link each mailbox to the next in the free list.
;------------------------------------------------------------------------------

InitFreeMailboxList:
	ldd		#1
	std		FreeMBX					; set start of free mailbox list to first mailbox
	ldx		#mailboxes+OBJ_SIZE
	incd
0003:
	std		MBX_LINK,x			; update link
	incd									; increment to next index value
	leax	MBX_SIZE,x			; increment to next mailbox
	cmpx	#mailboxes_end	; done all mailboxes?
	blo		0003b
	rts

;------------------------------------------------------------------------------
; Link each TCB to the next in the free list.
;------------------------------------------------------------------------------

InitFreeTCBList:
	ldb		#1
	stb		FreeTCB
	ldx		#tcbs+OBJ_SIZE
0001:
	stb		TBCNext,x
	incb
	leas	TCB_SIZE,x
	cmpx	#tcb_ends
	blo		0001b
	rts

;------------------------------------------------------------------------------
; Initialize Femtiki
;------------------------------------------------------------------------------

FMTK_Init:

	ldb		#$C00				; select the system memory map
	stb		MMU_OKEY		; set in operate key

	; Clear out variable area
	ldx		#FemtikiVars
	clrd
0001:
	std		,x++
	cmpx	#FemtikiVars_end
	blo		0001b
	lda		#1
	sta		OSActive
	sta		RunningAID
	sta		RunningID		; reset this

	; Set stack bottoms for all the memory maps
	ldx		#0
	ldb		#MAXVPG
0003:
	stb		MidStackBottoms,x
	inx
	cmpx	#32
	blo		0003b

	bsr		InitFreeMessageList
	bsr		InitFreeMailboxList
	bsr		InitFreeTCBList

	clr		startQNdx
	
	bsr		InitAppOne
	bsr		InitTaskOne

	; Map ACB into virtual address space at $600000
	ldd		#$094F00
	std		MMU+$600
	inca
	std		MMU+$602
	rts

;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

InitAppOne:
	ldb		#1
	bsr		ACBHandleToPointer
	tfr		d,x
	clrd
	tfr		d,y
	pshs	x
0001:
	std		,x++
	leay	2,y
	cmpy	#ACB_SIZE
	blo		0001b
	puls	x
	ldd		#('A' << 16) | ('C' << 8) | 'B'
	std		ACBObject+OBJMagic,x
	clr		ACBmid,x			; system uses map #0
	ldd		#$E00000
	std		ACBpVidMem,x
	lda		#64
	sta		ACBVideoCols,x
	lda		#32
	sta		ACBVideoRows,x
	clr		ACBCursorCol,x
	clr		ACBCursorRow,x
	lda		#$CE
	sta		ACBNormAttr,x
	lda		#1
	sta		ACBHasFocus,x
	sta		ACBTaskList,x
	rts

;------------------------------------------------------------------------------
; When called, the context for the task has already been stored in the TCB.
; Do not zero out the TCB!
;------------------------------------------------------------------------------

InitTaskOne:
	ldb		#1
	bsr		TCBHandleToPointer
	tfr		d,x
	clrd
	std		TCBxDPR,x
	inca							; appid 1 is system app
	sta		TCBappid,x
	sta		TCBtid,x
	sta		TCBNext,x
	sta		TCBPrev,x
	sta		TCBHasFocus,x
	lda		#TS_RUNNING
	sta		TCBStatus,x
	lda		#3
	sta		TCBPriority,x
	ldb		#1
	lbsr	InsertIntoReadyQueue
	rts


include "d:\cores2022\rf6809\software\fmtk\source\kernel\tcb.a09"
include "d:\cores2022\rf6809\software\fmtk\msg.a09"
