# ============================================================================
#        __
#   \\__/ o\    (C) 2020-2025  Robert Finch, Waterloo
#    \  __ /    All rights reserved.
#     \/_//     robfinch<remove>@finitron.ca
#       ||
#  
#
# BSD 3-Clause License
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ============================================================================

#------------------------------------------------------------------------------
# IAllocTCB is called from FMTK_StartTask
#------------------------------------------------------------------------------

IAllocTCB:
	move br2,br1
	ldwz. a0,FreeTCB
	beq	cr0,.0001
	bl TCBHandleToPointer
	ldwz a1,TCBNext[a0]
	stw	a1,FreeTCB
.0001:
	blr br2

# Not called from anywhere

FMTK_AllocTCB:
	move br3,br1
.0002:
	loadi a0,-1
	bl LockSysSemaphore
	beq	cr0,.0002
	bl IAllocTCB
	store r0,OSSEMA
	loadi a0,E_Ok
	blr br3
	
#------------------------------------------------------------------------------
# IFreeTCB is called from SelectTaskToRun
#------------------------------------------------------------------------------

IFreeTCB:
	move a3,a0
	push br1
	bl TCBHandleToPointer
	pop br1
	ldwz a1,FreeTCB
	stw a1,TCBNext[a0]
	stb	a3,FreeTCB
	blr

#------------------------------------------------------------------------------
# FreeTCB does not actually free the TCB, instead it flags it as needed to be
# freed, and the scheduler frees it. It was done this way to avoid the need
# to lock the list with a semaphore which would cause a deadlock.
#------------------------------------------------------------------------------

FMTK_FreeTCB:
	cmp cr0,a0,0
	ble cr0,.0001
	move br2,br1
	bl TCBHandleToPointer
	move br1,br2
	loadi a1,TS_FREE
	amoor r0,a1,TCBStatus[a0]
	loadi a0,E_Ok
	blr br2
.0001:
	loadi a0,E_NotAlloc
	blr

#------------------------------------------------------------------------------
# Push task into ready queue. The ready queue is a hardware component on the
# bus.
#
# Stack Space:
#		1 words
# Modifies:
#		none
# Parameters:
#		a0 = task id to insert
#------------------------------------------------------------------------------

InsertIntoReadyQueue:
	cmp cr0,a0,0
	ble cr0,.0001
	move a3,a0
	push br1
	bl TCBHandleToPointer
	pop br1
	ldbz a1,TCBPriority[a0]
	loadi a4,TS_RUNNING
	amoor r0,a4,TCBStatus[a0]
	and a1,a1,7								# safety
	and a3,a3,0xffff					# safety
	sll a1,a1,16
	or a3,a3,a1
	store a3,RDYQ
.0001:
	blr

#------------------------------------------------------------------------------
# Remove task from ready queue. Accomplished by clearing the ready / running
# status. The next time the queue is popped, the task will be discarded as
# a choice for running.
#
# Parameters:
#		a0 = task id to remove
#------------------------------------------------------------------------------

RemoveFromReadyQueue:
	cmp cr0,a0,0							# sanity check
	ble cr0,.0001
	push br1
	bl TCBHandleToPointer
	loadi a1,~(TS_RUNNING|TS_READY)
	amoand r0,a1,TCBStatus[a0]
	pop br1
0001:
	blr
	
#------------------------------------------------------------------------------
# Remove a task from the timeout list.
# Called when a mailbox is freed and a task is waiting at the
# mailbox.
#
# Parameters:
#		a0 = task id to remove
# Modifies:
#		none
# Returns:
#		none
#------------------------------------------------------------------------------

RemoveFromTimeoutList:
	push br1
	push 0x1e,0
	cmpa cr0,a0,TimeoutList	# head of list?
	beq	cr0,.0001
	bl TCBHandleToPointer
	move a2,a0							# a2 points to arg
	# We want
	# arg->next->prev = arg->prev
	# arg->prev->next = arg->next
	ldwz a0,TCBNext[a2]
	bl TCBHandleToPointer		# a0 points to arg->next
	move a1,a0
	ldwz a0,TCBPrev[a2]
	bl TCBHandleToPointer
	move a3,a0
	# Here:
	# a1 = arg->next
	# a3 = arg->prev
	ldwz a4,TCBPrev[a2]
	stw a4,TCBPrev[a3]
	ldwz a4,TCBNext[a2]
	stw a4,TCBNext[a1]
	b	.0002
	# Removing from head of timeout list
.0001:
	bl TCBHandleToPointer
	ldwz a1,TCBNext[a0]
	stw	a1,TimeoutList			# set new head of list
	move a2,a0
	move a0,a1
	bl TCBHandleToPointer
	stw	r0,TCBPrev[a0]			# next->prev = NULL
0002:
	stw	r0,TCBNext[a2]			# arg->next = NULL
	stw r0,TCBPrev[a2]			# arg->prev = NULL
	pop 0x1e,0
	pop br1
	blr
	
#// ----------------------------------------------------------------------------
#// Pop the top entry from the timeout list.
#// ----------------------------------------------------------------------------
#
#hTCB PopTimeoutList()
#{
#    TCB *p;
#    hTCB h;
#
#    h = TimeoutList;
#    if (TimeoutList > 0 && TimeoutList < NR_TCB) {
#        TimeoutList = tcbs[TimeoutList].next;
#        if (TimeoutList >= 0 && TimeoutList < NR_TCB) {
#            tcbs[TimeoutList].prev = h->prev;
#            h->prev->next = TimeoutList;
#        }
#    }
#    return h;
#}
#
# Returns:
#		B = task at top of list
#

PopTimeoutList:
	push br1
	push 0xe,0
	ldwz. a0,TimeoutList
	beq	cr0,.0001
	cmpa cr0,a0,NR_TCB
	bgt cr0,.0001
	bl TCBHandleToPointer
	ldwz. a1,TCBNext[a0]
	ldwz a2,TCBPrev[a0]
	stw a1,TimeoutList
	beq	cr0,.0001
	cmpa cr0,a1,NR_TCB
	bgt cr0,.0001
	move a3,a0
	move a0,a1
	bl TCBHandleToPointer
	stw a2,TCBPrev[a0]
	move a0,a2
	bl TCBHandleToPointer
	stw a1,TCBNext[a0]
	stw r0,TCBPrev[a3]
	stw r0,TCBNext[a3]
.0001:
	pop 0xe,0
	pop br1
	blr

# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------

DispTwoSpace:
	push br1
	bl DispSpace
	pop br1
DispSpace:
	loadi a0,MF_OUTCH
	loadi a1,' '
	sys
	blr

DumpTCBs:
	push lr
	loadi a0,MF_CRLF
	sys
	loadi a0,1
.0002:
	bl TCBHandleToPointer
	move a1,a0
	ldwz TCBtid[a0]
	loadi a0,MF_DisplayWydeAsHex
	sys
	bl DispSpace
	loadi a0,MF_DisplayByteAsHex
	ldbz a2,TCBStatus[a1]
	sys
	bl DispTwoSpace
	loadi a0,MF_CRLF
	sys
	ldwz. a0,TCBNext[a1]
	bne cr0,.0002			# could use PRED here
.0001:
	pop lr
	blr
	
.byte	"TID Stat"

